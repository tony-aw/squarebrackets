rcpp_scripts1 <- character(length(DTYPES) + length(RTYPES))
counter <- 1
for(j in RTYPES) {
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"RTYPE",
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
j,
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
}
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_2d_6d_RTYPE)]]
IntegerVector rcpp_set_array_2d_6d_RTYPE(
RTYPEVector x, List out, IntegerVector dimcumprod, RTYPEVector rp
) {
int n = out.length();
IntegerVector ind1 = out[0];
IntegerVector ind2 = out[1];
IntegerVector ind3;
IntegerVector ind4;
IntegerVector ind5;
IntegerVector ind6;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
}
}
}
}
switch(n) {
case 2: return rcpp_set_array_2d_RTYPE(
x,
<args2>,
dimcumprod,
rp
);
case 3: return rcpp_set_array_3d_RTYPE(
x,
<args3>,
dimcumprod,
rp
);
case 4: return rcpp_set_array_4d_RTYPE(
x,
<args4>,
dimcumprod,
rp
);
case 5: return rcpp_set_array_5d_RTYPE(
x,
<args5>,
dimcumprod,
rp
);
case 6: return rcpp_set_array_6d_RTYPE(
x,
<args6>,
dimcumprod,
rp
);
}
}
"
args <- sprintf("ind%d", 1:6)
rp <- sapply(2:6, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:6),
rp,
vectorize_all = FALSE
)
rcpp_scripts2 <- character(length(RTYPES))
for(i in seq_along(RTYPES)) {
rcpp_scripts2[[i]] <- stri_replace_all(
templatecode2,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts1, rcpp_scripts2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode1 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd_RTYPE)]]
void rcpp_set_array_DTYPEd_RTYPE(
RTYPEVector x, <args>, IntegerVector dimcumprod, RTYPEVector rp
) {
<setlengths>
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
"
rcpp_scripts1 <- character(length(DTYPES) + length(RTYPES))
counter <- 1
for(j in RTYPES) {
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"RTYPE",
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
j,
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
}
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_2d_6d_RTYPE)]]
void rcpp_set_array_2d_6d_RTYPE(
RTYPEVector x, List out, IntegerVector dimcumprod, RTYPEVector rp
) {
int n = out.length();
IntegerVector ind1 = out[0];
IntegerVector ind2 = out[1];
IntegerVector ind3;
IntegerVector ind4;
IntegerVector ind5;
IntegerVector ind6;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
}
}
}
}
switch(n) {
case 2: rcpp_set_array_2d_RTYPE(
x,
<args2>,
dimcumprod,
rp
);
case 3: rcpp_set_array_3d_RTYPE(
x,
<args3>,
dimcumprod,
rp
);
case 4: rcpp_set_array_4d_RTYPE(
x,
<args4>,
dimcumprod,
rp
);
case 5: rcpp_set_array_5d_RTYPE(
x,
<args5>,
dimcumprod,
rp
);
case 6: rcpp_set_array_6d_RTYPE(
x,
<args6>,
dimcumprod,
rp
);
}
}
"
args <- sprintf("ind%d", 1:6)
rp <- sapply(2:6, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:6),
rp,
vectorize_all = FALSE
)
rcpp_scripts2 <- character(length(RTYPES))
for(i in seq_along(RTYPES)) {
rcpp_scripts2[[i]] <- stri_replace_all(
templatecode2,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts1, rcpp_scripts2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode1 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd_RTYPE)]]
void rcpp_set_array_DTYPEd_RTYPE(
RTYPEVector x, <args>, IntegerVector dimcumprod, RTYPEVector rp
) {
<setlengths>
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
"
rcpp_scripts1 <- character(length(DTYPES) + length(RTYPES))
counter <- 1
for(j in RTYPES) {
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"RTYPE",
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
j,
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
}
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_2d_6d_RTYPE)]]
void rcpp_set_array_2d_6d_RTYPE(
RTYPEVector x, List out, IntegerVector dimcumprod, RTYPEVector rp
) {
int n = out.length();
IntegerVector ind1 = out[0];
IntegerVector ind2 = out[1];
IntegerVector ind3;
IntegerVector ind4;
IntegerVector ind5;
IntegerVector ind6;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
}
}
}
}
switch(n) {
case 2:
rcpp_set_array_2d_RTYPE(
x,
<args2>,
dimcumprod,
rp
);
break;
case 3:
rcpp_set_array_3d_RTYPE(
x,
<args3>,
dimcumprod,
rp
);
break;
case 4:
rcpp_set_array_4d_RTYPE(
x,
<args4>,
dimcumprod,
rp
);
break;
case 5:
rcpp_set_array_5d_RTYPE(
x,
<args5>,
dimcumprod,
rp
);
break;
case 6:
rcpp_set_array_6d_RTYPE(
x,
<args6>,
dimcumprod,
rp
);
break;
}
}
"
args <- sprintf("ind%d", 1:6)
rp <- sapply(2:6, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:6),
rp,
vectorize_all = FALSE
)
rcpp_scripts2 <- character(length(RTYPES))
for(i in seq_along(RTYPES)) {
rcpp_scripts2[[i]] <- stri_replace_all(
templatecode2,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts1, rcpp_scripts2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
fileConn <- file("src/dynamic_rcpp_set_array_d.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, dimcumprod, total
) {
R_xlen_t counter = 0;
R_xleb_t factor = 0;
IntegerVector flatind = lst[0];
for(int j = 1; j < lst.length(); ++j) {
IntegerVector temp = lst[j];
factor = dimcumprod[j - 1];
for(int i = 0; i < temp.length(); ++i) {
flatind[counter] = factor * (temp[i] - 1);
counter++;
}
}
return flatind;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, dimcumprod, total
) {
R_xlen_t counter = 0;
R_xlen_t factor = 0;
IntegerVector flatind = lst[0];
for(int j = 1; j < lst.length(); ++j) {
IntegerVector temp = lst[j];
factor = dimcumprod[j - 1];
for(int i = 0; i < temp.length(); ++i) {
flatind[counter] = factor * (temp[i] - 1);
counter++;
}
}
return flatind;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, IntegerVector dimcumprod, int total
) {
R_xlen_t counter = 0;
R_xlen_t factor = 0;
IntegerVector flatind = lst[0];
for(int j = 1; j < lst.length(); ++j) {
IntegerVector temp = lst[j];
factor = dimcumprod[j - 1];
for(int i = 0; i < temp.length(); ++i) {
flatind[counter] = factor * (temp[i] - 1);
counter++;
}
}
return flatind;
}
"
)
