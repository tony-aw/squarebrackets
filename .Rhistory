current_setlengths,
current_setlength_mult,
current_pointers,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
C_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
C_scripts
C_code <- paste(C_scripts, collapse = "\n\n\n")
cat(C_code)
source("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/DynamicallyType_CScripts.R")
DTYPES <- 2:6
all_args <- stri_c("const SEXP ind", 1:6)
setlengths <- c("int ni = Rf_length(ind1);",
"int nj = Rf_length(ind2);",
"int nk = Rf_length(ind3);",
"int nl = Rf_length(ind4);",
"int nm = Rf_length(ind5);",
"int nn = Rf_length(ind6);")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- rev(c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"pi[i]",
"pdim[0] * (pj[j] - 1)",
"pdim[1] * (pk[k] - 1)",
"pdim[2] * (pl[l] - 1)",
"pdim[3] * (pm[m] - 1)",
"pdim[4] * (pn[n] - 1)"
)
set_pointers <- sprintf("int *p%s; \n p%s = INTEGER(ind%d)", letters[9:14], letters[9:14], 1:6)
templatecode <- "
#include <R.h>
#include <Rdefines.h>
#include <R_ext/Error.h>
SEXP C_sub2ind_DTYPEd(
<args>, const SEXP dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
int temp = 0;
<setpointers>
int *pout;
SEXP out = PROTECT(allocVector(INTSXP, <setlength_mult>));
pout = INTEGER(out);
<startfor>
int temp = <main>;
pout[counter] = temp;
counter++;
<endfor>
return out;
}
"
C_scripts <- character(length(DTYPES))
names(C_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_pointers <- stri_c(set_pointers[1:i], collapse = "\n")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<setpointers>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_pointers,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
C_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
C_code <- paste(C_scripts, collapse = "\n\n\n")
cat(C_code)
DTYPES <- 2:6
all_args <- stri_c("const SEXP ind", 1:6)
setlengths <- c("int ni = Rf_length(ind1);",
"int nj = Rf_length(ind2);",
"int nk = Rf_length(ind3);",
"int nl = Rf_length(ind4);",
"int nm = Rf_length(ind5);",
"int nn = Rf_length(ind6);")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- rev(c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"pi[i]",
"pdim[0] * (pj[j] - 1)",
"pdim[1] * (pk[k] - 1)",
"pdim[2] * (pl[l] - 1)",
"pdim[3] * (pm[m] - 1)",
"pdim[4] * (pn[n] - 1)"
)
set_pointers <- sprintf("int *p%s; \n p%s = INTEGER(ind%d)", letters[9:14], letters[9:14], 1:6)
templatecode <- "
#include <R.h>
#include <Rdefines.h>
#include <R_ext/Error.h>
SEXP C_sub2ind_DTYPEd(
<args>, const SEXP dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
int temp = 0;
<setpointers>
int *pdim;
pdim = INTEGER(dimcumprod);
int *pout;
SEXP out = PROTECT(allocVector(INTSXP, <setlength_mult>));
pout = INTEGER(out);
<startfor>
int temp = <main>;
pout[counter] = temp;
counter++;
<endfor>
UNPROTECT(1);
return out;
}
"
C_scripts <- character(length(DTYPES))
names(C_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_pointers <- stri_c(set_pointers[1:i], collapse = "\n")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<setpointers>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_pointers,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
C_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
C_code <- paste(C_scripts, collapse = "\n\n\n")
cat(C_code)
body_dynamic <- "
int ni = Rf_length(ind1);
int nj = Rf_length(ind2);
int nk = Rf_length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *pi;
pi = INTEGER(ind1)
int *pj;
pj = INTEGER(ind2)
int *pk;
pk = INTEGER(ind3)
int *pdim;
pdim = INTEGER(dimcumprod);
int *pout;
SEXP out = PROTECT(allocVector(INTSXP, ni * nj * nk));
pout = INTEGER(out);
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
int temp = pi[i] + pdim[0] * (pj[j] - 1) + pdim[1] * (pk[k] - 1);
pout[counter] = temp;
counter++;
}
}
}
UNPROTECT(1);
return out;
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "const INTSXP", ind2 = "const INTSXP", ind3 = "const INTSXP", dimcumprod = "const INTSXP"),
body = body_dynamic
)
DTYPES <- 2:6
all_args <- stri_c("const SEXP ind", 1:6)
setlengths <- c("int ni = Rf_length(ind1);",
"int nj = Rf_length(ind2);",
"int nk = Rf_length(ind3);",
"int nl = Rf_length(ind4);",
"int nm = Rf_length(ind5);",
"int nn = Rf_length(ind6);")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- rev(c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"pi[i]",
"pdim[0] * (pj[j] - 1)",
"pdim[1] * (pk[k] - 1)",
"pdim[2] * (pl[l] - 1)",
"pdim[3] * (pm[m] - 1)",
"pdim[4] * (pn[n] - 1)"
)
set_pointers <- sprintf("int *p%s; \n p%s = INTEGER(ind%d);", letters[9:14], letters[9:14], 1:6)
templatecode <- "
#include <R.h>
#include <Rdefines.h>
#include <R_ext/Error.h>
SEXP C_sub2ind_DTYPEd(
<args>, const SEXP dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
int temp = 0;
<setpointers>
int *pdim;
pdim = INTEGER(dimcumprod);
int *pout;
SEXP out = PROTECT(allocVector(INTSXP, <setlength_mult>));
pout = INTEGER(out);
<startfor>
int temp = <main>;
pout[counter] = temp;
counter++;
<endfor>
UNPROTECT(1);
return out;
}
"
C_scripts <- character(length(DTYPES))
names(C_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_pointers <- stri_c(set_pointers[1:i], collapse = "\n")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<setpointers>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_pointers,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
C_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
C_scripts[3]
C_scripts[[3]
]
C_scripts[[3]] |> cat()
body_dynamic <- "
int ni = Rf_length(ind1);
int nj = Rf_length(ind2);
int nk = Rf_length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *pi;
pi = INTEGER(ind1);
int *pj;
pj = INTEGER(ind2);
int *pk;
pk = INTEGER(ind3);
int *pdim;
pdim = INTEGER(dimcumprod);
int *pout;
SEXP out = PROTECT(allocVector(INTSXP, ni * nj * nk));
pout = INTEGER(out);
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
int temp = pi[i] + pdim[0] * (pj[j] - 1) + pdim[1] * (pk[k] - 1);
pout[counter] = temp;
counter++;
}
}
}
UNPROTECT(1);
return out;
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "const INTSXP", ind2 = "const INTSXP", ind3 = "const INTSXP", dimcumprod = "const INTSXP"),
body = body_dynamic
)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_3d(
const IntegerVector ind1, const IntegerVector ind2, const Rcpp::IntegerVector ind3, const IntegerVector dimcumprod
) {
int ni = ind1.length();
int nj = ind2.length();
int nk = ind3.length();
R_xlen_t counter = 0;
IntegerVector flatind(ni * nj * nk);
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
flatind[counter] = ind1[i] + dimcumprod[0]  * (ind2[j] - 1) + dimcumprod[1] * (ind3[k] - 1);
counter++;
}
}
}
return flatind;
}
"
)
x.dim <- c(1500L, 1500L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_c <- C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
all( test_rcpp == test_c)
foo <- bench::mark(
rcpp = rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
C = C_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
DTYPES <- 2:6
all_args <- stri_c("const SEXP ind", 1:6)
setlengths <- c("int ni = Rf_length(ind1);",
"int nj = Rf_length(ind2);",
"int nk = Rf_length(ind3);",
"int nl = Rf_length(ind4);",
"int nm = Rf_length(ind5);",
"int nn = Rf_length(ind6);")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- rev(c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"pi[i]",
"pdim[0] * (pj[j] - 1)",
"pdim[1] * (pk[k] - 1)",
"pdim[2] * (pl[l] - 1)",
"pdim[3] * (pm[m] - 1)",
"pdim[4] * (pn[n] - 1)"
)
set_pointers <- sprintf("int *p%s; \n p%s = INTEGER(ind%d);", letters[9:14], letters[9:14], 1:6)
templatecode <- "
#include <R.h>
#include <Rdefines.h>
#include <R_ext/Error.h>
SEXP C_sub2ind_DTYPEd(
<args>, const SEXP dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
int temp = 0;
<setpointers>
int *pdim;
pdim = INTEGER(dimcumprod);
int *pout;
SEXP out = PROTECT(allocVector(INTSXP, <setlength_mult>));
pout = INTEGER(out);
<startfor>
int temp = <main>;
pout[counter] = temp;
counter++;
<endfor>
UNPROTECT(1);
return out;
}
"
C_scripts <- character(length(DTYPES))
names(C_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_pointers <- stri_c(set_pointers[1:i], collapse = "\n")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<setpointers>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_pointers,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
C_scripts[[i]] <- out
}
C_code <- paste(C_scripts, collapse = "\n\n\n")
cat(C_code)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
fileConn <- file("src/dynamic_C_sub2ind_d.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
