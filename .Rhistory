)
warnings()
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
min_iterations = 500
)
?Rcpp::cppFunction
summary(foo)
ggplot2::autoplot(foo)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
# set-up ====
library(stringi)
# set all ====
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_all_RTYPE)]]
void rcpp_set_all_RTYPE(RTYPEVector x, RTYPEVector rp) {
R_xlen_t n = x.length();
if(rp.length() == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[i] = rp[i];
}
}
else if(rp.length() == 1) {
for(R_xlen_t i = 0; i < n; ++i){
x[i] = rp[0];
}
}
else stop(\"recycling not allowed\");
}
"
rcpp_scripts <- character(length(RTYPES))
names(rcpp_scripts) <- RTYPES
for(i in seq_along(RTYPES)) {
rcpp_scripts[[i]] <- stri_replace_all(
templatecode,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_set_all.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
################################################################################
# set vind ====
Rcpp::cppFunction(
"
bool rcpp_check_len(
NumericVector rp
) {
R_xlen_t n_rp = rp.length();
bool out = n_rp == 1;
return out;
}
"
)
rcpp_check_len(rp)
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_vind_64_RTYPE)]]
void rcpp_set_vind_64_RTYPE(RTYPEVector x, const NumericVector ind, const RTYPEVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
else if(rp.length() == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"recycling not allowed\");
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_vind_32_RTYPE)]]
void rcpp_set_vind_32_RTYPE(RTYPEVector x, const IntegerVector ind, const RTYPEVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
else if(rp.length() == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"recycling not allowed\");
}
"
rcpp_scripts <- character(length(RTYPES))
names(rcpp_scripts) <- RTYPES
for(i in seq_along(RTYPES)) {
rcpp_scripts[[i]] <- stri_replace_all(
templatecode,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_set_vind.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
################################################################################
# setrv ====
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Raw")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_RTYPE)]]
void rcpp_setrv_safe_RTYPE(RTYPEVector x, RTYPEVector v, RTYPEVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!RTYPEVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!RTYPEVector::is_na(x[i])) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_RTYPE)]]
void rcpp_setrv_fast_RTYPE(RTYPEVector x, RTYPEVector v, RTYPEVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_Complex)]]
void rcpp_setrv_safe_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_Complex)]]
void rcpp_setrv_fast_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_setrv.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
Rcpp::cppFunction(
"
void rcpp_set_vind_32_Numeric(NumericVector x, const IntegerVector ind, const NumericVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
#pragma omp parallel for
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
else if(rp.length() == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"recycling not allowed\");
}
",
plugins = "openmp"
)
tempfun1 <- function(x, ind, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp)
return(x)
}
tempfun2 <- function(x, ind, rp) {
x <- data.table::copy(x)
rcpp_set_vind_32_Numeric(x, ind-1, rp)
return(x)
}
x <- rnorm(1e6)
ind <- sample(1:length(x))
rp <- rnorm(1e6)
all(tempfun1(x, ind, rp) == tempfun2(x, ind, rp))
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
collapse::setv(x, ind, rp),
min_iterations = 500
)
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
collapse::setv(x, ind, rp, vind1 = TRUE),
min_iterations = 500
)
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
collapse::setv(x, ind, rp, vind1 = TRUE),
min_iterations = 500,
check = TRUE
)
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
collapse::setv(x, ind, rp, vind1 = TRUE),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
code <- Rcpp::cppFunction(
"
void rcpp_set_vind_32_Numeric(NumericVector x, const IntegerVector ind, const NumericVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
#pragma omp parallel for
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
else if(rp.length() == 1) {
#pragma omp parallel for
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"recycling not allowed\");
}
",
plugins = "openmp"
)
View(code)
Rcpp::cppFunction(
"
void rcpp_set_vind_32_Numeric(NumericVector x, const IntegerVector ind, const NumericVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
#pragma omp parallel for
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
else if(rp.length() == 1) {
#pragma omp parallel for
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"recycling not allowed\");
}
",
plugins = "openmp"
)
Rcpp::cppFunction(
"
void rcpp_set_vind_32_Numeric(NumericVector x, const IntegerVector ind, const NumericVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
#pragma omp parallel for{
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
}
else if(rp.length() == 1) {
#pragma omp parallel for{
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
}
else stop(\"recycling not allowed\");
}
",
plugins = "openmp"
)
Rcpp::cppFunction(
"
void rcpp_set_vind_32_Numeric(NumericVector x, const IntegerVector ind, const NumericVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
#pragma omp parallel for
{
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
}
else if(rp.length() == 1) {
#pragma omp parallel for
{
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
}
else stop(\"recycling not allowed\");
}
",
plugins = "openmp"
)
Rcpp::cppFunction(
"
void rcpp_set_vind_32_Numeric(NumericVector x, const IntegerVector ind, const NumericVector rp) {
R_xlen_t n = ind.length();
if(rp.length() == n) {
#pragma omp parallel for
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[i];
}
}
else if(rp.length() == 1) {
#pragma omp parallel for
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"recycling not allowed\");
}
",
plugins = "openmp"
)
x <- rnorm(1e6)
ind <- sample(1:length(x))
rp <- rnorm(1e6)
all(tempfun1(x, ind, rp) == tempfun2(x, ind, rp))
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
collapse::setv(x, ind, rp, vind1 = TRUE),
min_iterations = 500,
check = FALSE
)
?collapse::`AA4-collapse-options`
collapse::get_collapse("nthreads")
collapse::set_collapse(nthreads = 4)
foo <- bench::mark(
rcpp_set_vind_32_Numeric(x, ind-1, rp),
squarebrackets:::.rcpp_set_vind_32_Numeric(x, ind-1, rp),
collapse::setv(x, ind, rp, vind1 = TRUE),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
seq(0, 10, 3)
(seq(0, 10, 3) - 0) / 3
(seq(10, 0, 3) - 0) / 3
(seq(10, 0, -3) - 0) / 3
(seq(10, 0, -3) - 10) / 3
seq(10, 20, 2)
(seq(10, 20, 2) - 10)/2
(seq(10, 20, 2) - 10)/2 + 10
(seq(10, 20, 2))/2
end = 10
seq(end + 1, 20)
seq(end + 1, 20) - end - 1
seq(end + 1, 20, 2)
(seq(end + 1, 20, 2)-end-1)/2
(seq(end + 1, 20, 2)-end-1)/2 + end
Rcpp::cppFunction(
"
R_xlen_t rcpp_counter(
R_xlen_ti, R_xlen_t start, R_xlen_t by
) {
R_xlen_t out = (i - start) / by + start;
return out;
}
"
)
Rcpp::cppFunction(
"
R_xlen_t rcpp_counter(
R_xlen_t i, R_xlen_t start, R_xlen_t by
) {
R_xlen_t out = (i - start) / by + start;
return out;
}
"
)
Rcpp::cppFunction(
"
R_xlen_t rcpp_counter(
R_xlen_t i, R_xlen_t start, R_xlen_t by
) {
R_xlen_t out = abs(i - start) / by + start;
return out;
}
"
)
rcpp_counter(1, 10, 2)
abs(1 - 10) / 2
abs(10 - 10) / 2
Rcpp::cppFunction(
"
R_xlen_t rcpp_counter(
R_xlen_t i, R_xlen_t start, R_xlen_t by
) {
// assumes i >= start
R_xlen_t out = abs(i - start) / by + start;
return out;
}
"
)
rcpp_counter(10, 10, 2)
0:9
9 - 0
