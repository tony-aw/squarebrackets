y <- as.complex(1:1e6)
},
collapse = collapse::setv(x, 1:100, x[1:100], vind1 = TRUE),
rcpp = rcpp_setvind_Complex(y, 1:100, y[1:100]),
min_iterations = 500,
check = FALSE
)
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"vector recycling not allowed\");
}
"
)
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0:1, NA)
x
x <- 1:4e6
y <- as.complex(1:1e6) # equal object.size() to x
y
x <- 1:4e6
y <- as.complex(1:1e6) # equal object.size() to x
foo <- bench::mark(
setup = {
x <- 1:4e6;
y <- as.complex(1:1e6)
},
collapse = collapse::setv(x, 1:100, x[1:100], vind1 = TRUE),
rcpp = rcpp_setvind_Complex(y, 1:100, y[1:100]),
min_iterations = 500,
check = FALSE
)
foo
ggplot2::autoplot(foo)
rtypes <- c("Logical", "Integer", "Numeric", "Character")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_RTYPE)]]
void rcpp_setrv_safe_RTYPE(RTYPEVector x, RTYPEVector v, RTYPEVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!RTYPEVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!RTYPEVector::is_na(x[i])) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_RTYPE)]]
void rcpp_setrv_fast_RTYPE(RTYPEVector x, RTYPEVector v, RTYPEVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_Complex)]]
void rcpp_setrv_safe_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_Complex)]]
void rcpp_setrv_fast_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_Complex)]]
void rcpp_setrv_safe_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_Complex)]]
void rcpp_setrv_fast_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_Complex)]]
void rcpp_setrv_safe_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_Complex)]]
void rcpp_setrv_fast_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
fileConn <- file("src/dynamic_rcpp_setrv.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
Rcpp::cppFunction(
"
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_seq_rec)]]
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = as<double>(f(x[idx]));
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = as<double>(f(x[idx]));
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
NumericVector temp(1);
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
temp = as<NumericVector>(f(x[idx]));
x[i] = temp[0];
}
return x;
}
"
)
?squarebrackets::seq_rec
squarebrackets::seq_rec
rcpp_seq_rec(0:3, 10L, sum)
rcpp_seq_rec(0:1, 2, 10L, sum)
foo <- bench::mark(
rcpp_seq_rec(0:1, 2L, 10L, sum),
squarebrackets:::.rcpp_seq_rec(0:1, 2L, 10L, sum)
)
foo <- bench::mark(
rcpp_seq_rec(0:1, 2L, 10L, sum),
squarebrackets:::.rcpp_seq_rec(0:1, 2L, 10L, sum),
min_iterations =  500
)
foo
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
NumericVector temp(1);
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = as<double>(f(x[idx]));
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = as<double>(f(x[idx]));
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = as<double>(f(x[idx]));
}
return x;
}
"
)
foo <- bench::mark(
rcpp_seq_rec(0:1, 2L, 10L, sum),
squarebrackets:::.rcpp_seq_rec(0:1, 2L, 10L, sum),
min_iterations =  500
)
foo
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
NumericVector temp(1);
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
temp = as<NumericVector>(f(x[idx]));
x[i] = temp[0];
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
temp = as<NumericVector>(f(x[idx]));
x[i] = temp[0];
}
return x;
}
"
)
tempfun <- function(inits, n, f) {
w <- length(inits)
x <- numeric(n)
x[1:w] <- inits
for(i in (w+1):n) {
myrange <- (i-w):(i-1)
x[i] <- f(x[myrange])
}
return(x)
}
tempfun(0:1, 10L, sum)
rcpp_seq_rec(0:1, 2L, 10L, sum)
foo <- bench::mark(
new = rcpp_seq_rec(0:1, 2L, 10L, sum),
old = squarebrackets:::.rcpp_seq_rec(0:1, 2L, 10L, sum),
loop = tempfun(0:1, 10L, sum),
min_iterations =  500
)
foo
foo <- bench::mark(
new = rcpp_seq_rec(0:1, 2L, 100L, sum),
old = squarebrackets:::.rcpp_seq_rec(0:1, 2L, 100L, sum),
loop = tempfun(0:1, 100L, sum),
min_iterations =  500
)
foo
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_minus1(
NumericVector inits, int n, NumericVector s, NumericVector m, int form, bool rev
) {
NumericVector x(n);
Range idx(0, 1);
x[idx] = inits;
if(!rev) {
int previous1 = 1;
int previous2 = 2;
}
if(rev) {
int previous1 = 2;
int previous2 = 1;
}
for (int i = 2; i < n; i++){
x[i] = x[i-previous1] - x[i-previous2];
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_minus1(
NumericVector inits, int n, NumericVector s, NumericVector m, bool rev
) {
NumericVector x(n);
Range idx(0, 1);
x[idx] = inits;
int previous1 = 0;
int previous2 = 0;
if(!rev) {
previous1 = 1;
previous2 = 2;
}
if(rev) {
previous1 = 2;
previous2 = 1;
}
for (int i = 2; i < n; i++){
x[i] = x[i-previous1] - x[i-previous2];
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_minus1(
NumericVector inits, int n, NumericVector s, NumericVector m, bool rev
) {
NumericVector x(n);
Range idx(0, 1);
x[idx] = inits;
int previous1;
int previous2;
if(!rev) {
previous1 = 1;
previous2 = 2;
}
if(rev) {
previous1 = 2;
previous2 = 1;
}
for (int i = 2; i < n; i++){
x[i] = x[i-previous1] - x[i-previous2];
}
return x;
}
"
)
library(squarebrackets)
?sb_x
?squarebrackets
?squarebrackets::`squarebrackets-package`
?squarebrackets_indx_args
