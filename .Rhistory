"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
)
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:i, ">"),
"<setlength_mult>",
paste0("<for", 1:i, ">"),
"<main>",
paste0("<end", 1:i, ">")
)
current_replacement <- c(
i,
current_args,
setlengths[1:i],
current_setlength_mult,
all_for[1:i],
current_main,
rep("}", i)
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
rcpp_code
rcpp_code |> cat()
c(rep("}", i), rep("", 5-i))
i=4
c(rep("}", i), rep("", 5-i))
DTYPES <- 1:5
all_args <- c(
"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
)
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:5, ">"),
"<setlength_mult>",
paste0("<for", 1:5, ">"),
"<main>",
paste0("<end", 1:5, ">")
)
current_replacement <- c(
i,
current_args,
c(setlengths[1:i], , rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
DTYPES <- 1:5
all_args <- c(
"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
)
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:5, ">"),
"<setlength_mult>",
paste0("<for", 1:5, ">"),
"<main>",
paste0("<end", 1:5, ">")
)
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
all_for <- rev(c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
))
DTYPES <- 1:5
all_args <- c(
"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- rev(c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:5, ">"),
"<setlength_mult>",
paste0("<for", 1:5, ">"),
"<main>",
paste0("<end", 1:5, ">")
)
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
DTYPES <- 2:5
all_args <- c(
"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- rev(c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:5, ">"),
"<setlength_mult>",
paste0("<for", 1:5, ">"),
"<main>",
paste0("<end", 1:5, ">")
)
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
