}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_uneq_RTYPE)]]
void rcpp_setrv_uneq_RTYPE(RTYPEVector x, RTYPEVector v, RTYPEVector rp) {
R_xlen_t n = x.length();
for(R_xlen_t i; i < n; ++i) {
if(!RTYPEVector::is_na(x[i])) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
library(stringi)
x <- as.complex(1:10)
collapse::setv(x, 1, as.complex(2), vind1 = TRUE)
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"vector recycling not allowed\")
}
"
)
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"vector recycling not allowed\");
}
"
)
x <- 1:1e6
y <- as.complex(x)
object.size(x)
object.size(y)
x <- 1:4e6
object.size(x)
object.size(y)
x <- 1:4e6
y <- as.complex(1:1e6)
rcpp_setvind_Complex(y, 1, NA)
y
head(y)
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"vector recycling not allowed\");
}
"
)
x <- as.complex(1:10)
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 1L, as.complex(NA))
x
as.complex(NA)
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
Rcout << \" n_rp == n \\n \";
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
Rcout << \" n_rp == 1 \\n \";
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"vector recycling not allowed\");
}
"
)
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 1L, as.complex(NA))
x
x[1] <- NA
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0L, as.complex(NA))
x
x <- as.complex(1:10)
x
rcpp_setvind_Complex(x, 0L, as.complex(NA))
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 1L, as.complex(NA))
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 2L, as.complex(NA))
x
NA_complex_
?NA_complex_
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 2L, NA_complex_)
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0:1, c(NA_complex_, NA_complex_)
x <- 1:4e6
rcpp_setvind_Complex(x, 0:1, c(NA_complex_, NA_complex_))
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0:1, c(NA_complex_, NA_complex_))
x
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
Rcout << \" n_rp == n \\n \";
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
Rcout << \" n_rp == 1 \\n \";
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp;
}
}
else stop(\"vector recycling not allowed\");
}
"
)
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
Rcout << \" n_rp == n \\n \";
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
Rcout << \" n_rp == 1 \\n \";
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"vector recycling not allowed\");
}
"
)
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0:1, c(NA_complex_))
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0, c(NA_complex_))
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0, NA)
x
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0:1, NA)
x
x <- 1:4e6
y <- as.complex(1:1e6) # equal object.size() to x
y
foo <- bench::mark(
setup = {
x <- 1:4e6
y <- as.complex(1:1e6)
},
collapse = collapse::setv(x, 1:100, = x[1:100], vind1 = TRUE),
foo <- bench::mark(
setup = {
x <- 1:4e6
y <- as.complex(1:1e6)
},
collapse = collapse::setv(x, 1:100, = x[1:100], vind1 = TRUE),
foo <- bench::mark(
setup = {
x <- 1:4e6;
y <- as.complex(1:1e6)
},
collapse = collapse::setv(x, 1:100, = x[1:100], vind1 = TRUE),
foo <- bench::mark(
setup = {
x <- 1:4e6;
y <- as.complex(1:1e6)
},
collapse = collapse::setv(x, 1:100, x[1:100], vind1 = TRUE),
rcpp = rcpp_setvind_Complex(y, 1:100, y[1:100]),
min_iterations = 500,
check = FALSE
)
Rcpp::cppFunction(
"
void rcpp_setvind_Complex(ComplexVector x, IntegerVector ind, ComplexVector rp) {
R_xlen_t n = ind.length();
R_xlen_t n_rp = rp.length();
if(n_rp == n) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[ind[i]];
}
}
else if(n_rp == 1) {
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else stop(\"vector recycling not allowed\");
}
"
)
x <- as.complex(1:10)
rcpp_setvind_Complex(x, 0:1, NA)
x
x <- 1:4e6
y <- as.complex(1:1e6) # equal object.size() to x
y
x <- 1:4e6
y <- as.complex(1:1e6) # equal object.size() to x
foo <- bench::mark(
setup = {
x <- 1:4e6;
y <- as.complex(1:1e6)
},
collapse = collapse::setv(x, 1:100, x[1:100], vind1 = TRUE),
rcpp = rcpp_setvind_Complex(y, 1:100, y[1:100]),
min_iterations = 500,
check = FALSE
)
foo
ggplot2::autoplot(foo)
rtypes <- c("Logical", "Integer", "Numeric", "Character")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_RTYPE)]]
void rcpp_setrv_safe_RTYPE(RTYPEVector x, RTYPEVector v, RTYPEVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!RTYPEVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!RTYPEVector::is_na(x[i])) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_RTYPE)]]
void rcpp_setrv_fast_RTYPE(RTYPEVector x, RTYPEVector v, RTYPEVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_Complex)]]
void rcpp_setrv_safe_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_Complex)]]
void rcpp_setrv_fast_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_Complex)]]
void rcpp_setrv_safe_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_Complex)]]
void rcpp_setrv_fast_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] != v[0]) {
x[i] = rp[0];
}
}
}
}
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_safe_Complex)]]
void rcpp_setrv_safe_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!ComplexVector::is_na(x[i])) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setrv_fast_Complex)]]
void rcpp_setrv_fast_Complex(ComplexVector x, ComplexVector v, ComplexVector rp, bool invert) {
R_xlen_t n = x.length();
if(!invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(x[i] == v[0]) {
x[i] = rp[0];
}
}
}
if(invert) {
for(R_xlen_t i = 0; i < n; ++i) {
if(!(x[i] == v[0])) {
x[i] = rp[0];
}
}
}
}
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
fileConn <- file("src/dynamic_rcpp_setrv.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
