)
################################################################################
# MACRO ACTIONS ====
#
macro_sub2ind <- "
#define MACRO_SUB2IND do {  \\
pout[counter] = flatind;   \\
counter++;              \\
} while(0)
"
macro_setarray0 <- "
#define MACRO_SETARRAY0 do {  \\
x[flatind - 1] = rp[counter]; \\
counter++;  \\
} while(0)
"
macro_setarray1 <- "
#define MACRO_SETARRAY1 do {  \\
x[flatind - 1] = rp[0]; \\
} while(0)
"
macros_action <- stri_c(
macro_sub2ind, macro_setarray0, macro_setarray1, collapse = "\n\n"
)
Rcpp::sourceCpp(code = macros_action)
################################################################################
# Combine macros ====
#
macros <- stri_c(macro_dim_d, macro_dim_docall, macros_action, collapse = "\n\n\n")
readr::write_file(macros, "macros.txt")
testfun <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.test)]]
int test(int x, int y) {
return(x + y);
}
"
Rcpp::sourceCpp(code = stri_c(macros, testfun, collapse = "\n"))
header <- stri_c("
#ifndef SQUAREBRACKETS_H
#define SQUAREBRACKETS_H
",
macros,
"
#endif
"
)
cat(header)
Rcpp::sourceCpp(code = header)
readr::write_file(header, "header.txt")
setwd("..")
readr::write_file(header, "src/squarebrackets.h")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/skeletons")
macros <- readr::read_file("macros.txt")
header_for_sourcing <- stri_c(
"
#include <Rcpp.h>
using namespace Rcpp;
",
macros
)
Rcpp::sourceCpp(code = header_for_sourcing)
header_for_package <- "
#include <Rcpp.h>
#include \"squarebrackets.h\"
using namespace Rcpp;
"
sub2ind_32 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_d_32)]]
SEXP rcpp_sub2ind_d_32(
SEXP sub, SEXP dimcumprod, int n
) {
R_xlen_t counter = 0;
int temp = 0;
int *pout;
SEXP out = PROTECT(Rf_allocVector(INTSXP, n));
pout = INTEGER(out);
MACRO_DIM_DOCALL(MACRO_SUB2IND);
UNPROTECT(1);
return out;
}
"
rcpp_code <- stri_c(header_for_sourcing, sub2ind_32, collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(code = rcpp_code)
rcpp_code <- stri_c(header_for_package, sub2ind_32, collapse = "\n\n\n")
setwd("..")
fileConn <- file("src/dynamic_rcpp_sub2ind_d_32.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
sub2ind_64 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_d_64)]]
SEXP rcpp_sub2ind_d_64(
SEXP sub, SEXP dimcumprod, R_xlen_t n
) {
R_xlen_t counter = 0;
R_xlen_t temp = 0;
double *pout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, n));
pout = REAL(out);
MACRO_DIM_DOCALL(MACRO_SUB2IND);
UNPROTECT(1);
return out;
}
"
rcpp_code <- stri_c(header_for_sourcing, sub2ind_64, collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(code = rcpp_code)
rcpp_code <- stri_c(header_for_package, sub2ind_64, collapse = "\n\n\n")
setwd("..")
fileConn <- file("src/dynamic_rcpp_sub2ind_d_64.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
templatecode <- "
template<int RTYPE> void rcpp_set_array_DTYPEd_template(
Vector<RTYPE> x, SEXP sub, SEXP dimcumprod, Vector<RTYPE> rp
) {
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
MACRO_DIM_DOCALL(MACRO_SETARRAY0)
}
else if(rp.length() == 1) {
MACRO_DIM_DOCALL(MACRO_SETARRAY1)
}
else stop(\"recycling not allowed\");
}
"
templatecode <- "
template<int RTYPE> void rcpp_set_array_DTYPEd_template(
Vector<RTYPE> x, SEXP sub, SEXP dimcumprod, Vector<RTYPE> rp
) {
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
MACRO_DIM_DOCALL(MACRO_SETARRAY0)
}
else if(rp.length() == 1) {
MACRO_DIM_DOCALL(MACRO_SETARRAY1)
}
else stop(\"recycling not allowed\");
}
"
rcpp_code <- paste(c(header_for_sourcing, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
macros <- readr::read_file("macros.txt")
macros
header_for_sourcing <- stri_c(
"
#include <Rcpp.h>
using namespace Rcpp;
",
macros
)
Rcpp::sourceCpp(code = header_for_sourcing)
templatecode <- "
template<int RTYPE> void rcpp_set_array_DTYPEd_template(
Vector<RTYPE> x, SEXP sub, SEXP dimcumprod, Vector<RTYPE> rp
) {
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
MACRO_DIM_DOCALL(MACRO_SETARRAY0)
}
else if(rp.length() == 1) {
MACRO_DIM_DOCALL(MACRO_SETARRAY1)
}
else stop(\"recycling not allowed\");
}
"
rcpp_code <- paste(c(header_for_sourcing, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
header_for_sourcing
rcpp_code <- paste(c(header_for_sourcing, templatecode), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
templatecode <- "
template<int RTYPE> void rcpp_set_array_DTYPEd_template(
Vector<RTYPE> x, SEXP sub, SEXP dimcumprod, Vector<RTYPE> rp, R_xlen_t n
) {
if(rp.length() == n) {
R_xlen_t counter = 0;
MACRO_DIM_DOCALL(MACRO_SETARRAY0)
}
else if(rp.length() == 1) {
MACRO_DIM_DOCALL(MACRO_SETARRAY1)
}
else stop(\"recycling not allowed\");
}
"
rcpp_code <- paste(c(header_for_sourcing, templatecode), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
templatecode <- "
template<int RTYPE> void rcpp_set_array_DTYPEd_template(
Vector<RTYPE> x, SEXP sub, SEXP dimcumprod, Vector<RTYPE> rp, R_xlen_t n
) {
if(rp.length() == n) {
R_xlen_t counter = 0;
MACRO_DIM_DOCALL(MACRO_SETARRAY0);
}
else if(rp.length() == 1) {
MACRO_DIM_DOCALL(MACRO_SETARRAY1);
}
else stop(\"recycling not allowed\");
}
"
rcpp_code <- paste(c(header_for_sourcing, templatecode), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
switchpiece <- "
case TYPESXP:
{
rcpp_set_array_DTYPEd_template<TYPESXP>(as<RCPPTYPEVector>(x), sub, dimcumprod, as<RCPPTYPEVector>(rp), n);
break;
}
"
switches <- character(6L)
for(i in 1:6) {
switches[i] <- stringi::stri_replace_all_fixed(
switchpiece, c("TYPESXP", "RCPPTYPE"),  c(SXPTYPES[i], RCPPTYPES[i]),
vectorize_all = FALSE
)
}
switches <- stringi::stri_paste(switches, collapse = "\n")
cat(switches)
atomcode <- stri_paste("
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd_atomic)]]
void rcpp_set_array_DTYPEd_atomic(
SEXP x, SEXP sub, SEXP dimcumprod, const SEXP rp, R_xlen_t n
) {
switch(TYPEOF(x)){
",
switches,
"
}
}
"
)
cat(atomcode)
set_array <- stri_c(
templatecode,
atomcode,
collapse = "\n\n"
)
rcpp_code <- stri_c(header_for_sourcing, set_array, collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(code = rcpp_code)
templatecode <- "
template<int RTYPE> void rcpp_set_array_DTYPEd_template(
Vector<RTYPE> x, SEXP sub, SEXP dimcumprod, Vector<RTYPE> rp, R_xlen_t n
) {
if(rp.length() == n) {
R_xlen_t counter = 0;
MACRO_DIM_DOCALL(MACRO_SETARRAY0);
}
else if(rp.length() == 1) {
MACRO_DIM_DOCALL(MACRO_SETARRAY1);
}
else stop(\"recycling not allowed\");
}
"
rcpp_code <- paste(c(header_for_sourcing, templatecode), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
switchpiece <- "
case TYPESXP:
{
rcpp_set_array_DTYPEd_template<TYPESXP>(as<RCPPTYPEVector>(x), sub, dimcumprod, as<RCPPTYPEVector>(rp), n);
break;
}
"
switches <- character(6L)
for(i in 1:6) {
switches[i] <- stringi::stri_replace_all_fixed(
switchpiece, c("TYPESXP", "RCPPTYPE"),  c(SXPTYPES[i], RCPPTYPES[i]),
vectorize_all = FALSE
)
}
switches <- stringi::stri_paste(switches, collapse = "\n")
cat(switches)
atomcode <- stri_paste("
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd_atomic)]]
void rcpp_set_array_DTYPEd_atomic(
SEXP x, SEXP sub, SEXP dimcumprod, const SEXP rp, R_xlen_t n
) {
switch(TYPEOF(x)){
",
switches,
"
}
}
"
)
cat(atomcode)
set_array <- stri_c(
templatecode,
atomcode,
collapse = "\n\n"
)
rcpp_code <- stri_c(header_for_sourcing, set_array, collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(code = rcpp_code)
rcpp_code <- stri_c(header_for_package, set_array, collapse = "\n\n\n")
setwd("..")
fileConn <- file("src/rcpp_set_array.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/skeletons")
# set-up ====
library(stringi)
DTYPES <- seq(2, 16, 1)
# set-up ====
library(stringi)
SXPTYPES <- c("LGLSXP", "INTSXP", "REALSXP", "CPLXSXP", "STRSXP", "RAWSXP")
RCPPTYPES <- c("Logical", "Integer", "Numeric", "Complex", "Character", "Raw")
header <- "
#include <Rcpp.h>
using namespace Rcpp;
"
################################################################################
# MACRO dims dtype ====
#
make_sub <- sprintf("SEXP ind%d = VECTOR_ELT(sub, %d);\t\\", 1:16, 0:15)
setlengths <- paste("int len", 1:16, " = Rf_length(ind", 1:16, ");\t\\", sep= "")
make_pointers <- sprintf("const int *pind%d = INTEGER_RO(ind%d);\t\\", 1:16, 1:16)
all_lengths <- paste("len", 1:16, sep = "")
all_parts_decl <- sprintf("i_parts%d", 1:16)
fortext <- "for(int iter%d = 0; iter%d < len%d; ++iter%d) {\t\\
\ti_parts%d = pdim[%d] * (pind%d[iter%d] - 1);\t\\"
fortext1 <- "for(int iter1 = 0; iter1 < len1; ++iter1) {\t\\
\ti_parts1 = pind1[iter1];\t\\"
all_for <- c(
fortext1,
sprintf(fortext, 2:16, 2:16, 2:16, 2:16,
2:16, 0:14, 2:16, 2:16)
)
all_parts <- c(
sprintf("i_parts%d", 1:16)
)
templatecode <- "
#define MACRO_DIM_<dtype>(DOCODE) do {      \\
<make_sub>
<setlengths>
<make_pointers>
R_xlen_t <parts_decl>;  \\
double *pdim;              \\
pdim = REAL(dimcumprod); \\
R_xlen_t flatind = 0;           \\
\\
<startfor>
flatind = <main>;     \\
DOCODE;               \\
<endfor>
} while(0)
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
counter <- 1
for(i in DTYPES) {
current_make_sub <- stri_c(make_sub[1:i], collapse = "\n")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_makepointers <- stri_c(make_pointers[1:i], collapse = "\n")
current_parts_decl <- stri_c(all_parts_decl[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }\t\\", i), collapse = "\n")
current_fixed <- c(
"<dtype>",
"<make_sub>",
"<setlengths>",
"<make_pointers>",
"<parts_decl>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_make_sub,
current_setlengths,
current_makepointers,
current_parts_decl,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[counter]] <- out
counter <- counter + 1
}
macro_dim_d <- paste(rcpp_scripts, collapse = "\n\n\n")
cat(macro_dim_d)
Rcpp::sourceCpp(
code = paste(header, macro_dim_d, collapse = "\n\n\n") # no errors, good
)
################################################################################
# MACRO dims docall ====
#
# cases:
case <-
"case %d:                                       \\
{                                                 \\
MACRO_DIM_%d(DOCODE);                           \\
break;                                          \\
}                                                 \\
"
cases <- sprintf(case, DTYPES, DTYPES) |> stringi::stri_c(collapse = "")
cat(cases)
templatecode_docall <- "
#define MACRO_DIM_DOCALL(DOCODE) do {     \\
int ndims = Rf_length(sub);         \\
\\
switch(ndims) {       \\
<cases>       \\
}       \\
} while(0)
"
templatecode_docall2 <- stringi::stri_replace_all(
templatecode_docall,
fixed = c("<cases>"),
replacement = c(cases),
vectorize_all = FALSE
)
macro_dim_docall <- templatecode_docall2
cat(macro_dim_docall)
rcpp_code <- paste(c(header, macro_dim_d, macro_dim_docall), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
################################################################################
# MACRO ACTIONS ====
#
macro_sub2ind <- "
#define MACRO_SUB2IND do {  \\
pout[counter] = flatind;   \\
counter++;              \\
} while(0)
"
macro_setarray0 <- "
#define MACRO_SETARRAY0 do {  \\
x[flatind - 1] = rp[counter]; \\
counter++;  \\
} while(0)
"
macro_setarray1 <- "
#define MACRO_SETARRAY1 do {  \\
x[flatind - 1] = rp[0]; \\
} while(0)
"
macros_action <- stri_c(
macro_sub2ind, macro_setarray0, macro_setarray1, collapse = "\n\n"
)
Rcpp::sourceCpp(code = macros_action)
################################################################################
# Combine macros ====
#
macros <- stri_c(macro_dim_d, macro_dim_docall, macros_action, collapse = "\n\n\n")
readr::write_file(macros, "macros.txt")
testfun <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.test)]]
int test(int x, int y) {
return(x + y);
}
"
Rcpp::sourceCpp(code = stri_c(macros, testfun, collapse = "\n"))
header <- stri_c("
#ifndef SQUAREBRACKETS_H
#define SQUAREBRACKETS_H
",
macros,
"
#endif
"
)
cat(header)
Rcpp::sourceCpp(code = header)
readr::write_file(header, "header.txt")
setwd("..")
readr::write_file(header, "src/squarebrackets.h")
