int lenvec = x.ncol();
IntegerVector subset1(lenvec);
for(int j = 0; j != nvec; ++j) {
IntegerMatrix::Row row = x(j, _);
subset1 = x(j, _);
for(int i = 0; i != lenvec; ++i) {
row[i] = subset1[ind[i]];
}
}
}
"
)
foo <- bench::mark(
setup = {x <- matrix( as.integer(rev(seq_len(x.len))), ncol = x.dim[2])},
base = {x[collapse::seq_row(x) ,seq_along(ind)] <- x[collapse::seq_row(x), as.integer(ind)]},
rcpp = rcpp_colorder_int(x, ind-1L),
rcpp2 = rcpp_colorder_int2(x, ind-1L),
setapply = rcpp_setapply(x, \(x)x[ind]),
check = FALSE,
min_iterations = 10
)
foo <- bench::mark(
setup = {x <- matrix( as.integer(rev(seq_len(x.len))), ncol = x.dim[2])},
base = {x[collapse::seq_row(x) ,seq_along(ind)] <- x[collapse::seq_row(x), as.integer(ind)]},
rcpp = rcpp_colorder_int(x, ind-1L),
setapply = rcpp_setapply(x, \(x)x[ind]),
check = FALSE,
min_iterations = 10
)
foo
ggplot2::autoplot(foo)
x.dim <- c(2500, 2500)
x.len <- prod(x.dim)
x <- matrix( as.integer(rev(seq_len(x.len))), ncol = x.dim[2])
ind <- rev(seq_len(x.dim[2]))
foo <- bench::mark(
setup = {x <- matrix( as.integer(rev(seq_len(x.len))), ncol = x.dim[2])},
base = {x[1:nrow(x), seq_along(ind)] <- x[1:nrow(x), as.integer(ind)]},
rcpp = rcpp_colorder_int(x, ind-1L),
setapply = rcpp_setapply(x, \(x)x[ind]),
check = FALSE,
min_iterations = 10
)
foo
ggplot2::autoplot(foo)
foo <- bench::mark(
setup = {x <- matrix( as.integer(rev(seq_len(x.len))), ncol = x.dim[2])},
base = {x[1:nrow(x), seq_along(ind)] <- x[1:nrow(x), as.integer(ind)]},
rcpp = rcpp_colorder_int(x, ind-1L),
setapply = rcpp_setapply(x, \(x)x[ind]),
apply = apply(x, 1, sort),
check = FALSE,
min_iterations = 10
)
foo
ggplot2::autoplot(foo)
templatecode <- "
void rcpp_setapply_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
"
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
void rcpp_setapply_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE")
replacement = rtypes[i],
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
library(stringi)
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
void rcpp_setapply_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
fileConn <- file("src/dynamic_rcpp_setapply.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_RTYPE)]]
void rcpp_setapply_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
"
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_RTYPE)]]
void rcpp_setapply_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
fileConn <- file("src/dynamic_rcpp_setapply.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
library(stringi)
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_col_RTYPE)]]
void rcpp_setapply_col_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_row_RTYPE)]]
void rcpp_setapply_row_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.ncol();
int lenvec = x.row();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Column col = x(j, _);
subset1 = f(x(j, _));
col = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_col_RTYPE)]]
void rcpp_setapply_col_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_row_RTYPE)]]
void rcpp_setapply_row_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.ncol();
int lenvec = x.nrow();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Column col = x(j, _);
subset1 = f(x(j, _));
col = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_col_RTYPE)]]
void rcpp_setapply_col_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_row_RTYPE)]]
void rcpp_setapply_row_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.ncol();
int lenvec = x.nrow();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Col col = x(j, _);
subset1 = f(x(j, _));
col = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_col_RTYPE)]]
void rcpp_setapply_col_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_row_RTYPE)]]
void rcpp_setapply_row_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.ncol();
int lenvec = x.nrow();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Column col = x(_, j);
subset1 = f(x(_, j));
col = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_setapply.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
getwd()
Rcpp::cppFunction(
"
void rcpp_setapply(IntegerMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
IntegerVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
IntegerMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
"
)
x <- matrix(as.integer(rev(1:25)), ncol = 5)
x
ind <- as.integer(5:1)
rcpp_setapply(x, \(x)x[ind])
x
all(x == matrix(as.integer(rev(1:25)), ncol = 5)[, ind]) # should be TRUE
setapply(x, as.character)
rcpp_setapply(x, as.character)
rcpp_setapply(x, \(x)"a")
rcpp_setapply(x, \(x)1:2)
x
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_col_RTYPE)]]
void rcpp_setapply_col_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_row_RTYPE)]]
void rcpp_setapply_row_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.ncol();
int lenvec = x.nrow();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Column col = x(_, j);
subset1 = f(x(_, j));
col = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_setapply.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
getwd()
rtypes <- c("Logical", "Integer", "Numeric", "Character", "Complex")
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_col_RTYPE)]]
void rcpp_setapply_col_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.nrow();
int lenvec = x.ncol();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Row row = x(j, _);
subset1 = f(x(j, _));
row = subset1;
}
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_setapply_row_RTYPE)]]
void rcpp_setapply_row_RTYPE(RTYPEMatrix x, Function f) {
int nvec = x.ncol();
int lenvec = x.nrow();
RTYPEVector subset1(lenvec);
for(int j = 0; j < nvec; ++j) {
RTYPEMatrix::Column col = x(_, j);
subset1 = f(x(_, j));
col = subset1;
}
}
"
rcpp_scripts <- character(length(rtypes))
for(i in seq_along(rtypes)) {
rcpp_scripts[i] <- stri_replace_all(
templatecode,
fixed = "RTYPE",
replacement = rtypes[i],
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_setapply.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
getwd()
