RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode1 <- "
template <int RTYPE>
void rcpp_template_set_array_DTYPEd(
Vector<RTYPE> x, <args>, SEXP dimcumprod, Vector<RTYPE> rp
){
<setlengths>
<make_pointers>
double *pdim;
pdim = REAL(dimcumprod);
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd)]]
void rcpp_set_array_DTYPEd(SEXP xin ){
RCPP_RETURN_VECTOR(first_two_impl, xin) ;
}
"
rcpp_scripts1 <- character(length(DTYPES))
counter <- 1
rcpp_scripts1 <- character(length(DTYPES))
counter <- 1
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_makepointers <- stri_c(make_pointers[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
DTYES <- 2:8
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode1 <- "
template <int RTYPE>
void rcpp_template_set_array_DTYPEd(
Vector<RTYPE> x, <args>, SEXP dimcumprod, Vector<RTYPE> rp
){
<setlengths>
<make_pointers>
double *pdim;
pdim = REAL(dimcumprod);
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd)]]
void rcpp_set_array_DTYPEd(SEXP xin ){
RCPP_RETURN_VECTOR(first_two_impl, xin) ;
}
"
rcpp_scripts1 <- character(length(DTYPES))
counter <- 1
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_makepointers <- stri_c(make_pointers[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_2d_8d_RTYPE)]]
void rcpp_set_array_2d_8d_RTYPE(
RTYPEVector x, List out, NumericVector dimcumprod, RTYPEVector rp
) {
int n = out.length();
IntegerVector ind1 = out[0];
IntegerVector ind2 = out[1];
IntegerVector ind3;
IntegerVector ind4;
IntegerVector ind5;
IntegerVector ind6;
IntegerVector ind7;
IntegerVector ind8;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
if(n > 6) {
ind7 = out[6];
if(n > 7) {
ind8 = out[7];
}
}
}
}
}
}
switch(n) {
case 2:
rcpp_set_array_2d_RTYPE(
x,
<args2>,
dimcumprod,
rp
);
break;
case 3:
rcpp_set_array_3d_RTYPE(
x,
<args3>,
dimcumprod,
rp
);
break;
case 4:
rcpp_set_array_4d_RTYPE(
x,
<args4>,
dimcumprod,
rp
);
break;
case 5:
rcpp_set_array_5d_RTYPE(
x,
<args5>,
dimcumprod,
rp
);
break;
case 6:
rcpp_set_array_6d_RTYPE(
x,
<args6>,
dimcumprod,
rp
);
break;
case 7:
rcpp_set_array_7d_RTYPE(
x,
<args7>,
dimcumprod,
rp
);
break;
case 8:
rcpp_set_array_8d_RTYPE(
x,
<args8>,
dimcumprod,
rp
);
break;
}
}
"
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts1), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
DTYES <- 2:8
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode1 <- "
template <int RTYPE>
void rcpp_template_set_array_DTYPEd(
Vector<RTYPE> x, <args>, SEXP dimcumprod, Vector<RTYPE> rp
){
<setlengths>
<make_pointers>
double *pdim;
pdim = REAL(dimcumprod);
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd)]]
void rcpp_set_array_DTYPEd(SEXP x, <args>, SEXP dimcumprod, SEXP rp){
RCPP_RETURN_VECTOR(rcpp_template_set_array_DTYPEd, x, <args>, dimcumprod, rp) ;
}
"
rcpp_scripts1 <- character(length(DTYPES))
counter <- 1
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_makepointers <- stri_c(make_pointers[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
rcpp_code <- paste(c(headers, rcpp_scripts1), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
DTYES <- 2:8
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
input <- stri_c("ind", 1:16)
templatecode1 <- "
template <int RTYPE>
void rcpp_template_set_array_DTYPEd(
Vector<RTYPE> x, <args>, SEXP dimcumprod, Vector<RTYPE> rp
){
<setlengths>
<make_pointers>
double *pdim;
pdim = REAL(dimcumprod);
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd)]]
void rcpp_set_array_DTYPEd(SEXP x, <args>, SEXP dimcumprod, SEXP rp){
RCPP_RETURN_VECTOR(rcpp_template_set_array_DTYPEd, x, <input>, dimcumprod, rp) ;
}
"
rcpp_scripts1 <- character(length(DTYPES))
counter <- 1
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_makepointers <- stri_c(make_pointers[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<input>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
all_input <- stri_c("ind", 1:16)
DTYES <- 2:8
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
all_input <- stri_c("ind", 1:16)
templatecode1 <- "
template <int RTYPE>
void rcpp_template_set_array_DTYPEd(
Vector<RTYPE> x, <args>, SEXP dimcumprod, Vector<RTYPE> rp
){
<setlengths>
<make_pointers>
double *pdim;
pdim = REAL(dimcumprod);
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd)]]
void rcpp_set_array_DTYPEd(SEXP x, <args>, SEXP dimcumprod, SEXP rp){
RCPP_RETURN_VECTOR(rcpp_template_set_array_DTYPEd, x, <input>, dimcumprod, rp) ;
}
"
rcpp_scripts1 <- character(length(DTYPES))
counter <- 1
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_input <- stri_c(all_input[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_makepointers <- stri_c(make_pointers[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<input>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_input,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode1,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
rcpp_code <- paste(c(headers, rcpp_scripts1), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
options(max.print = 1e6)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
options(max.print = 1e8)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
foo <- Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
foo
foo <- Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
foo
