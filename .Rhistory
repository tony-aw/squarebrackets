rcpp_set_array_5d_atomic(
x,
<args5>,
dimcumprod,
rp
);
break;
case 6:
rcpp_set_array_6d_atomic(
x,
<args6>,
dimcumprod,
rp
);
break;
case 7:
rcpp_set_array_7d_atomic(
x,
<args7>,
dimcumprod,
rp
);
break;
case 8:
rcpp_set_array_8d_atomic(
x,
<args8>,
dimcumprod,
rp
);
break;
}
}
"
args <- sprintf("ind%d", 1:8)
rp <- sapply(2:8, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:8),
rp,
vectorize_all = FALSE
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(header, rcpp_scripts1, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_set_array_d.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
################################################################################
# rcpp_set_array_d ====
DTYPES <- c(2:8, 16)
all_inputs <- stri_c("ind", 1:16)
switchpiece <- "
case TYPESXP:
{
rcpp_set_array_DTYPEd_template<TYPESXP>(as<RCPPTYPEVector>(x), <inputs>, dimcumprod, as<RCPPTYPEVector>(rp));
break;
}
"
switches <- character(6L)
for(i in 1:6) {
switches[i] <- stringi::stri_replace_all_fixed(
switchpiece, c("TYPESXP", "RCPPTYPE"),  c(SXPTYPES[i], RCPPTYPES[i]),
vectorize_all = FALSE
)
}
switches <- stringi::stri_paste(switches, collapse = "\n")
cat(switches)
atomcode <- stri_paste("
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_DTYPEd_atomic)]]
void rcpp_set_array_DTYPEd_atomic(
SEXP x, <args>, SEXP dimcumprod, const SEXP rp
) {
switch(TYPEOF(x)){
",
switches,
"
}
}
"
)
cat(atomcode)
templatecode <- "
template<int RTYPE> void rcpp_set_array_DTYPEd_template(
Vector<RTYPE> x, <args>, SEXP dimcumprod, Vector<RTYPE> rp
) {
<setlengths>
<make_pointers>
double *pdim;
pdim = REAL(dimcumprod);
R_xlen_t flatind = 0;
if(rp.length() == (<setlength_mult>)) {
R_xlen_t counter = 0;
<startfor>
flatind = <main>;
x[flatind - 1] = rp[counter];
counter++;
<endfor>
}
else if(rp.length() == 1) {
<startfor>
flatind = <main>;
x[flatind - 1] = rp[0];
<endfor>
}
else stop(\"recycling not allowed\");
}
"
rcpp_scripts1 <- character(length(DTYPES))
counter <- 1
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_inputs <- stri_c(all_inputs[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_makepointers <- stri_c(make_pointers[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<inputs>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_inputs,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
stri_paste(templatecode, atomcode),
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts1[[counter]] <- out
counter <- counter + 1
}
rcpp_scripts1 <- stri_paste(rcpp_scripts1, collapse = "\n\n\n")
cat(rcpp_scripts1)
Rcpp::sourceCpp(
code = stri_paste(header, rcpp_scripts1, collapse = "\n\n") # no errors, good
)
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_array_2d_8d_atomic)]]
void rcpp_set_array_2d_8d_atomic(
SEXP x, List out, NumericVector dimcumprod, SEXP rp
) {
int n = out.length();
SEXP ind1 = out[0];
SEXP ind2 = out[1];
SEXP ind3;
SEXP ind4;
SEXP ind5;
SEXP ind6;
SEXP ind7;
SEXP ind8;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
if(n > 6) {
ind7 = out[6];
if(n > 7) {
ind8 = out[7];
}
}
}
}
}
}
switch(n) {
case 2:
rcpp_set_array_2d_atomic(
x,
<args2>,
dimcumprod,
rp
);
break;
case 3:
rcpp_set_array_3d_atomic(
x,
<args3>,
dimcumprod,
rp
);
break;
case 4:
rcpp_set_array_4d_atomic(
x,
<args4>,
dimcumprod,
rp
);
break;
case 5:
rcpp_set_array_5d_atomic(
x,
<args5>,
dimcumprod,
rp
);
break;
case 6:
rcpp_set_array_6d_atomic(
x,
<args6>,
dimcumprod,
rp
);
break;
case 7:
rcpp_set_array_7d_atomic(
x,
<args7>,
dimcumprod,
rp
);
break;
case 8:
rcpp_set_array_8d_atomic(
x,
<args8>,
dimcumprod,
rp
);
break;
}
}
"
args <- sprintf("ind%d", 1:8)
rp <- sapply(2:8, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:8),
rp,
vectorize_all = FALSE
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(header, rcpp_scripts1, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_set_array_d.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
# set-up ====
library(stringi)
################################################################################
# C_sub2ind_16d_32 ====
all_args <- stri_c("const SEXP ind", 1:16)
getelements <- stri_c("SEXP ind", 1:16, " = VECTOR_ELT(sub, ", 0:15, ");")
setlengths <- paste("int len", 1:16, " = Rf_length(ind", 1:16, ");", sep= "")
make_pointers <- sprintf("const int *restrict pind%d;\npind%d = INTEGER(ind%d);\n", 1:16, 1:16, 1:16)
all_lengths <- paste("len", 1:16, sep = "")
all_for <- rev(
sprintf("\t for(int iter%d = 0; iter%d < len%d; ++iter%d) {\n", 16:1, 16:1, 16:1, 16:1)
)
all_parts <- c(
"pind1[iter1]",
sprintf("pdim[%d] * (pind%d[iter%d] - 1)", 0:14, 2:16, 2:16)
)
templatecode <- "
#include <R.h>
#include <Rdefines.h>
#include <R_ext/Error.h>
SEXP C_sub2ind_16d_32(
SEXP sub, SEXP dimcumprod
) {
<get_elements>
<setlengths>
<make_pointers>
R_xlen_t counter = 0;
int temp = 0;
const int *pdim;
pdim = INTEGER(dimcumprod);
int *pout;
SEXP out = PROTECT(Rf_allocVector(INTSXP, <setlength_mult>));
pout = INTEGER(out);
<startfor>
temp = <main>;
pout[counter] = temp;
counter++;
<endfor>
UNPROTECT(1);
return out;
}
"
i = 16
current_args <- stri_c(all_args, collapse = ", ")
current_get_elements <- stri_c(getelements, collapse = "\n")
current_setlengths <- stri_c(setlengths, collapse = "\n")
current_makepointers <- stri_c(make_pointers, collapse = "\n")
current_setlength_mult <- stri_c(all_lengths, collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts, collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"<args>",
"<get_elements>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
current_args,
current_get_elements,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
cat(out)
Rcpp::cppFunction(code = out)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
# set-up ====
library(stringi)
################################################################################
# C_sub2ind_16d_32 ====
all_args <- stri_c("const SEXP ind", 1:16)
getelements <- stri_c("SEXP ind", 1:16, " = VECTOR_ELT(sub, ", 0:15, ");")
setlengths <- paste("int len", 1:16, " = Rf_length(ind", 1:16, ");", sep= "")
make_pointers <- sprintf("const int *pind%d;\npind%d = INTEGER_RO(ind%d);\n", 1:16, 1:16, 1:16)
all_lengths <- paste("len", 1:16, sep = "")
all_for <- rev(
sprintf("\t for(int iter%d = 0; iter%d < len%d; ++iter%d) {\n", 16:1, 16:1, 16:1, 16:1)
)
all_parts <- c(
"pind1[iter1]",
sprintf("pdim[%d] * (pind%d[iter%d] - 1)", 0:14, 2:16, 2:16)
)
templatecode <- "
#include <R.h>
#include <Rdefines.h>
#include <R_ext/Error.h>
SEXP C_sub2ind_16d_32(
SEXP sub, SEXP dimcumprod
) {
<get_elements>
<setlengths>
<make_pointers>
R_xlen_t counter = 0;
int temp = 0;
const int *pdim;
pdim = INTEGER(dimcumprod);
int *pout;
SEXP out = PROTECT(Rf_allocVector(INTSXP, <setlength_mult>));
pout = INTEGER(out);
<startfor>
temp = <main>;
pout[counter] = temp;
counter++;
<endfor>
UNPROTECT(1);
return out;
}
"
i = 16
current_args <- stri_c(all_args, collapse = ", ")
current_get_elements <- stri_c(getelements, collapse = "\n")
current_setlengths <- stri_c(setlengths, collapse = "\n")
current_makepointers <- stri_c(make_pointers, collapse = "\n")
current_setlength_mult <- stri_c(all_lengths, collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts, collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"<args>",
"<get_elements>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
current_args,
current_get_elements,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
cat(out)
Rcpp::cppFunction(code = out)
fileConn <- file("src/C_sub2ind_16d_32.c")
writeLines(out, fileConn)
close(fileConn)
################################################################################
# C_sub2ind_16d_64 ====
templatecode <- "
#include <R.h>
#include <Rdefines.h>
#include <R_ext/Error.h>
SEXP C_sub2ind_16d_64(
SEXP sub, SEXP dimcumprod
) {
<get_elements>
<setlengths>
<make_pointers>
R_xlen_t counter = 0;
double temp = 0;
const double *pdim;
pdim = REAL(dimcumprod);
double *pout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, <setlength_mult>));
pout = REAL(out);
<startfor>
temp = <main>;
pout[counter] = temp;
counter++;
<endfor>
UNPROTECT(1);
return out;
}
"
i = 16
current_args <- stri_c(all_args, collapse = ", ")
current_get_elements <- stri_c(getelements, collapse = "\n")
current_setlengths <- stri_c(setlengths, collapse = "\n")
current_makepointers <- stri_c(make_pointers, collapse = "\n")
current_setlength_mult <- stri_c(all_lengths, collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts, collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"<args>",
"<get_elements>",
"<setlengths>",
"<make_pointers>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
current_args,
current_get_elements,
current_setlengths,
current_makepointers,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
cat(out)
Rcpp::cppFunction(code = out)
fileConn <- file("src/C_sub2ind_16d_64.c")
writeLines(out, fileConn)
close(fileConn)
