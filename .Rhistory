<args2>,
dimcumprod,
rp
);
break;
case 3:
rcpp_extract_array_3d_atomic(
x,
<args3>,
dimcumprod,
rp
);
break;
case 4:
rcpp_extract_array_4d_atomic(
x,
<args4>,
dimcumprod,
rp
);
break;
case 5:
rcpp_extract_array_5d_atomic(
x,
<args5>,
dimcumprod,
rp
);
break;
case 6:
rcpp_extract_array_6d_atomic(
x,
<args6>,
dimcumprod,
rp
);
break;
case 7:
rcpp_extract_array_7d_atomic(
x,
<args7>,
dimcumprod,
rp
);
break;
case 8:
rcpp_extract_array_8d_atomic(
x,
<args8>,
dimcumprod,
rp
);
break;
}
}
"
args <- sprintf("ind%d", 1:8)
rp <- sapply(2:8, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:8),
rp,
vectorize_all = FALSE
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(header, rcpp_scripts1, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_extract_array_2d_8d_atomic)]]
SEXP rcpp_extract_array_2d_8d_atomic(
SEXP x, List out, NumericVector dimcumprod, SEXP rp
) {
int n = out.length();
IntegerVector ind1 = out[0];
IntegerVector ind2 = out[1];
IntegerVector ind3;
IntegerVector ind4;
IntegerVector ind5;
IntegerVector ind6;
IntegerVector ind7;
IntegerVector ind8;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
if(n > 6) {
ind7 = out[6];
if(n > 7) {
ind8 = out[7];
}
}
}
}
}
}
switch(n) {
case 2:
return rcpp_extract_array_2d_atomic(
x,
<args2>,
dimcumprod,
rp
);
break;
case 3:
return rcpp_extract_array_3d_atomic(
x,
<args3>,
dimcumprod,
rp
);
break;
case 4:
return rcpp_extract_array_4d_atomic(
x,
<args4>,
dimcumprod,
rp
);
break;
case 5:
return rcpp_extract_array_5d_atomic(
x,
<args5>,
dimcumprod,
rp
);
break;
case 6:
return rcpp_extract_array_6d_atomic(
x,
<args6>,
dimcumprod,
rp
);
break;
case 7:
return rcpp_extract_array_7d_atomic(
x,
<args7>,
dimcumprod,
rp
);
break;
case 8:
return rcpp_extract_array_8d_atomic(
x,
<args8>,
dimcumprod,
rp
);
break;
}
}
"
args <- sprintf("ind%d", 1:8)
rp <- sapply(2:8, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:8),
rp,
vectorize_all = FALSE
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(header, rcpp_scripts1, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_extract_array_2d_8d_atomic)]]
SEXP rcpp_extract_array_2d_8d_atomic(
SEXP x, List out, NumericVector dimcumprod, SEXP rp
) {
int n = out.length();
IntegerVector ind1 = out[0];
IntegerVector ind2 = out[1];
IntegerVector ind3;
IntegerVector ind4;
IntegerVector ind5;
IntegerVector ind6;
IntegerVector ind7;
IntegerVector ind8;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
if(n > 6) {
ind7 = out[6];
if(n > 7) {
ind8 = out[7];
}
}
}
}
}
}
switch(n) {
case 2:
return rcpp_extract_array_2d_atomic(
x,
<args2>,
dimcumprod
);
break;
case 3:
return rcpp_extract_array_3d_atomic(
x,
<args3>,
dimcumprod
);
break;
case 4:
return rcpp_extract_array_4d_atomic(
x,
<args4>,
dimcumprod
);
break;
case 5:
return rcpp_extract_array_5d_atomic(
x,
<args5>,
dimcumprod
);
break;
case 6:
return rcpp_extract_array_6d_atomic(
x,
<args6>,
dimcumprod
);
break;
case 7:
return rcpp_extract_array_7d_atomic(
x,
<args7>,
dimcumprod
);
break;
case 8:
return rcpp_extract_array_8d_atomic(
x,
<args8>,
dimcumprod
);
break;
}
}
"
args <- sprintf("ind%d", 1:8)
rp <- sapply(2:8, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:8),
rp,
vectorize_all = FALSE
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(header, rcpp_scripts1, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
# abind vs R.tuils vs do.call ===
n <- 100
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:99
sel.cols <- 1:99
lst <- n(sel.rows, sel.cols)
library(squarebrackets)
tinycodet::import_as(~gg., "ggplot2")
# abind vs R.tuils vs do.call ===
n <- 100
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:99
sel.cols <- 1:99
lst <- n(sel.rows, sel.cols)
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:100) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:100) do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = for(i in 1:100) .rcpp_extract_array_2d_8d_atomic(x, lst, cumprod(dim(x.mat))),
min_iterations = 500
)
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:100) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:100) do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = for(i in 1:100) .rcpp_extract_array_2d_8d_atomic(x.mat, lst, cumprod(dim(x.mat))),
min_iterations = 500
)
templatecode2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_extract_array_2d_8d_atomic)]]
SEXP rcpp_extract_array_2d_8d_atomic(
SEXP x, List out, NumericVector dimcumprod
) {
int n = out.length();
IntegerVector ind1 = out[0];
IntegerVector ind2 = out[1];
IntegerVector ind3;
IntegerVector ind4;
IntegerVector ind5;
IntegerVector ind6;
IntegerVector ind7;
IntegerVector ind8;
if(n > 2) {
ind3 = out[2];
if(n > 3) {
ind4 = out[3];
if(n > 4) {
ind5 = out[4];
if(n > 5) {
ind6 = out[5];
if(n > 6) {
ind7 = out[6];
if(n > 7) {
ind8 = out[7];
}
}
}
}
}
}
switch(n) {
case 2:
return rcpp_extract_array_2d_atomic(
x,
<args2>,
dimcumprod
);
break;
case 3:
return rcpp_extract_array_3d_atomic(
x,
<args3>,
dimcumprod
);
break;
case 4:
return rcpp_extract_array_4d_atomic(
x,
<args4>,
dimcumprod
);
break;
case 5:
return rcpp_extract_array_5d_atomic(
x,
<args5>,
dimcumprod
);
break;
case 6:
return rcpp_extract_array_6d_atomic(
x,
<args6>,
dimcumprod
);
break;
case 7:
return rcpp_extract_array_7d_atomic(
x,
<args7>,
dimcumprod
);
break;
case 8:
return rcpp_extract_array_8d_atomic(
x,
<args8>,
dimcumprod
);
break;
}
}
"
args <- sprintf("ind%d", 1:8)
rp <- sapply(2:8, \(i) stri_c(args[1:i], collapse = ", "))
templatecode2 <- stri_replace_all_fixed(
templatecode2,
sprintf("<args%d>", 2:8),
rp,
vectorize_all = FALSE
)
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(header, rcpp_scripts1, templatecode2), sep = "", collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
# abind vs R.tuils vs do.call ===
n <- 100
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:99
sel.cols <- 1:99
lst <- n(sel.rows, sel.cols)
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:100) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:100) do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = for(i in 1:100) .rcpp_extract_array_2d_8d_atomic(x.mat, lst, cumprod(dim(x.mat))),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# abind vs R.tuils vs do.call ===
n <- 100
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:99
sel.cols <- 1:99
lst <- n(sel.rows, sel.cols)
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:500) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:500) do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = for(i in 1:500) .rcpp_extract_array_2d_8d_atomic(x.mat, lst, cumprod(dim(x.mat))),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# abind vs R.tuils vs do.call ===
n <- 3162
x.mat <- matrix(seq_len(n*n), ncol = n)
# abind vs R.tuils vs do.call ===
n <- 3162
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:1000
sel.cols <- 1:1000
lst <- n(sel.rows, sel.cols)
bm.sb_x.matrix <- bench::mark(
"[]" = x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = .rcpp_extract_array_2d_8d_atomic(x.mat, lst, cumprod(dim(x.mat))),
min_iterations = 500
)
bm.sb_x.matrix <- bench::mark(
"[]" = x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = .rcpp_extract_array_2d_8d_atomic(x.mat, lst, cumprod(dim(x.mat))),
check = FALSE
min_iterations = 500
bm.sb_x.matrix <- bench::mark(
"[]" = x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = .rcpp_extract_array_2d_8d_atomic(x.mat, lst, cumprod(dim(x.mat))),
check = FALSE,
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
n <- 100
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:99
sel.cols <- 1:99
lst <- n(sel.rows, sel.cols)
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:500) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:500) do.call(\(...)x.mat[..., drop = FALSE], lst),
"rcpp" = for(i in 1:500) .rcpp_extract_array_2d_8d_atomic(x.mat, lst, cumprod(dim(x.mat))),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
install.packages("quarto")
?squarebrackets::`squarebrackets-package`
DTYPES <- 2:16
all_args <- stri_c("const SEXP ind", 1:16)
setlengths <- paste("int len", 1:16, " = Rf_length(ind", 1:16, ");", sep= "")
make_pointers <- sprintf("const int *pind%d;\npind%d = INTEGER(ind%d);\n", 1:16, 1:16, 1:16)
library(stringi)
header <- "
#include <Rcpp.h>
using namespace Rcpp;
"
DTYPES <- 2:16
all_args <- stri_c("const SEXP ind", 1:16)
setlengths <- paste("int len", 1:16, " = Rf_length(ind", 1:16, ");", sep= "")
make_pointers <- sprintf("const int *pind%d;\npind%d = INTEGER(ind%d);\n", 1:16, 1:16, 1:16)
all_lengths <- paste("len", 1:16, sep = "")
all_for <- rev(
sprintf("\t for(int iter%d = 0; iter%d < len%d; ++iter%d) {\n", 16:1, 16:1, 16:1, 16:1)
)
all_parts <- c(
"pind1[iter1]",
sprintf("pdim[%d] * (pind%d[iter%d] - 1)", 0:14, 2:16, 2:16)
)
