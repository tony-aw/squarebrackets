% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setapply.R
\name{setapply}
\alias{setapply}
\title{Apply Functions Over mutable_atomic Matrix Margins By Reference}
\usage{
setapply(x, MARGIN, FUN)
}
\arguments{
\item{x}{a \link{mutable_atomic} matrix. Arrays are not supported.}

\item{MARGIN}{a single integer scalar, giving the subscript to apply the function over. \cr
\code{1} indicates rows, \code{2} indicates columns. \cr}

\item{FUN}{the function to be applied. \cr
The function must return a vector of the same type of \code{x},
and the appropriate length
(i.e. length \code{ncol(x)} when \code{MARGIN == 1} or length \code{nrow(x)} when \code{MARGIN == 2}). \cr \cr}
}
\value{
Returns: VOID. This function modifies the object by reference. \cr
Do NOT use assignment like \code{x <- setapply(x, ...)}. \cr
Since this function returns void, you'll just get \code{NULL}. \cr \cr
}
\description{
The \code{setapply()} function
applies a functions over the rows or columns of a
\link{mutable_atomic} matrix,
through \link[=squarebrackets_PassByReference]{pass-by-reference semantics}. \cr
\cr
For every iteration, a copy of only a single row or column
(depending on the margin)
is made,
the function is applied on the copy,
and the original row/column is replaced by the modified copy through
\link[=squarebrackets_PassByReference]{pass-by-reference semantics}. \cr
\cr
The \code{setapply()} is a bit faster and uses less memory than \link[base]{apply}. \cr \cr
}
\examples{

# re-order elements matrix by reference ====
x <- mutable_atomic(1:20, dim = c(5,4))
print(x)
setapply(x, 1, FUN = \(x)x[c(4,1,3,2)])
print(x)


# sort elements of matrix by reference ====
x <- mutable_atomic(20:1, dim = c(5,4))
print(x)
setapply(x, 2, FUN = sort)
print(x)
}
