% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa4_squarebrackets_options.R
\name{aaa4_squarebrackets_options}
\alias{aaa4_squarebrackets_options}
\alias{squarebrackets_options}
\title{squarebrackets Options}
\description{
This help page explains the various global options that can be set for the 'squarebrackets' package,
and how it affects the functionality. \cr \cr
}
\section{Check Duplicates}{

\ifelse{html}{\figure{argument-chkdup-blue.svg}{options: alt='[argument: chkdup]'}}{\link[=squarebrackets_options]{argument: chkdup}} \cr
\ifelse{html}{\figure{option-squarebrackets_dot_chkdup-blue.svg}{options: alt='[option: squarebrackets.chkdup]'}}{\link[=squarebrackets_options]{option: squarebrackets.chkdup}} \cr
The \link{sb_x} method is the only method where providing duplicate indices actually make sense. \cr
For the other methods, it doesn't make sense. \cr
Giving duplicate indices usually won't break anything;
however, when replacing/transforming or removing subsets,
it is almost certainly not the intention to provide duplicate indices. \cr
Providing duplicate indices anyway might lead to unexpected results. \cr
Therefore, for the methods where giving duplicate indices does not make sense,
the \code{chkdup} argument is present. \cr
This argument controls whether the method in question checks for duplicates (\code{TRUE}) or not (\code{FALSE}). \cr
\cr
Setting \code{chkdup = TRUE} means the method in question will check for duplicate indices,
and give an error when it finds them. \cr
\cr
Setting \code{chkdup = FALSE} will disable these checks,
which saves time and computation power, and is thus more efficient. \cr
\cr
Since checking for duplicates can be expensive, it is set to \code{FALSE} by default. \cr
The default can be changed in the \code{squarebrackets.chkdup} option. \cr \cr
}

\section{Retain Attributes}{

\ifelse{html}{\figure{argument-rat-blue.svg}{options: alt='[argument: rat]'}}{\link[=squarebrackets_options]{argument: rat}} \cr
\ifelse{html}{\figure{option-squarebrackets_dot_rat-blue.svg}{options: alt='[option: squarebrackets.rat]'}}{\link[=squarebrackets_options]{option: squarebrackets.rat}} \cr
Like the \code{[} - methods,
\link{sb_x} and \link{sb_rm} will by default
strip most (but not all) attributes. \cr
The \link{sb_x} and \link{sb_rm} methods
in 'squarebrackets' have the \code{rat} argument,
to control this control the attribute stripping behaviour. \cr
If \code{rat = FALSE}, this default behaviour is preserved,
for compatibility with special classes. This is the fastest option. \cr
If \code{rat = TRUE},
attributes from \code{x} missing after sub-setting are re-assigned to \code{x}.
Already existing attributes after sub-setting will not be overwritten. \cr
There is no \code{rat} argument for data.frame-like object:
their attributes will always be preserved. \cr
NOTE: In the following situations, the \code{rat} argument will be ignored,
as the attributes necessarily have to be dropped:
\itemize{
\item when \code{x} is a list, AND \code{drop = TRUE},
AND a single element is selected,
AND sub-setting is done through the \code{i} argument.
\item when \code{x} is an atomic matrix or array,
and sub-setting is done through the \code{i} argument. \cr
}

The default value for the \code{rat} argument can be changed in the \code{squarebrackets.rat} option. \cr \cr
}

\section{Mutable Atomic Messages}{

\ifelse{html}{\figure{option-squarebrackets_dot_ma_messages-blue.svg}{options: alt='[option: squarebrackets.ma_messages]'}}{\link[=squarebrackets_options]{option: squarebrackets.ma_messages}} \cr
The \verb{[<-.mutable_atomic} method notifies the user of copy-on-modification. \cr
Should the user find this annoying,
the user can disable these messages
by setting \code{squarebrackets.ma_messages} to \code{FALSE}. \cr \cr
}

\section{squarebrackets.protected}{

The user should NEVER touch the \code{squarebrackets.protected} option. \cr
This option lists all locked non-functions in the base environment,
in order to protect them from any accidental pass-by-reference modification
by the methods/functions from 'squarebrackets'. \cr
Other packages that provide pass-by-reference modification,
such as the 'collapse' package,
generally do not provide such protections,
and are not blocked by \code{squarebrackets.protected}. \cr \cr
}

