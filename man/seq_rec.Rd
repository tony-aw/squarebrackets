% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/seq_rec.R
\name{seq_rec}
\alias{seq_rec}
\title{Recursive Sequence Generator}
\usage{
seq_rec(inits = c(0, 1), n = 10L, f = sum)
}
\arguments{
\item{inits}{a numeric (double or integer) vector giving the initial values. \cr
Any numbers are allowed, even negative and/or fractional numbers. \cr
Note that numbers given must give valid results when passed to function \code{f()}. \cr
IMPORTANT: The length of \code{inits} determines the window size \code{w}. \cr
For a regular Fibonacci, \code{inits = 0:1},
which of course means a window size of \code{w = 2}. \cr}

\item{n}{a single integer,
giving the size of the numeric vector to generate. \cr
NOTE: it must hold that \code{n} is larger than or equal to the window size \code{w}. \cr
The window size is equal to \code{w = length(inits)}.}

\item{f}{the function to be used on the last \code{w} numbers
to generate the next number of the sequence at each iteration. \cr
This must be a function that takes as input a numeric vector,
and returns a single numeric value. \cr
For a regular Fibonacci sequence, this would be either: \cr
\code{f = sum}, \cr
or (since window size is 2) \code{f = \(x) x[2] + x[1]} \cr}
}
\value{
A sequence of numbers.
}
\description{
This is a recursive sequence generator.
The function is essentially a highly generalized version of a Fibonacci sequence generator.
One can change the initial values, the window size,
and even the window function used. \cr
This function assumes only the following about the sequence being generated:
\itemize{
\item The sequence consists of real numbers (i.e. class \code{integer} or class \code{double}).
\item The window size is the same for all iterations.
\item The window function is the same for all iterations.
\item The sequence grows until a vector of length \code{n} is achieved.
}
}
\details{
The default values of the arguments give the first 10 numbers
of a regular Fibonacci sequence. \cr
See examples for several number series created with this function. \cr
This function is written in C++ using \code{Rcpp} for better performance.
}
\examples{
seq_rec() # by default gives Fibonacci numbers
seq_rec(0:3, 10L, sum) # a weird shifted version of Fibonacci
seq_rec(inits=2:1) # Lucas numbers
c(1, seq_rec(c(1, 2), f=prod)) # Multiplicative Fibonacci
seq_rec(f=\(x)2*x[2]+x[1]) # Pell numbers
seq_rec(inits = c(1, 0), f=\(x)2*x[1]) # see https://oeis.org/A077957
seq_rec(f=\(x)x[2]+2*x[1]) # Jacobsthal numbers
seq_rec(c(1,1,1), f=\(x)x[1] + x[2]) # Padovan sequence
seq_rec(c(3,0,2), f=\(x)x[1] + x[2]) # Perrin numbers
seq_rec(c(0,1,3), f=\(x)3*x[3] - 3*x[2] + x[1]) # Triangular numbers

}
