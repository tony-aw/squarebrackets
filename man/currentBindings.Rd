% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/currentBindings.R
\name{currentBindings}
\alias{currentBindings}
\title{List or Lock All Currently Existing Bindings Pointing To Same Address}
\usage{
currentBindings(x, action = "list", env = NULL)
}
\arguments{
\item{x}{the existing variable whose address to use when searching for bindings.}

\item{action}{a single string, giving the action to perform. \cr
Must be one of the following:
\itemize{
\item \code{"list"} (default).
\item \code{"checklock"}.
\item \code{"lockbindings"}.
}}

\item{env}{the environment where to look for objects. \cr
If \code{NULL} (default), the caller environment is used. \cr \cr}
}
\value{
For \code{currentBindings(x, action = "list")}: \cr
Returns a character vector. \cr
\cr
For \code{currentBindings(x, action = "checklock")}: \cr
Returns a named logical vector. \cr
The names give the names of the bindings, \cr
and each associated value indicates whether the binding is
locked (\code{TRUE}) or not locked (\code{FALSE}). \cr
\cr
For \code{currentBindings(x, action = "lockbindings")}: \cr
Returns VOID. It just locks the currently existing bindings. \cr
To unlock the bindings, remove the objects (see \link[base]{rm}). \cr \cr
}
\description{
\code{currentBindings(x, action = "list")} \cr
lists all \bold{currently existing} objects
sharing the same \bold{address} as \code{x}, in a given environment. \cr
\cr
\code{currentBindings(x, action = "checklock")} \cr
searches all \bold{currently existing} objects
sharing the same \bold{address} as \code{x}, in a given environment,
and reports which of these are locked and which are not locked. \cr
\cr
\code{currentBindings(x, action = "lockbindings")} \cr
searches all \bold{currently existing} objects
sharing the same \bold{address} as \code{x}, in a given environment,
and locks them using \link[base]{lockBinding}. \cr
\cr
See also \link{squarebrackets_PassByReference} for information regarding
the relation between locked bindings and pass-by-reference modifications. \cr
\cr \cr
}
\details{
The \link[base]{lockBinding} function locks a binding of an object,
preventing modification. \cr
'R' also uses locked bindings to prevent modification of objects from package namespaces. \cr
The pass-by-reference semantics of 'squarebrackets' in principle respect this,
and disallows modification of objects by reference. \cr
\cr
However, \link[base]{lockBinding} does not lock the address/pointer of an object,
only one particular binding of an object. \cr
This problematic; consider the following example: \cr

\if{html}{\out{<div class="sourceCode r">}}\preformatted{x <- mutable_atomic(1:16)
y <- x
lockBinding("y", environment())
sb_set(x, i = 1:6, rp = 8)
}\if{html}{\out{</div>}}

In the above code, \code{x} and \code{y} share the same address,
thus pointing to the same memory,
yet only \code{y} is actually locked. \cr
Since \code{x} is not locked, modifying \code{x} is allowed. \cr
But since \code{sb_set()}/\code{sb2_set()} performs modification by reference,
\code{y} will still be modified, despite being locked. \cr
\cr
The \code{currentBindings()} function
allows to user to:
find all \bold{currently existing} bindings in the \bold{caller environment}
sharing the same address as \code{x},
and locking all these bindings. \cr
\cr
}
\section{Warning}{

The \code{currentBindings()} function
only locks \bold{currently existing} bindings
in the \bold{caller environment}; \cr
bindings that are created \bold{after} calling \code{currentBindings()}
will not automatically be locked. \cr
Thus, every time the user creates a new binding of the same object,
and the user wishes it to be locked,
\code{currentBindings()} must be called again. \cr \cr
}

\examples{


x <- as.mutable_atomic(1:10)
y <- x
lockBinding("y", environment())
currentBindings(x)
currentBindings(x, "checklock") # only y is locked


# since only y is locked, we can still modify y through x by reference:
sb_set(x, i = 1, rp = -1)
print(y) # modified!
rm(list= c("y")) # clean up


# one can fix this by locking ALL bindings:
y <- x
currentBindings(x, "lockbindings") # lock all
currentBindings(x, "checklock") # all bindings are locked, including y
# the 'squarebrackets' package respects the lock of a binding,
# provided all bindings of an address are locked;
# so this will give an error, as it should:

if(requireNamespace("tinytest")) {
  tinytest::expect_error(
    sb_set(x, i = 1, rp = -1),
    pattern = "object is locked"
  )
}

# creating a new variable will NOT automatically be locked:
z <- y # new variable; will not be locked!
currentBindings(x, "checklock") # z is not locked
currentBindings(x, "lockbindings") # we must re-run this
currentBindings(x, "checklock") # now z is also locked

if(requireNamespace("tinytest")) {
  tinytest::expect_error( # now z is also protected
    sb_set(z, i = 1, rp = -1),
    pattern = "object is locked"
  )
}


rm(list= c("x", "y", "z")) # clean up


}
