% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slicev.R
\name{slicev}
\alias{slicev}
\alias{slicev_x}
\alias{slicev_x.default}
\alias{slicev_set}
\alias{slicev_set.default}
\alias{countv}
\title{Efficient Value-based Subset Methods on (Long) Vectors}
\usage{
slicev_x(x, ...)

\method{slicev_x}{default}(
  x,
  ...,
  y = x,
  v = NULL,
  na = FALSE,
  r = TRUE,
  from = NULL,
  to = NULL,
  use.names = TRUE,
  sticky = getOption("squarebrackets.sticky", FALSE)
)

slicev_set(x, ...)

\method{slicev_set}{default}(
  x,
  ...,
  y = x,
  v = NULL,
  na = FALSE,
  r = TRUE,
  from = NULL,
  to = NULL,
  rp,
  tf
)

countv(y, ..., v = NULL, na = FALSE, r = TRUE, from = NULL, to = NULL)
}
\arguments{
\item{x}{an atomic vector. \cr
For \code{slicev_set()} it must be a \link[mutatomic]{mutatomic} \bold{variable}.}

\item{...}{See \link{squarebrackets_slicev}.}

\item{y, v, na, r}{See \link{squarebrackets_slicev}.}

\item{from, to}{see \link{cp_seq}.}

\item{use.names}{Boolean, indicating if flat names should be preserved. \cr
Note that, since the \code{slicev_} methods operates on flat indices only,
dimensions and \code{dimnames} are always dropped.}

\item{sticky}{see \link{squarebrackets_options}.}

\item{rp, tf}{see \link{squarebrackets_modify}.}
}
\value{
Similar to the \code{i_}/\code{ss_} methods. \cr
\cr
For \code{countv()}: A single number,
giving the number of elements matching the specified condition. \cr \cr
}
\description{
The \code{slicev_} - methods are similar to the \code{i_}/\code{ss_} - methods,
except they don't require an indexing vector,
and are designed for memory efficiency. \cr
\cr
\code{counv(y, v, from, to)} counts how often a value, or range of values, \code{v},
occurs in a vector subset \code{y[from:to]}. \cr \cr
}
\examples{

# basic idea ====
nms <- c(letters, LETTERS, month.abb, month.name) |> rep_len(1e6)
x <- mutatomic(1:1e6, names = nms)
head(x)

# memory efficient form of sum(x <= 10):
countv(x, v = c(-Inf, 10))

# extract all elements of x with the name "a":
slicev_x(x, y = names(x), v = "a") |> head()

# find all x smaller than or equal to 5, and replace with `-1000`:
slicev_set(x, y = x, v = c(-Inf, 5), rp = -1000L)
head(x, n = 10)


################################################################################
# Numeric range ====
#
x <- mutatomic(1:1e6)
head(x)
slicev_x(x, v= c(-Inf, 5)) # x[x <= 5]


################################################################################
# Character ====
#
x <- stringi::stri_rand_shuffle(rep("hello", 1e5))
head(x)
slicev_x(x, v = "hello") |> head() # find "hello"

# find 2 possible misspellings of "hello":
slicev_x(x, v = c("holle", "helol")) |> head()




}
