% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_bind.R
\name{bind}
\alias{bind}
\alias{bind_array}
\alias{bind2_array}
\alias{bind2_dt}
\title{Dimensional Binding of Objects}
\usage{
bind_array(arg.list, along, name_along = TRUE, name_flat = FALSE)

bind2_array(arg.list, along, name_along = TRUE, name_flat = FALSE)

bind2_dt(arg.list, along)
}
\arguments{
\item{arg.list}{a list of only the appropriate objects.
Do not mix different types of objects. \cr}

\item{along}{a single integer,
indicating the dimension along which to bind the dimensions. \cr
I.e. use \code{along = 1} for row-binding, \code{along = 2} for column-binding, etc.}

\item{name_along}{Boolean, for \code{bind_array()} and \code{bind2_array()}. \cr
Indicates if dimension \code{along} should be named. \cr
Other dimensions will never be named.}

\item{name_flat}{Boolean, for \code{bind_array()} and \code{bind2_array()}. \cr
Indicates if flat indices should be named. \cr
Note that setting this to \code{TRUE} will reduce performance considerably. \cr
\ifelse{html}{\figure{for_performance-set_to_FALSE-red.svg}{options: alt='[for performance: set to FALSE]'}}{\link[=squarebrackets_help]{for performance: set to FALSE}} \cr \cr}
}
\value{
The new object.
}
\description{
The \code{bind_} and \code{bind2_} implementations provide dimensional binding functionalities. \cr
\code{bind_} is for atomic objects, and \code{bind2_} for recursive objects. \cr
When possible, the \code{bind_}/\code{bind2_} functions return \link[=squarebrackets_mutable_classes]{mutable classes}. \cr
\cr
The following implementations are available:
\itemize{
\item \code{bind_array()} binds atomic arrays and matrices. \cr
Returns a \link{mutable_atomic} array. \cr
\item \code{bind2_array()} binds recursive arrays and matrices. \cr
This is a modified version of the fantastic \code{abind::}\link[abind]{abind} function by Tony Plare and Richard Heiberger,
such that it can handle recursive arrays
(\code{abind::}\link[abind]{abind} would unlist everything to atomic). \cr
Returns dimensional lists.
\item \code{bind2_dt()} binds data.tables and other data.frame-like objects. \cr
Returns a \code{data.table}. \cr
Faster than \code{do.call(cbind, ...)} or \code{do.call(rbind, ...)} for regular \code{data.frame} objects. \cr
}
}
\examples{

# atomic arrays ====
x <- matrix(1:12,3,4)
y <- x+100
arg.list <- list(x = x, y=y)
bind_array(arg.list, along=0) # binds on new dimension before first
bind_array(arg.list, along=1) # binds on first dimension
bind_array(arg.list, along=2)
bind_array(arg.list, along=3) # bind on new dimension after last


################################################################################


# recursiv arrays ====
x <- matrix(as.list(1:12),3,4)
y <- lapply(x, \(x) + 100)
dim(y) <- dim(x)
arg.list <- list(x = x, y=y)
bind2_array(arg.list, along=0) # binds on new dimension before first
bind2_array(arg.list, along=1) # binds on first dimension
bind2_array(arg.list, along=2)
bind2_array(arg.list, along=3) # bind on new dimension after last

}
\references{
Plate T, Heiberger R (2016). \emph{abind: Combine Multidimensional Arrays}. R package version 1.4-5, \url{https://CRAN.R-project.org/package=abind}.
}
