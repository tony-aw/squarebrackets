% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_mod.R
\name{fi_mod}
\alias{fi_mod}
\alias{fi2_mod}
\alias{ss_mod}
\alias{ss2_mod}
\alias{fi_mod.default}
\alias{ss_mod.default}
\alias{fi2_mod.default}
\alias{ss2_mod.default}
\alias{ss2_mod.data.frame}
\title{Method to Return a Copy of an Object With Modified Subsets}
\usage{
fi_mod(x, ...)

fi2_mod(x, ...)

ss_mod(x, ...)

ss2_mod(x, ...)

\method{fi_mod}{default}(
  x,
  i = NULL,
  inv = FALSE,
  ...,
  rp,
  tf,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{ss_mod}{default}(
  x,
  s = NULL,
  d = 1:ndim(x),
  inv = FALSE,
  ...,
  rp,
  tf,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{fi2_mod}{default}(
  x,
  i = NULL,
  inv = FALSE,
  ...,
  rp,
  tf,
  chkdup = getOption("squarebrackets.chkdup", FALSE),
  .lapply = lapply
)

\method{ss2_mod}{default}(
  x,
  s = NULL,
  d = 1:ndim(x),
  inv = FALSE,
  ...,
  rp,
  tf,
  chkdup = getOption("squarebrackets.chkdup", FALSE),
  .lapply = lapply
)

\method{ss2_mod}{data.frame}(
  x,
  s = NULL,
  d = 1:2,
  obs = NULL,
  vars = NULL,
  inv = FALSE,
  ...,
  rp,
  tf,
  chkdup = getOption("squarebrackets.chkdup", FALSE),
  .lapply = lapply
)
}
\arguments{
\item{x}{see \link{squarebrackets_supported_structures}.}

\item{...}{see \link{squarebrackets_method_dispatch}.}

\item{i, s, d, obs, vars, inv}{See \link{squarebrackets_indx_args}. \cr
An empty index selection returns the original object unchanged. \cr}

\item{rp, tf, .lapply}{see \link{squarebrackets_modify}.}

\item{chkdup}{see \link{squarebrackets_options}. \cr
\ifelse{html}{\figure{for_performance-set_to_FALSE-red.svg}{options: alt='[for performance: set to FALSE]'}}{\link[=squarebrackets_help]{for performance: set to FALSE}}}
}
\value{
A copy of the object with replaced/transformed values. \cr \cr
}
\description{
Methods to return a copy of an object with modified subsets. \cr
For modifying subsets using R's default copy-on-modification semantics, see \link{idx}. \cr \cr
}
\details{
\bold{Transform or Replace} \cr
Specifying argument \code{tf} will transform the subset. \cr
Specifying \code{rp} will replace the subset. \cr
One cannot specify both \code{tf} and \code{rp}. It's either one set or the other. \cr
\cr
}
\examples{

# atomic objects ====

obj <- matrix(1:16, ncol = 4)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
rp <- -1:-9
ss_mod(obj, n(1:3), 1:ndim(obj), rp = rp)
# above is equivalent to  obj[1:3, 1:3] <- -1:-9; obj
fi_mod(obj, i = \(x)x<=5, rp = -1:-5)
# above is equivalent to  obj[obj <= 5] <- -1:-5; obj
ss_mod(obj, n("a"), 2L, rp = -1:-8)
# above is equivalent to  obj[, which(colnames(obj) \%in\% "a")] <- -1:-8; obj
ss_mod(obj, n(1:3), 1:ndim(obj), tf = \(x) -x)
# above is equivalent to  obj[1:3, 1:3] <- (-1 * obj[1:3, 1:3]); obj
fi_mod(obj, i = \(x)x <= 5, tf = \(x) -x)
# above is equivalent to  obj[obj <= 5] <- (-1 * obj[obj <= 5]); obj

obj <- array(1:64, c(4,4,3))
print(obj)
ss_mod(obj, n(1:3, 1:2), c(1,3), rp = -1:-24)
# above is equivalent to obj[1:3, , 1:2] <- -1:-24
fi_mod(obj, i = \(x)x <= 5, rp = -1:-5)
# above is equivalent to obj[obj <= 5] <- -1:-5

#############################################################################


# lists ====

obj <- list(a = 1:10, b = letters[1:11], c = 11:20)
print(obj)
fi2_mod(obj, "a", rp = list(1L))
# above is equivalent to  obj[["a"]] <- 1L; obj
fi2_mod(obj, is.numeric, rp = list(-1:-10, -11:-20))
# above is equivalent to  obj[which(sapply(obj, is.numeric))] <- list(-1:-10, -11:-20); obj

obj <- rbind(
  lapply(1:4, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:4, \(x)sample(1:10)),
  lapply(1:4, \(x)rnorm(10)),
  lapply(1:4, \(x)sample(letters))
)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
ss2_mod(obj, n(1:3), 1:ndim(obj),rp = n(-1))
# above is equivalent to obj[1:3, 1:3] <- list(-1)
fi2_mod(obj, i = is.numeric, rp = n(-1))
# above is equivalent to obj[sapply(obj, is.numeric)] <- list(-1)
ss2_mod(obj, n("a"), 2L, rp = n(-1))
# above is equivalent to
# obj[, lapply(c("a", "a"), \(i) which(colnames(obj) == i)) |> unlist()] <- list(-1)


obj <- array(as.list(1:64), c(4,4,3))
print(obj)
ss2_mod(obj, n(1:3, 1:2), c(1,3), rp = as.list(-1:-24))
# above is equivalent to obj[1:3, , 1:2] <- as.list(-1:-24)
fi2_mod(obj, i = \(x) x <= 5, rp = as.list(-1:-5))
# above is equivalent to obj[sapply(onj, \(x) x <= 5)] <- as.list(-1:-5)


#############################################################################

# data.frame-like objects  - whole columns ====

obj <- data.frame(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
str(obj) # notice that columns "a" and "c" are INTEGER (`int`)
ss2_mod(
  obj, vars = is.numeric,
  tf = sqrt
)

#############################################################################

# data.frame-like objects  - partial columns ====

obj <- data.frame(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
str(obj) # notice that columns "a" and "c" are INTEGER (`int`)

ss2_mod(
  obj, obs = ~ (a >= 2) & (c <= 17), vars = is.numeric,
  tf = sqrt
) 
ss2_mod(
  obj, obs = ~ (a >= 2) & (c <= 17), vars = is.numeric,
  tf = sqrt
) 
ss2_mod(
  obj, obs = ~ (a >= 2) & (c <= 17), vars = is.numeric,
  tf = sqrt
) 




}
