% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_rm.R
\name{sb_rm}
\alias{sb_rm}
\alias{sb_rm.default}
\alias{sb_rm.matrix}
\alias{sb_rm.array}
\alias{sb_rm.factor}
\alias{sb2_rm}
\alias{sb2_rm.default}
\alias{sb2_rm.array}
\alias{sb2_rm.data.frame}
\title{Method to Un-Select/Remove Subsets of an Object}
\usage{
sb_rm(x, ...)

\method{sb_rm}{default}(x, i, ..., chkdup = getOption("squarebrackets.chkdup", FALSE))

\method{sb_rm}{matrix}(
  x,
  row = NULL,
  col = NULL,
  i = NULL,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{sb_rm}{array}(
  x,
  sub = NULL,
  dims = NULL,
  i = NULL,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{sb_rm}{factor}(
  x,
  i = NULL,
  lvl = NULL,
  drop = FALSE,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

sb2_rm(x, ...)

\method{sb2_rm}{default}(
  x,
  i,
  drop = FALSE,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{sb2_rm}{array}(
  x,
  sub = NULL,
  dims = NULL,
  i = NULL,
  drop = FALSE,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{sb2_rm}{data.frame}(
  x,
  row = NULL,
  col = NULL,
  filter = NULL,
  vars = NULL,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)
}
\arguments{
\item{x}{see \link{squarebrackets_immutable_classes} and \link{squarebrackets_mutable_classes}.}

\item{...}{see \link{squarebrackets_method_dispatch}.}

\item{i, lvl, row, col, sub, dims, filter, vars}{See \link{squarebrackets_indx_args}. \cr
An empty index selection results in nothing being removed,
and the entire object is returned. \cr}

\item{chkdup}{see \link{squarebrackets_options}. \cr
\ifelse{html}{\figure{for_performance-set_to_FALSE-red.svg}{options: alt='[for performance: set to FALSE]'}}{\link[=squarebrackets_help]{for performance: set to FALSE}} \cr}

\item{drop}{Boolean.
\itemize{
\item For factors: If \code{drop = TRUE}, unused levels are dropped, if \code{drop = FALSE} they are not dropped.
\item For lists: if \code{drop = TRUE}, selecting a single element will give the simplified result,
like using \verb{[[]]}.
If \code{drop = FALSE}, a list is always returned regardless of the number of elements.
}}
}
\value{
A copy of the sub-setted object.
}
\description{
This is an S3 Method to un-select/remove subsets from an object. \cr
Use \code{sb_rm(x, ...)} if \code{x} is a non-recursive object (i.e. atomic or factor). \cr
Use \code{sb2_rm(x, ...)} if \code{x} is a recursive object (i.e. list or data.frame-like). \cr \cr
}
\examples{

# atomic objects ====

obj <- matrix(1:16, ncol = 4)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
sb_rm(obj, 1:3, 1:3)
# above is equivalent to  obj[-1:-3, -1:-3, drop = FALSE]
sb_rm(obj, i = \(x)x>5)
# above is equivalent to  obj[!obj > 5]
sb_rm(obj, col = "a")
# above is equivalent to  obj[, which(!colnames(obj) \%in\% "a")]

obj <- array(1:64, c(4,4,3))
print(obj)
sb_rm(obj, n(1, c(1, 3)), c(1, 3))
# above is equivalent to obj[-1, c(-1, -3), drop = FALSE]
sb_rm(obj, i = \(x)x>5)
# above is equivalent to obj[!obj > 5]

#############################################################################


# factors ====

obj <- factor(rep(letters[1:5], 2))
sb_rm(obj, lvl = "a")
# above is equivalent to obj[which(!obj \%in\% "a")]


#############################################################################


# lists ====

obj <- list(a = 1:10, b = letters[1:11], c = 11:20)
print(obj)
sb2_rm(obj, "a")
# above is equivalent to obj[which(!names(obj) \%in\% "a")]
sb2_rm(obj, 1) # obj[-1]
sb2_rm(obj, 1:2)
# above is equivalent to obj[seq_len(length(obj))[-1:-2]]
sb2_rm(obj, is.numeric, drop = TRUE)
# above is equivalent to obj[[!sapply(obj, is.numeric)]] IF this returns a single element
obj <- list(a = 1:10, b = letters[1:11], c = letters)
sb2_rm(obj, is.numeric)
# above is equivalent to obj[!sapply(obj, is.numeric)] # this time singular brackets?
# for recusive indexing, see sb2_rec()


#############################################################################


# recursive arrays / dimensional lists ====
obj <- c(as.list(1:10), as.list(letters[1:10])) |> array(dim = c(5, 4)) |> t()
print(obj)
sb2_rm(obj, list(1:3), 1)
# above is equivalent to obj[-1:-3, ]


#############################################################################

# data.frame-like objects ====

obj <- data.frame(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
print(obj)
sb2_rm(obj, 1:3, 1:3)
# above is equivalent to obj[-1:-3, -1:-3, drop = FALSE]
sb2_rm(obj, filter = ~ (a > 5) & (c < 19), vars = is.numeric)



}
