% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci.R
\name{ci_flat}
\alias{ci_flat}
\alias{ci_margin}
\alias{ci_sub}
\alias{ci_df}
\title{Construct Indices}
\usage{
ci_flat(
  x,
  i,
  inv = FALSE,
  chkdup = FALSE,
  uniquely_named = FALSE,
  .abortcall = sys.call()
)

ci_margin(
  x,
  slice,
  margin,
  inv = FALSE,
  chkdup = FALSE,
  uniquely_named = FALSE,
  .abortcall = sys.call()
)

ci_sub(
  x,
  sub,
  dims,
  inv = FALSE,
  chkdup = FALSE,
  uniquely_named = FALSE,
  .abortcall = sys.call()
)

ci_df(
  x,
  slice,
  margin,
  inv = FALSE,
  chkdup = FALSE,
  uniquely_named = FALSE,
  .abortcall = sys.call()
)
}
\arguments{
\item{x}{the object for which the indices are meant.}

\item{i, slice, margin, sub, dims, inv}{See \link{squarebrackets_indx_args}. \cr}

\item{chkdup}{see \link{squarebrackets_options}. \cr
\ifelse{html}{\figure{for_performance-set_to_FALSE-red.svg}{options: alt='[for performance: set to FALSE]'}}{\link[=squarebrackets_help]{for performance: set to FALSE}} \cr}

\item{uniquely_named}{Boolean,
indicating if the user knows a-priori that the relevant names of \code{x} are unique. \cr
If set to \code{TRUE}, speed may increase. \cr
But specifying \code{TRUE} when the relevant names are not unique will result in incorrect output.}

\item{.abortcall}{environment where the error message is passed to.}
}
\value{
An integer vector of casted indices.
}
\description{
These functions construct flat or dimensional indices. \cr
\itemize{
\item \code{ci_flat()} constructs an integer vector flat indices. \cr
\item \code{ci_margin()} constructs an integer vector of indices for one particular dimension margin. \cr
\item \code{ci_sub()} constructs a list of integer subscripts. \cr
\item \code{ci_df()} is the same as \code{ci_margin()},
except it is specifically designed for data.frame-like objects. \cr
It is a separate function,
because things like \code{dimnames(x)[1]} and \code{rownames(x)}
do not always return the same output for certain data.frame-like objects. \cr
}
}
\examples{

x.dim <- c(10, 10, 3)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(c(4, 3), c(3, 2), c(2, 3))
coord <- sub2coord(sub, x.dim)
print(coord)
ind <- coord2ind(coord, x.dim)
print(ind)
all(x[ind] == c(x[c(4, 3), c(3, 2), c(2, 3)])) # TRUE
coord2 <- ind2coord(ind, x.dim)
print(coord)
all(coord == coord2) # TRUE
sub2 <- coord2sub(coord2)
sapply(1:3, \(i) sub2[[i]] == sub[[i]]) |> all() # TRUE

}
