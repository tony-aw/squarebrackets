% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_currentBindings.R
\name{sb_currentBindings}
\alias{sb_currentBindings}
\title{List or Lock All Currently Existing Bindings Pointing To Same Address}
\usage{
sb_currentBindings(x, action = "list", env = NULL)
}
\arguments{
\item{x}{the existing variable whose address to use when searching for bindings.}

\item{action}{a single string, giving the action to perform. \cr
Must be one of the following:
\itemize{
\item \code{"list"} (default).
\item \code{"checklock"}.
\item \code{"lockbindings"}.
}}

\item{env}{the environment where to look for objects. \cr
If \code{NULL} (default), the caller environment is used.}
}
\value{
For \code{sb_currentBindings(x, action = "list")}: \cr
Returns a character vector. \cr
\cr
For \code{sb_currentBindings(x, action = "checklock")}: \cr
Returns a named logical vector. \cr
The names give the names of the bindings, \cr
and each associated value indicates whether the binding is
locked (\code{TRUE}) or not locked (\code{FALSE}). \cr
\cr
For \code{sb_currentBindings(x, action = "lockbindings")}: \cr
Returns VOID. It just locks the currently existing bindings. \cr
To unlock the bindings, remove the objects (see \link[base]{rm}). \cr \cr
}
\description{
\code{sb_currentBindings(x, action = "list")} \cr
lists all \bold{currently existing} objects
sharing the same \bold{address} as \code{x}, in a given environment. \cr
\cr
\code{sb_currentBindings(x, action = "checklock")} \cr
searches all \bold{currently existing} objects
sharing the same \bold{address} as \code{x}, in a given environment,
and reports which of these are locked and which are not locked. \cr
\cr
\code{sb_currentBindings(x, action = "lockbindings")} \cr
searches all \bold{currently existing} objects
sharing the same \bold{address} as \code{x}, in a given environment,
and locks them using \link[base]{lockBinding}. \cr
\cr
See also \link{squarebrackets_PassByReference} for information regarding
the relation between locked bindings and pass-by-reference modifications. \cr \cr
}
\examples{


x <- as.mutable_atomic(1:10)
y <- x
lockBinding("y", environment())
sb_currentBindings(x)
sb_currentBindings(x, "checklock") # only y is locked


# since only y is locked, we can still modify y through x by reference:
sb_set(x, i = 1, rp = -1)
print(y) # modified!
rm(list= c("y")) # clean up


# one can fix this by locking ALL bindings:
y <- x
sb_currentBindings(x, "lockbindings") # lock all
sb_currentBindings(x, "checklock") # all bindings are locked, including y
# the 'squarebrackets' package respects the lock of a binding,
# provided all bindings of an address are locked;
# so this will give an error, as it should:

if(requireNamespace("tinytest")) {
  tinytest::expect_error(
    sb_set(x, i = 1, rp = -1),
    pattern = "object is locked"
  )
}

# creating a new variable will NOT automatically be locked:
z <- y # new variable; will not be locked!
sb_currentBindings(x, "checklock") # z is not locked
sb_currentBindings(x, "lockbindings") # we must re-run this
sb_currentBindings(x, "checklock") # now z is also locked
tinytest::expect_error( # now z is also protected
  sb_set(z, i = 1, rp = -1),
  pattern = "object is locked"
)

rm(list= c("x", "y", "z")) # clean up


}
