% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tci.R
\name{tci_bool}
\alias{tci_bool}
\alias{tci_int}
\alias{tci_chr}
\alias{tci_cplx}
\title{Type Cast Indices}
\usage{
tci_bool(indx, n, inv = FALSE, .abortcall = sys.call())

tci_int(indx, n, inv = FALSE, chkdup = FALSE, .abortcall = sys.call())

tci_chr(
  indx,
  nms,
  inv = FALSE,
  chkdup = FALSE,
  uniquely_named = FALSE,
  .abortcall = sys.call()
)

tci_cplx(indx, n, inv = FALSE, chkdup = FALSE, .abortcall = sys.call())
}
\arguments{
\item{indx}{the indices to typecast}

\item{n}{the relevant size, when typecasting integer or logical indices. \cr
Examples:
\itemize{
\item If the target is row indices, input nrow for \code{n}.
\item If the target is flat indices, input the length for \code{n}.
}}

\item{inv}{Boolean, indicating if the indices should be inverted. \cr
See \link{squarebrackets_indx_args}.}

\item{.abortcall}{environment where the error message is passed to.}

\item{chkdup}{see \link{squarebrackets_options}. \cr
\ifelse{html}{\figure{for_performance-set_to_FALSE-red.svg}{options: alt='[for performance: set to FALSE]'}}{\link[=squarebrackets_help]{for performance: set to FALSE}} \cr}

\item{nms}{the relevant names, when typecasting character indices. \cr
Examples:
\itemize{
\item If the target is row indices, input row names for \code{nms}.
\item If the target is flat indices, input flat names for \code{nms}.
}}

\item{uniquely_named}{Boolean,
indicating if the user knows a-priori that the relevant names of \code{x} are unique. \cr
If set to \code{TRUE}, speed may increase. \cr
But specifying \code{TRUE} when the relevant names are not unique will result in incorrect output.}
}
\value{
An integer vector of casted indices.
}
\description{
These functions typecast indices to proper integer indices. \cr
}
\examples{

x.dim <- c(10, 10, 3)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(c(4, 3), c(3, 2), c(2, 3))
coord <- sub2coord(sub, x.dim)
print(coord)
ind <- coord2ind(coord, x.dim)
print(ind)
all(x[ind] == c(x[c(4, 3), c(3, 2), c(2, 3)])) # TRUE
coord2 <- ind2coord(ind, x.dim)
print(coord)
all(coord == coord2) # TRUE
sub2 <- coord2sub(coord2)
sapply(1:3, \(i) sub2[[i]] == sub[[i]]) |> all() # TRUE

}
