% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_wo.R
\name{i_wo}
\alias{i_wo}
\alias{i2_wo}
\alias{ss_wo}
\alias{ss2_wo}
\alias{i_wo.default}
\alias{ss_wo.default}
\alias{i2_wo.default}
\alias{ss2_wo.default}
\alias{ss2_wo.data.frame}
\title{Methods to Return Object Without Specified Subset}
\usage{
i_wo(x, ...)

i2_wo(x, ...)

ss_wo(x, ...)

ss2_wo(x, ...)

\method{i_wo}{default}(x, i = NULL, ..., chkdup = getOption("squarebrackets.chkdup", FALSE))

\method{ss_wo}{default}(
  x,
  s = NULL,
  d = 1:ndim(x),
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{i2_wo}{default}(
  x,
  i = NULL,
  red = FALSE,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{ss2_wo}{default}(
  x,
  s = NULL,
  d = 1:ndim(x),
  red = FALSE,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)

\method{ss2_wo}{data.frame}(
  x,
  s = NULL,
  d = 1:2,
  obs = NULL,
  vars = NULL,
  ...,
  chkdup = getOption("squarebrackets.chkdup", FALSE)
)
}
\arguments{
\item{x}{see \link{squarebrackets_supported_structures}.}

\item{...}{see \link{squarebrackets_method_dispatch}.}

\item{i, s, d, obs, vars}{See \link{squarebrackets_indx_args}. \cr
An empty index selection results in nothing being removed,
and the entire object is returned. \cr}

\item{chkdup}{see \link{squarebrackets_options}. \cr
\ifelse{html}{\figure{for_performance-set_to_FALSE-red.svg}{options: alt='[for performance: set to FALSE]'}}{\link[=squarebrackets_help]{for performance: set to FALSE}} \cr}

\item{red}{Boolean, for recursive objects only,
indicating if the result should be reduced. \cr
If \code{red = TRUE},
selecting a single element will give the simplified result,
like using \verb{[[]]}. \cr
If \code{red = FALSE}, a list is always returned regardless of the number of elements. \cr}
}
\value{
A copy of the sub-setted object.
}
\description{
S3 Methods to return an object \bold{without} the specified subset. \cr \cr
}
\examples{

# atomic objects ====

obj <- matrix(1:16, ncol = 4)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
ss_wo(obj, n(1:3), 1:ndim(obj))
# above is equivalent to  obj[-1:-3, -1:-3, drop = FALSE]
i_wo(obj, i = \(x) x > 5)
# above is equivalent to  obj[!obj > 5]
ss_wo(obj, n("a"), 2L)
# above is equivalent to  obj[, which(!colnames(obj) \%in\% "a")]

obj <- array(1:64, c(4,4,3))
print(obj)
ss_wo(obj, n(1, c(1, 3)), c(1, 3))
# above is equivalent to obj[-1, , c(-1, -3), drop = FALSE]
i_wo(obj, i = \(x)x > 5)
# above is equivalent to obj[!obj > 5]



#############################################################################


# lists ====

obj <- list(a = 1:10, b = letters[1:11], c = 11:20)
print(obj)
i2_wo(obj, "a")
# above is equivalent to obj[which(!names(obj) \%in\% "a")]
i2_wo(obj, 1) # obj[-1]
i2_wo(obj, 1:2)
# above is equivalent to obj[seq_len(length(obj))[-1:-2]]
i2_wo(obj, is.numeric, red = TRUE)
# above is equivalent to obj[[!sapply(obj, is.numeric)]] IF this returns a single element
obj <- list(a = 1:10, b = letters[1:11], c = letters)
i2_wo(obj, is.numeric)
# above is equivalent to obj[!sapply(obj, is.numeric)] # this time singular brackets?
# for recusive indexing, see lst_rec()


obj <- rbind(
  lapply(1:4, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:4, \(x)sample(1:10)),
  lapply(1:4, \(x)rnorm(10)),
  lapply(1:4, \(x)sample(letters))
)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
ss2_wo(obj, n(1:3), 1:ndim(obj))
# above is equivalent to obj[1:3, 1:3, drop = FALSE]
i2_wo(obj, i = is.numeric)
# above is equivalent to obj[sapply(obj, is.numeric)]
ss2_wo(obj, n(c("a", "a")), 2L)
# above is equivalent to obj[, lapply(c("a", "a"), \(i) which(colnames(obj) == i)) |> unlist()]

obj <- array(as.list(1:64), c(4,4,3))
print(obj)
ss2_wo(obj, n(1, c(1, 3)), c(1, 3))
# above is equivalent to obj[-1, , c(-1, -3), drop = FALSE]
i2_wo(obj, i = \(x)x>5)
# above is equivalent to obj[!sapply(obj, \(x) x > 5)]



#############################################################################

# data.frame-like objects ====

obj <- data.frame(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
print(obj)
ss2_wo(obj, n(1:3))
# above is equivalent to obj[-1:-3, -1:-3, drop = FALSE]
ss2_wo(obj, obs = ~ (a > 5) & (c < 19), vars = is.numeric)



}
