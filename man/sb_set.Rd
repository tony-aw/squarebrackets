% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_set.R
\name{sb_set}
\alias{sb_set}
\alias{sb_set.default}
\alias{sb_set.matrix}
\alias{sb_set.array}
\alias{sb_set.data.table}
\title{Method to Modify Subsets of a Mutable Object By Reference}
\usage{
sb_set(x, ...)

\method{sb_set}{default}(x, i, ..., rp, tf, chkdup = TRUE)

\method{sb_set}{matrix}(x, row = NULL, col = NULL, i = NULL, ..., rp, tf, chkdup = TRUE)

\method{sb_set}{array}(
  x,
  idx = NULL,
  dims = NULL,
  rcl = NULL,
  i = NULL,
  ...,
  rp,
  tf,
  chkdup = TRUE
)

\method{sb_set}{data.table}(
  x,
  row = NULL,
  col = NULL,
  filter = NULL,
  vars = NULL,
  ...,
  rp,
  tf,
  chkdup = TRUE,
  .lapply = lapply
)
}
\arguments{
\item{x}{a \bold{variable} belonging to one of the
\link[=squarebrackets_mutable_classes]{supported mutable classes}. \cr}

\item{...}{further arguments passed to or from other methods.}

\item{i, row, col, idx, dims, rcl, filter, vars}{See \link{squarebrackets_indx_args}. \cr
An empty index selection returns the original object unchanged. \cr}

\item{rp}{an object of somewhat the same type as the selected subset of \code{x},
and the same same length as the selected subset of \code{x} or a length of 1.}

\item{tf}{the transformation function.}

\item{chkdup}{see \link{squarebrackets_duplicates}.}

\item{.lapply}{\code{sb_set()} by default uses \link[base]{lapply}
for lists and \link[collapse]{dapply} data.frame-like objects
to compute \code{tf()} on every list element or data.frame column. \cr
The user may supply a custom \code{lapply()/dapply()}-like function
in this argument to use instead. \cr
For example, the perform parallel transformation,
the user may supply \verb{future.apply::}\link[future.apply]{future_lapply}. \cr
The supplied function must use the exact same argument convention as
\link[base]{lapply},
otherwise errors or unexpected behaviour may occur.}
}
\value{
Returns: VOID. This method modifies the object by reference. \cr
Do not use assignments like \code{x <- sb_set(x, ...)}. \cr
Since this function returns void, you'll just get \code{NULL}. \cr \cr
}
\description{
This is an S3 Method to replace or transform a subset of a
\link[=squarebrackets_mutable_classes]{supported mutable object}
using
\link[=squarebrackets_PassByReference]{pass-by-reference}
semantics. \cr \cr
}
\details{
\bold{Transform or Replace} \cr
Specifying argument \code{tf} will transform the subset.
Specifying \code{rp} will replace the subset.
One cannot specify both \code{tf} and \code{rp}. It's either one set or the other. \cr
Note that there is no \code{sb_set()} method for factors: this is intentional. \cr
\cr
}
\examples{


# mutable_atomic objects ====

gen_mat <- function() {
  obj <- as.mutable_atomic(matrix(1:16, ncol = 4))
  colnames(obj) <- c("a", "b", "c", "a")
  return(obj)
}

obj <- obj2 <- gen_mat()
obj
sb_set(obj, 1:3, 1:3, rp = -1:-9)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, i = \(x)x<=5, rp = -1:-5)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, col = "a", rp = cbind(-1:-4, -5:-8))
obj2

obj <- obj2 <- gen_mat()
obj
sb_set(obj, 1:3, 1:3, tf = \(x) -x)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, i = \(x)x<=5, tf = \(x) -x)
obj2
obj <- obj2 <- gen_mat()
obj
sb_set(obj, col = "a", tf = \(x) -x)
obj2


gen_array <- function() {
  as.mutable_atomic(array(1:64, c(4,4,3)))
}
obj <- gen_array()
obj
sb_set(obj, list(1:3, 1:2, c(1, 3)), 1:3, rp = -1:-12)
obj
obj <- gen_array()
obj
sb_set(obj, i = \(x)x<=5, rp = -1:-5)
obj


#############################################################################

# data.table ====

obj <- data.table::data.table(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
str(obj) # notice that columns "a" and "c" are INTEGER (`int`)
sb_set(
  obj, filter = ~ (a >= 2) & (c <= 17), vars = is.numeric,
  tf = sqrt # WARNING: sqrt() results in `dbl`, but columns are `int`, so decimals lost
)
print(obj)

obj <- data.table::data.table(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
obj <- sb_coe(obj, vars = is.numeric, v = as.numeric)
str(obj)
sb_set(obj,
  filter = ~ (a >= 2) & (c <= 17), vars = is.numeric,
  tf = sqrt # SAFE: coercion performed by sb_coe(); so no warnings
) 
print(obj)

obj <- data.table::data.table(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
str(obj) # notice that columns "a" and "c" are INTEGER (`int`)
sb_set(
  obj, vars = is.numeric,
  tf = sqrt # SAFE: row=NULL & filter = NULL, so coercion performed
)
str(obj)

}
