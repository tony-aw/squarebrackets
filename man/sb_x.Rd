% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_x.R
\name{sb_x}
\alias{sb_x}
\alias{sb_x.default}
\alias{sb_x.matrix}
\alias{sb_x.array}
\alias{sb2_x}
\alias{sb2_x.default}
\alias{sb2_x.matrix}
\alias{sb2_x.array}
\alias{sb2_x.data.frame}
\title{Method to Extract, Exchange, or Duplicate Subsets of an Object}
\usage{
sb_x(x, ...)

\method{sb_x}{default}(x, i = NULL, ...)

\method{sb_x}{matrix}(x, row = NULL, col = NULL, i = NULL, ...)

\method{sb_x}{array}(x, sub = NULL, dims = NULL, i = NULL, ...)

sb2_x(x, ...)

\method{sb2_x}{default}(x, i = NULL, drop = FALSE, ...)

\method{sb2_x}{matrix}(x, row = NULL, col = NULL, i = NULL, drop = FALSE, ...)

\method{sb2_x}{array}(x, sub = NULL, dims = NULL, i = NULL, drop = FALSE, ...)

\method{sb2_x}{data.frame}(x, row = NULL, col = NULL, filter = NULL, vars = NULL, ...)
}
\arguments{
\item{x}{see \link{squarebrackets_immutable_classes} and \link{squarebrackets_mutable_classes}.}

\item{...}{see \link{squarebrackets_method_dispatch}.}

\item{i, row, col, sub, dims, filter, vars}{See \link{squarebrackets_indx_args}. \cr
Duplicates are allowed, resulting in duplicated indices. \cr
An empty index selection results in an empty object of length 0. \cr}

\item{drop}{Boolean, for lists only. \cr
If \code{drop = TRUE},
selecting a single element with non-empty arguments will give the simplified result,
like using \verb{[[]]}. \cr
If \code{drop = FALSE}, a list is always returned regardless of the number of elements.}
}
\value{
Returns a copy of the sub-setted object.
}
\description{
This is an S3 Method to extract, exchange,
or duplicate (i.e. repeat x times) subsets of an object. \cr
Use \code{sb_x(x, ...)} if \code{x} is an atomic object. \cr
Use \code{sb2_x(x, ...)} if \code{x} is a recursive object (i.e. list or data.frame-like). \cr \cr
}
\examples{


# atomic objects ====

obj <- matrix(1:16, ncol = 4)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
sb_x(obj, 1:3, 1:3)
# above is equivalent to obj[1:3, 1:3, drop = FALSE]
sb_x(obj, i = \(x)x>5)
# above is equivalent to obj[obj > 5]
sb_x(obj, col = c("a", "a"))
# above is equivalent to obj[, lapply(c("a", "a"), \(i) which(colnames(obj) == i)) |> unlist()]

obj <- array(1:64, c(4,4,3))
print(obj)
sb_x(obj, n(1:3, 1:2), c(1,3))
# above is equivalent to obj[1:3, , 1:2, drop = FALSE]
sb_x(obj, i = \(x)x>5)
# above is equivalent to obj[obj > 5]


#############################################################################


# lists ====

obj <- list(a = 1:10, b = letters[1:11], c = 11:20)
print(obj)
sb2_x(obj, 1) # obj[1]
sb2_x(obj, 1, drop = TRUE) # obj[[1]]
sb2_x(obj, 1:2) # obj[1:2]
sb2_x(obj, is.numeric) # obj[sapply(obj, is.numeric)]
# for recursive subsets, see sb2_rec()


################################################################################

# dimensional lists ====

obj <- rbind(
  lapply(1:4, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:4, \(x)sample(1:10)),
  lapply(1:4, \(x)rnorm(10)),
  lapply(1:4, \(x)sample(letters))
)
colnames(obj) <- c("a", "b", "c", "a")
print(obj)
sb2_x(obj, 1:3, 1:3)
# above is equivalent to obj[1:3, 1:3, drop = FALSE]
sb2_x(obj, i = is.numeric)
# above is equivalent to obj[sapply(obj, is.numeric)]
sb2_x(obj, col = c("a", "a"))
# above is equivalent to obj[, lapply(c("a", "a"), \(i) which(colnames(obj) == i)) |> unlist()]

obj <- array(as.list(1:64), c(4,4,3))
print(obj)
sb2_x(obj, n(1:3, 1:2), c(1,3))
# above is equivalent to obj[1:3, , 1:2, drop = FALSE]
sb2_x(obj, i = \(x)x>5)
# above is equivalent to obj[sapply(obj, \(x) x > 5)]

#############################################################################

# data.frame-like objects ====

obj <- data.frame(a = 1:10, b = letters[1:10], c = 11:20, d = factor(letters[1:10]))
print(obj)
sb2_x(obj, 1:3, 1:3) # obj[1:3, 1:3, drop = FALSE]
sb2_x(obj, filter = ~ (a > 5) & (c < 19), vars = is.numeric)


}
