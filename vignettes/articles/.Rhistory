}
x <- as.double(1:20)
tempfun1(x, 2, 5)
tempfun2(x, 2, 5)
all(tempfun1(x, 2, 5) == tempfun2(x, 2, 5))
slice_rm(x, 2, 16-1i)
tempfun2(x, 2, 16-1i)
tempfun1(x, 1, 5, 2)
tempfun2(x, 1, 5, 2)
tempfun1(x, 1, 10, 3)
tempfun2(x, 1, 10, 3)
tempfun1 <- function(x, start, end, by) {
x[-seq(start, end, by)] <- -1
return(x)
}
tempfun2 <- function(x, start = NULL, end = NULL, by = 1L) {
x <- data.table::copy(x)
rp <- -1
slice_setinv(x, start, end, by, rp)
return(x)
}
x <- as.double(1:20)
tempfun1(x, 2, 5)
tempfun2(x, 2, 5)
all(tempfun1(x, 2, 5) == tempfun2(x, 2, 5))
Rcpp::cppFunction(
"
void rcpp_slice_setinv(
NumericVector x, const NumericVector rp, const R_xlen_t start, const R_xlen_t end, const R_xlen_t len, const R_xlen_t by
) {
R_xlen_t counter = 0;
if(rp.length() == len) {
if(start > 0) {
for(R_xlen_t i = 0; i < start; ++i) {
x[i] = rp[counter];
counter++;
}
}
if(by == 2) {
for(R_xlen_t i = start; i < end; i+=2) {
x[i+1] = rp[counter];
counter++;
}
}
if(by > 2) {
for(R_xlen_t i = start; i < end; i += by) {
R_xlen_t startx = i + 1;
for(R_xlen_t j = startx; j < (startx + by - 1); ++j) {
x[j] = rp[counter];
counter++;
}
}
}
if(end < (x.length() - 1)) {
for(R_xlen_t i = end + 1; i < x.length(); ++i) {
x[i] = rp[counter];
counter++;
}
}
}
else if(rp.length() == 1) {
if(start > 0) {
for(R_xlen_t i = 0; i < start; ++i) {
x[i] = rp[0];
counter++;
}
}
if(by == 2) {
for(R_xlen_t i = start; i < end; i+=2) {
x[i+1] = rp[0];
counter++;
}
}
if(by > 2) {
for(R_xlen_t i = start; i < end; i += by) {
R_xlen_t startx = i + 1;
for(R_xlen_t j = startx; j < (startx + by - 1); ++j) {
x[j] = rp[0];
counter++;
}
}
}
if(end < (x.length() - 1)) {
for(R_xlen_t i = end + 1; i < x.length(); ++i) {
x[i] = rp[0];
counter++;
}
}
}
}
"
)
slice_setinv <- function(x, start = NULL, end = NULL, by = 1L, rp = rp) {
myslice <- squarebrackets::ci_seq(x, 0L, start, end, by, sys.call())
by <- abs(myslice$by)
len <- length(x) - myslice$length.out
if(len == 0L) {
return(x)
}
if(len == length(x)) {
return(vector(typeof(x), length = 0L))
}
if(myslice$start > myslice$end) {
start <- myslice$end
end <- myslice$start
}
else {
start <- myslice$start
end <- myslice$end
}
return(rcpp_slice_setinv(x, rp, start - 1L, end - 1L, len, by))
}
tempfun1 <- function(x, start, end, by) {
x[-seq(start, end, by)] <- -1 * x[-seq(start, end, by)]
return(x)
}
tempfun2 <- function(x, start = NULL, end = NULL, by = 1L) {
x <- data.table::copy(x)
rp <- -1 * x[-seq(start, end, by)]
slice_setinv(x, start, end, by, rp)
return(x)
}
x <- as.double(1:20)
tempfun1(x, 2, 5)
tempfun2(x, 2, 5)
all(tempfun1(x, 2, 5) == tempfun2(x, 2, 5))
tempfun1(x, 1, 5, 2)
tempfun2(x, 1, 5, 2)
tempfun1(x, 1, 10, 3)
tempfun2(x, 1, 10, 3)
tempfun1 <- function(x, start, end, by) {
x[-seq(start, end, by)] <- -1
return(x)
}
tempfun2 <- function(x, start = NULL, end = NULL, by = 1L) {
x <- data.table::copy(x)
rp <- -1
slice_setinv(x, start, end, by, rp)
return(x)
}
x <- as.double(1:20)
tempfun1(x, 2, 5)
tempfun2(x, 2, 5)
all(tempfun1(x, 2, 5) == tempfun2(x, 2, 5))
tempfun1(x, 1, 5, 2)
tempfun2(x, 1, 5, 2)
tempfun1(x, 1, 10, 3)
tempfun2(x, 1, 10, 3)
x <- as.double(1:1e7)
foo <- bench::mark(
by1 = slice_setinv(x, 1, 25e5, 1, rp = rnorm(1)),
by2 = slice_setinv(x, 1, 5e6, 2, rp = rnorm(1)),
by4 = slice_setinv(x, 1, 1e7, 4, rp = rnorm(1)),
clp1 = collapse::setv(
x, as.integer(seq(1, 25e5, 1)), rnorm(1)
),
clp2 = collapse::setv(
x, as.integer(seq(1, 5e6, 2)), rnorm(1)
),
clp4 = collapse::setv(
x, as.integer(seq(1, 1e7, 4)), rnorm(1)
),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
slice_rm(x, 1, 25e5, by = 1) |> length()
len <- slice_rm(x, 1, 1e7, by = 4) |> length()
# must have same lengths to test speed fairly:
x <- as.double(1:1e7)
slice_rm(x, 1, 25e5, by = 1) |> length()
slice_rm(x, 1, 5e6, by = 2) |> length()
slice_rm(x, 1, 1e7, by = 4) |> length()
x <- as.double(1:1e7)
foo <- bench::mark(
by1 = slice_setinv(x, 1, 25e5, 1, rp = rnorm(1)),
by2 = slice_setinv(x, 1, 5e6, 2, rp = rnorm(1)),
by4 = slice_setinv(x, 1, 1e7, 4, rp = rnorm(1)),
clp1 = collapse::setv(
x, as.integer(seq(1, 25e5, 1)), rnorm(1), vind1 = TRUE
),
clp2 = collapse::setv(
x, as.integer(seq(1, 5e6, 2)), rnorm(1), vind1 = TRUE
),
clp4 = collapse::setv(
x, as.integer(seq(1, 1e7, 4)), rnorm(1), vind1 = TRUE
),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
void rcpp_slice_setinv(
NumericVector x, const NumericVector rp, const R_xlen_t start, const R_xlen_t end, const R_xlen_t len, const R_xlen_t by
) {
if(rp.length() == len) {
R_xlen_t counter = 0;
if(start > 0) {
for(R_xlen_t i = 0; i < start; ++i) {
x[i] = rp[counter];
counter++;
}
}
if(by == 2) {
for(R_xlen_t i = start; i < end; i+=2) {
x[i+1] = rp[counter];
counter++;
}
}
if(by > 2) {
for(R_xlen_t i = start; i < end; i += by) {
R_xlen_t startx = i + 1;
for(R_xlen_t j = startx; j < (startx + by - 1); ++j) {
x[j] = rp[counter];
counter++;
}
}
}
if(end < (x.length() - 1)) {
for(R_xlen_t i = end + 1; i < x.length(); ++i) {
x[i] = rp[counter];
counter++;
}
}
}
else if(rp.length() == 1) {
if(start > 0) {
for(R_xlen_t i = 0; i < start; ++i) {
x[i] = rp[0];
}
}
if(by == 2) {
for(R_xlen_t i = start; i < end; i+=2) {
x[i+1] = rp[0];
}
}
if(by > 2) {
for(R_xlen_t i = start; i < end; i += by) {
R_xlen_t startx = i + 1;
for(R_xlen_t j = startx; j < (startx + by - 1); ++j) {
x[j] = rp[0];
}
}
}
if(end < (x.length() - 1)) {
for(R_xlen_t i = end + 1; i < x.length(); ++i) {
x[i] = rp[0];
}
}
}
}
"
)
slice_setinv <- function(x, start = NULL, end = NULL, by = 1L, rp = rp) {
myslice <- squarebrackets::ci_seq(x, 0L, start, end, by, sys.call())
by <- abs(myslice$by)
len <- length(x) - myslice$length.out
if(len == 0L) {
return(x)
}
if(len == length(x)) {
return(vector(typeof(x), length = 0L))
}
if(myslice$start > myslice$end) {
start <- myslice$end
end <- myslice$start
}
else {
start <- myslice$start
end <- myslice$end
}
return(rcpp_slice_setinv(x, rp, start - 1L, end - 1L, len, by))
}
# must have same lengths to test speed fairly:
x <- as.double(1:1e7)
x <- as.double(1:1e7)
foo <- bench::mark(
by1 = slice_setinv(x, 1, 25e5, 1, rp = rnorm(1)),
by2 = slice_setinv(x, 1, 5e6, 2, rp = rnorm(1)),
by4 = slice_setinv(x, 1, 1e7, 4, rp = rnorm(1)),
clp1 = collapse::setv(
x, as.integer(seq(1, 25e5, 1)), rnorm(1), vind1 = TRUE
),
clp2 = collapse::setv(
x, as.integer(seq(1, 5e6, 2)), rnorm(1), vind1 = TRUE
),
clp4 = collapse::setv(
x, as.integer(seq(1, 1e7, 4)), rnorm(1), vind1 = TRUE
),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
summary(foo)
x <- as.double(1:1e7)
foo <- bench::mark(
by4 = slice_setinv(x, 1, 1e7, 4, rp = rnorm(1)),
by2 = slice_setinv(x, 1, 5e6, 2, rp = rnorm(1)),
by1 = slice_setinv(x, 1, 25e5, 1, rp = rnorm(1)),
clp1 = collapse::setv(
x, as.integer(seq(1, 25e5, 1)), rnorm(1), vind1 = TRUE
),
clp2 = collapse::setv(
x, as.integer(seq(1, 5e6, 2)), rnorm(1), vind1 = TRUE
),
clp4 = collapse::setv(
x, as.integer(seq(1, 1e7, 4)), rnorm(1), vind1 = TRUE
),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
x <- as.double(1:1e7)
foo <- bench::mark(
clp1 = collapse::setv(
x, as.integer(seq(1, 25e5, 1)), rnorm(1), vind1 = TRUE
),
clp2 = collapse::setv(
x, as.integer(seq(1, 5e6, 2)), rnorm(1), vind1 = TRUE
),
clp4 = collapse::setv(
x, as.integer(seq(1, 1e7, 4)), rnorm(1), vind1 = TRUE
),
by1 = slice_setinv(x, 1, 25e5, 1, rp = rnorm(1)),
by2 = slice_setinv(x, 1, 5e6, 2, rp = rnorm(1)),
by4 = slice_setinv(x, 1, 1e7, 4, rp = rnorm(1)),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
# must have same lengths to test speed fairly:
x <- as.double(1:1e7)
x <- as.double(1:1e7)
foo <- bench::mark(
base = tempfun1(x, 1, 5e6, 2),
slice = tempfun2(x, 1, 5e6, 2),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
1i
-1i
-1i:-10i
1:10i
1:10 + 1i
Im(1:10)
as.complex(1:10)
seq(1+1i, 1+10i)
x <- 1:10
tempfun(x, i, rp) {
tempfun <- function(x, i, rp) {
eval.parent(x[i] <- rp)
}
tempfun(x, 1, -1)
tempfun <- function(x, i, rp) {
eval.parent(x[i] <- rp)
return(invisible(NULL))
}
x <- 1:10
tempfun <- function(x, i, rp) {
eval.parent(x[i] <- rp)
return(invisible(NULL))
}
tempfun(x, 1, -1)
x
squarebrackets::sb2_reccom
x <- 1:10
tempfun <- function(x, i, rp) {
eval.parent(substitute(x[i] <- rp))
return(invisible(NULL))
}
tempfun(x, 1, -1)
x
x <- 1:10
tempfun <- function(x, i, rp) {
eval.parent(substitute(x[i] <- rp))
return(invisible(NULL))
}
tempfun(x, 1, -1)
x
foo <- bench::mark(
x[i] <- rp,
tempfun(x, i, rp),
min_iterations = 500
)
i <- sample(1:5)
rp <- sample(-1:-5)
foo <- bench::mark(
x[i] <- rp,
tempfun(x, i, rp),
min_iterations = 500
)
foo <- bench::mark(
x[i] <- rp,
tempfun(x, i, rp),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
x <- 1:1000
i <- sample(1:500)
rp <- sample(-1:-500)
foo <- bench::mark(
x[i] <- rp,
tempfun(x, i, rp),
min_iterations = 500,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
foo <- bench::mark(
x[i] <- rp,
tempfun(x, i, rp),
min_iterations = 1000,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
eval.parent
x <- 1:10
tempfun <- function(x, i, rp) {
eval(substitute(x[i] <- rp), parent.frame(1))
return(invisible(NULL))
}
x
tempfun(x, 1, -1)
x
x <- 1:10
tempfun <- function(x, i, rp) {
eval(substitute(x[i] <- rp), parent.frame(1))
return(invisible(NULL))
}
tempfun(x, 1, -1)
x
x <- 1:1000
i <- sample(1:500)
rp <- sample(-1:-500)
foo <- bench::mark(
x[i] <- rp,
tempfun(x, i, rp),
min_iterations = 1000,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
`[<-`
`[<-.factor`
x <- 1:1e6
i <- sample(1:5000)
rp <- sample(-1:-5000)
foo <- bench::mark(
x[i] <- rp,
tempfun(x, i, rp),
min_iterations = 1000,
check = FALSE
)
summary(foo)
ggplot2::autoplot(foo)
sb <- loadNamespace("squarebrackets")
x <- 1:10
sb$.C_is_altrep(x)
x[] <- 1:10
sb$.C_is_altrep(x)
x <- stringfish::convert_to_sf(letters)
x
sb$.C_is_altrep(x)
x[1] <- "b"
sb$.C_is_altrep(x)
tinycodet::import_as(~ sf., "stringfish")
sf.$convert_to_sf(letters)
x <- sf.$convert_to_sf(letters)
tinycodet::import_as(~ sb., "squarebrackets")
tinycodet::import_as(~ alt, "altrepr")
alt$alt_type(x)
alt$alt_data1(x)
alt$alt_data2(x)
sb.$materialize_atomic(x)
x <- sf.$convert_to_sf(x)
x
collapse::setv(x, "a", "xxx")
x
library(squarebrackets)
library(ggplot2)
library(data.table)
# atomic ====
x <- 1:1e7
foo <- bench::mark(
sb_x(x, i = 1:1e6),
x[1:1e6],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
bm.sb_x.default <- foo
summary(bm.sb_x.default)
ggplot2::autoplot(bm.sb_x.default)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/vignettes/articles")
lobstr::obj_size(bm.sb_x.default)
bm.sb_x.default$result
bm.sb_x.default$result <- NULL
lobstr::obj_size(bm.sb_x.default)
summary(bm.sb_x.default)
ggplot2::autoplot(bm.sb_x.default)
save(bm.sb_x.default, file = "bm.sb_x.default.RData")
