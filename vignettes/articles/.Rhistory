temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
if(counter > 0) {
counter--;
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
SEXP flatind;
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
if(counter > 0) {
counter--;
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
x.dim <- c(1500L, 1500L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
all(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod) ==
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
)
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_c <- C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
body2 <- "
int ni = length(ind1);
int nj = length(ind2);
int nk = length(ind3);
R_xlen_t counter = 0;
int temp = 0;
int *buf = (int *) R_alloc(ni * nj * nk, sizeof(int));
SEXP flatind;
for(int k = 0; k < nk; ++k) {
for(int j = 0; j < nj; ++j) {
for(int i = 0; i < ni; ++i) {
temp = INTEGER(ind1)[i] + INTEGER(dimcumprod)[0]  * (INTEGER(ind2)[j] - 1) + INTEGER(dimcumprod)[1] * (INTEGER(ind3)[k] - 1);
buf[counter] = temp;
counter++;
}
}
}
PROTECT(flatind = allocVector(INTSXP, counter));
memcpy(INTEGER(flatind), buf, sizeof(int) * counter);
UNPROTECT(1);
return(flatind);
"
C_sub2ind_3d <- inline::cfunction(
signature(ind1 = "INTSXP", ind2 = "INTSXP", ind3 = "INTSXP", dimcumprod = "INTSXP"),
body = body2
)
x.dim <- c(1500L, 1500L, 3L)
x.len <- as.integer(prod(x.dim))
x <- array(sample(1:x.len), dim = x.dim)
ind1 <- 1:500
ind2 <- seq_len(x.dim[2])
ind3 <- 1:2
dimcumprod <- as.integer(cumprod(x.dim))
test_rcpp <- rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
test_c <- C_sub2ind_3d(ind1, ind2, ind3, dimcumprod)
all( test_rcpp == test_c)
foo <- bench::mark(
rcpp_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
C_sub2ind_3d(ind1, ind2, ind3, dimcumprod),
min_iterations = 500
)
obj <- summary(foo)
obj
# Overview pages:
?squarebrackets::squarebrackets_help
?squarebrackets::squarebrackets_immutable_classes
?squarebrackets::squarebrackets_mutable_classes
?squarebrackets::squarebrackets_indx_args
?squarebrackets::squarebrackets_duplicates
?squarebrackets::squarebrackets_PassByReference
?squarebrackets::squarebrackets_technical
?squarebrackets::squarebrackets_inconveniences
?squarebrackets::class_mutable_atomic
# generic methods:
?squarebrackets::sb_x()
?squarebrackets::sb_rm()
?squarebrackets::sb_mod()
?squarebrackets::sb_set()
?squarebrackets::sb_coe()
?squarebrackets::sb2_coe()
?squarebrackets::sb_before()
?squarebrackets::sb2_rec()
?squarebrackets::sb_setRename()
?squarebrackets::sb_currentBindings()
# helper functions:
?squarebrackets::n()
?squarebrackets::sub2ind()
?squarebrackets::match_all()
?squarebrackets::idx_by()
?squarebrackets::idx_ord()
?squarebrackets::idx()
?squarebrackets::idx_ord()
squarebrackets::idx_ord_v()
?squarebrackets::idx_ord_v()
?squarebrackets::seq_rec2()
?squarebrackets::seq_names()
?squarebrackets::seq_mlen()
?squarebrackets::indx_x()
# Overview pages:
?squarebrackets::squarebrackets_help
ut <- loadNamespace("utils")
View(ut)
ut[["specialOps"]]
baseenv()[["??"]]
b <- loadNamespace("base")
b
p <- parent.env(ut)
View(p)
p
ls(p)
help.search("??")
View(ut)
View(ut[["?"]])
`<-`
.Internal("??")
.Primitive("??")
?.Internal
.External("??")
?help
?`?`
?"stringi::stri_c"
?stringi::stri_c
usethis::use_tidy_dependencies()
usethis::use_tidy_dependencies
?tinycodet::import_as
?usethis::use_standalone
?dplyr
??dplyr
?collapse::setv
?data.table
??data.table
foo <- Rgraphviz::plot
environment(foo)
foo2 <- Rgraphviz::AgEdge
environment(foo2)
asNamespace(environment(foo2))
getNamespaceName
getNamespaceName(foo)
getNamespaceName(environment(foo))
rg <- loadNamespace("Rgraphviz")
View(rg)
rg[[".__T__plot:base"]]
Tplot <- rg[[".__T__plot:base"]]
View(Tplot)
parent.env(Tplot)
rg
View(rg)
imp.rg <- parent.env(rg)
View(imp.rg)
imp.rg[["plot"]]
Rplot <- imp.rg[["plot"]]
Rplot
?isS4Method
??isS4Method
?setClass
install.packages("aorsf")
tinycodet::import_as(~ af., "aorsf")
View(af.)
af2 <- new.env()
import::into(af2, .from = "aorsf", .all = TRUE)
sort(names(af.))
sort(names(af2))
sort(names(af.))[-1] == sort(names(af2))
#' @rdname tinycodetfakepkg6
#' @export
setClass("plottingclass", slots = c(x = "numeric", y = "numeric"))
#' @rdname tinycodetfakepkg6
#' @export
plottingClass <- setClass("plottingclass", slots = c(x = "numeric", y = "numeric"))
setMethod("plot", "Ragraph", function(x, y) paste0(x, y))
setMethod("plot", "plottingclass", function(x, y) paste0(x, y))
plottingClass
new("plottingclass", x = 1:10, y = 1:10)
myobj <- new("plottingclass", x = 1:10, y = 1:10)
plot(myobj)
setMethod("plot", "plottingclass", function(obj) paste0(obj$x, obj$y))
plot.plottingclass
rg$AgEdge
help.import(i =rg$AgEdge)
library(tinycodet)
help.import(i =rg$AgEdge)
help.import(i =rg.$AgEdge)
import_as(~ rg., "Rgraphviz")
help.import(i =rg.$AgEdge)
rg[[".__T__show:methods"]]
install.packages("cranlog")
install.packages("cranlogs")
cranlogs::cran_downloads("tinycodet")
?cranlogs::cran_downloads("tinycodet")
?cranlogs::cran_downloads("tinycodet", from = "2024-05-01", to = "2024-05-08")
cranlogs::cran_downloads("tinycodet", from = "2024-05-01", to = "2024-05-08")
cranlogs::cran_downloads("tinycodet", from = "2024-04-01", to = "2024-05-08")
cranlogs::cran_downloads("tinycodet", from = "2024-03-01", to = "2024-05-08")
library(ggplot2)
data("mpg", package = "ggplot2")
my_aes_list <- list(
x = "cty",
y = "hwy",
col = "trans"
)
my_aes_list <- lapply(my_aes_list, as.formula) # change strings into formulas
rlang::global_entrace()
library(ggplot2)
data("mpg", package = "ggplot2")
my_aes_list <- list(
x = "cty",
y = "hwy",
col = "trans"
)
my_aes_list <- lapply(my_aes_list, as.formula) # change strings into formulas
rlang::last_trace()
library(ggplot2)
data("mpg", package = "ggplot2")
my_aes_list <- list(
x = "cty",
y = "hwy",
col = "trans"
)
library(ggplot2)
data("mpg", package = "ggplot2")
my_aes_list <- list(
x = ~ cty,
y = ~ hwy,
col = ~ trans
)
my_aes <- do.call(tinycodet::aes_pro, my_aes_list) # create aes
ggplot(mpg) + geom_point(my_aes) # plot
library(ggplot2)
data("mpg", package = "ggplot2")
my_aes_list <- list(
x = ~ cty,
y = ~ hwy,
col = ~ trans
)
my_aes <- do.call(tinycodet::aes_pro, my_aes_list) # create aes
ggplot(mpg) + geom_point(my_aes) # plot
library(tinycodet)
1 %d<% Inf
1 %d>% Inf
1 %d==% Inf
1 %d!=% Inf
Inf %d!=% Inf
Inf %d==% Inf
Inf %d>% Inf
Inf %d<% Inf
Inf %d<=% Inf
Inf %d>=% Inf
1 %d{}% c(-Inf, Inf)
Inf %d{}% c(-Inf, Inf)
Inf %d!{}% c(-Inf, Inf)
Rcpp::cppFunction(
"
LogicalVector rcpp_fixInf(
LogicalVector out, NumericVector x, NumericVector y
) {
NumericVector x2 = x;
NumericVector y2 = y;
if(x.length() > y.length()) {
y2 = rep_len(y, x.length());
x2 = x;
}
else if(y.length() > x.length()) {
x2 = rep_len(x, y.length());
y2 = y;
}
else {
x2 = x;
y2 = y;
}
R_xlen_t n = out.length();
bool checkInf;
for(int i = 0; i < n; ++i) {
checkInf = Rcpp::traits::is_infinite<REALSXP>(x2[i]) || Rcpp::traits::is_infinite<REALSXP>(y2[i]);
if(checkInf) {
out[i] = NA_LOGICAL;
}
}
}
"
)
cranlogs::cran_downloads("tinycodet", "last-week")
library(tinycodet)
x <- "hello"
stri_locate_ith(x, 1, "el")
stri_locate_ith(x, 1, regex = "el")
stri_locate_ith(x, 1, fixed = "el")
x <- matrix(sample(1:10), ncol =2)
y <- sample(1:10)
x == y
y == x
y != x
y != x
names(y) <- letters[1:10]
y != x
y == x
?devtools::create
packageDescription("ggplot2")
packageDescription("foo")
packageDescription
getNamespaceInfo
asNamespace
readRDS
readRDS(find.package("ggplot2"))
readRDS(file.path(find.package("ggplot2"), "DESCRIPTION"))
readRDS(file.path(find.package("ggplot2"), "Meta", "package.rds"))
?read.dcf
pkgpath <- find.package("ggplot2")
filepath <- system.file("ggplot2")
filepath <- system.file(package = "ggplot2")
filepath <- system.file("DESCRIPTION", package = "ggplot2")
read.dcf(filepath)
foo <- read.dcf(filepath)
View(foo)
nrow(foo)
class(foo)
xfun::loadable
?shQuote
cranlogs::cran_downloads("tinycodet", "last-month")
cranlogs::cran_downloads("tinycodet", "last-week")
cranlogs::cran_downloads("tinycodet")
cranlogs::cran_downloads("tinycodet", "last-week")
librar(stats4)
library(stats4)
stats4::plot
loadedNamespaces()
?plot
methods(plot)
library(tinycodet)
find.package()
?find.package()
?find.package("foo")
find.package("foo")
find.package("foo", quiet = TRUE)
find.package("foo", quiet = TRUE) |> length()
find.package("ggplot2", quiet = TRUE) |> length()
find.package
?system.file
?sys.source
system.file
?system.file
# Preview documentation ====
library(squarebrackets)
# Overview pages:
?squarebrackets::squarebrackets_help
?squarebrackets::squarebrackets_immutable_classes
?squarebrackets::squarebrackets_mutable_classes
?squarebrackets::squarebrackets_indx_args
?squarebrackets::squarebrackets_duplicates
?squarebrackets::squarebrackets_PassByReference
?squarebrackets::squarebrackets_inconveniences
?squarebrackets::class_mutable_atomic
# generic methods:
?squarebrackets::sb_x()
?squarebrackets::sb_rm()
?squarebrackets::sb_mod()
?squarebrackets::sb_set()
?squarebrackets::sb2_coe()
?squarebrackets::sb_before()
?squarebrackets::sb2_rec()
?squarebrackets::sb_setRename()
?squarebrackets::sb_currentBindings()
?squarebrackets::idx()
?squarebrackets::idx()
?data.table::alloc.col()
?data.table::cube()
?data.table::frankv()
?data.table::.Last.updated
makeActiveBinding("a", \(x)return(letters), environment)
makeActiveBinding("a", \(x)return(letters), environment())
a
x <- list(a=a)
a
x$a
library(squarebrackets)
library(ggplot2)
library(data.table)
loadNamespace("bench")
library(future.apply)
x.dims <- c(1900, 1900, 3) # leads to approx 1e7 elements
x.3d <- array(1:prod(x.dims), x.dims)
x.3d2 <- as.mutable_atomic(x.3d)
sel.rows <- 1:900
sel.lyrs <- c(TRUE, FALSE, TRUE)
basefun <- function(x, rows, lyrs, tf) {
x[rows, , lyrs] <- tf(x[rows, , lyrs])
return(x)
}
tf <- function(x) { return(-1 * x) }
bm.sb_tf.3d <- bench::mark(
"base [<-" = basefun(x.3d, sel.rows, sel.lyrs, tf = tf ),
"sb_set" =  sb_set.array(x.3d2, rcl = n(sel.rows, NULL, sel.lyrs), ckdup = FALSE, tf = tf),
"sb_mod" = sb_mod.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs), ckdup = FALSE, tf = tf),
check = FALSE,
min_iterations = 500
)
summary(bm.sb_tf.3d)
autoplot(bm.sb_tf.3d) + ggtitle("3d")
save(bm.sb_tf.3d, file = "bm.sb_tf.3d.RData")
getwd()
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/vignettes/articles")
save(bm.sb_tf.3d, file = "bm.sb_tf.3d.RData")
load("bm.sb_tf.matrix.RData")
bm.sb_tf.matrix
n <- 1e5
ncol <- 200 # times 2
chrmat <- matrix(
sample(letters, n*ncol, replace = TRUE), ncol = ncol
)
intmat <- matrix(
seq.int(n*ncol), ncol = ncol
)
x <- cbind(chrmat, intmat) |> as.data.frame()
colnames(x) <- make.names(colnames(x), unique = TRUE)
x2 <- data.table::as.data.table(x)
rm(list = c("chrmat", "intmat"))
sel.rows <- 1:1000
basefun <- function(x, rows, tf) {
x[rows, sapply(x, is.numeric)] <- lapply(x[rows, sapply(x, is.numeric)], tf)
return(x)
}
bm.sb_tf.df <- bench::mark(
"base [<-" = basefun(x, sel.rows, tf = \(x) -1 * x),
"sb_set" = sb_set.data.table(
x2, rows = sel.rows, vars = is.numeric, ckdup = FALSE, tf = \(x) -1 * x
),
"sb_mod" = sb_mod.data.frame(
x, rows = sel.rows, vars = is.numeric, ckdup = FALSE, tf = \(x) -1 * x
),
check = FALSE,
min_iterations = 500
)
bm.sb_tf.df <- bench::mark(
"base [<-" = basefun(x, sel.rows, tf = \(x) -1 * x),
"sb_set" = sb2_set.data.table(
x2, rows = sel.rows, vars = is.numeric, ckdup = FALSE, tf = \(x) -1 * x
),
"sb_mod" = sb2_mod.data.frame(
x, rows = sel.rows, vars = is.numeric, ckdup = FALSE, tf = \(x) -1 * x
),
check = FALSE,
min_iterations = 500
)
summary(bm.sb_tf.df)
autoplot(bm.sb_tf.df) + ggtitle("data.frame")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/vignettes/articles")
save(bm.sb_tf.df, file = "bm.sb_tf.df.RData")
autoplot(bm.sb_tf.df) + ggtitle("data.frame-like")
autoplot(bm.sb_tf.3d) + ggtitle("3d")
