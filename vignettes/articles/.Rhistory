geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 0.5)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 0.75)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 1.0)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
sqrt(3)
sqrt(3)/2
1+sqrt(3)/2
1-sqrt(3)/2
sqrt(3)/2
sqrt(3)/2 + 1
cubedat <- data.frame(
x = c(1-sqrt(3)/2, 1.0, 1.0, sqrt(3)/2 + 1),
y = c(1.5, 1.0, 1.0, 1.5)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- data.frame(
x = c(1-sqrt(3)/2, 1.0, 1.0, 1.0, 1.0, sqrt(3)/2 + 1),
y = c(1.5, 1.0, 1.0, 0, 0, 1.0, 1.5)
)
c(1-sqrt(3)/2, 1.0, 1.0, 1.0, 1.0, sqrt(3)/2 + 1)
x = c(1-sqrt(3)/2, 1.0, 1.0, 1.0, 1.0, sqrt(3)/2 + 1)
y = c(1.5, 1.0, 1.0, 0, 0, 1.0, 1.5)
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
cubedat
colnames(cubedat) <- c("x", "y")
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.5),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.0),
c(1+sqrt(3)/2, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y), color = "#87B13F", size = 1.2)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y), color = "#87B13F", linewidth = 1.2)
ggp
?names
x <- data.table::data.table(a = letters)
library(squarebrackets)
sb_set(x, row = 1, rp = "XXX")
sb_set(x, row = 1, rp = list("XXX"))
x
letters
x$b <- letters
address(x%b)
address(x$b)
address(letters)
address(x$a)
x <- data.frame(a = letters)
address(x$a)
library(tinycodet)
import_as(~ dt., "data.table")
dt.$as.data.table(x)
x <- dt.$as.data.table(x)
address(x$a)
x <- mutable_atomic(as.integer(1:20), dim = c(5, 4))
x
sb_set(x, 1, NA)
sb_set(x, 1, 1, rp = NA)
x
sb_set(x, 1, 1, rp = NaN)
x
x <- mutable_atomic(as.double(1:20), dim = c(5,4))
x
sb_set(x, 1, 1, rp = NaN)
x
sb_set(x, i=1, rp = NaN)
x
sb_set(x, i=1, rp = NaN)
x
sb_set(x, i = length(x), rp = NaN)
x
getOption("squarebrackets_protected")
getOption("squarebrackets.protected")
getOption("squarebrackets.protected") %in% squarebrackets:::.protected_addresses()
?.Platform
x
View(x)
View(dt.)
class(dt.)
?import_as
?import_inops
?import_data
?import_LL
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "goodpractice", "tinytest", "rhub", "V8")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# Render ReadMe, vignettes and site ====
pkgs <- c("dplyr", "powerjoin", "magrittr", "zeallot", "tidytable", "data.table",
"gamair", "rbenchmark", "xfun", "pkgdown", "servr")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
if(!requireNamespace("xfun"))install.packages("xfun")
# run readme & vignettes
xfun::Rscript_call(
rmarkdown::render,
list(input = "./squarebrackets/README.Rmd", output_format = "github_document")
)
path_vignettes <- normalizePath("./squarebrackets/vignettes/articles/")
files <- list.files(path =path_vignettes, pattern = ".Rmd")
temp.fun <- function(x) {
xfun::Rscript_call(
rmarkdown::render,
list(input = file.path(path_vignettes, x), output_format = "html_vignette")
)
}
lapply(files, temp.fun)
# check references:
data_reference_index_missing <- function(pkg = ".", depth = 1L) {
tinycodet::import_inops("magrittr")
tinycodet::import_inops("rlang")
pkg <- pkgdown:::as_pkgdown(pkg)
meta <- pkg$meta[["reference"]] %||% pkgdown:::default_reference_index(pkg)
if (length(meta) == 0) {
return(list())
}
# Cross-reference complete list of topics vs. topics found in index page
all_topics <- meta %>%
purrr::map(~ pkgdown:::select_topics(.$contents, pkg$topics)) %>%
purrr::reduce(union)
in_index <- seq_along(pkg$topics$name) %in% all_topics
missing <- !in_index & !pkg$topics$internal
pkg$topics$name[missing]
}
data_reference_index_missing("./squarebrackets")
pkgdown::template_reference("./squarebrackets")
# render site
pkgdown::build_site("./squarebrackets")
# check references:
data_reference_index_missing <- function(pkg = ".", depth = 1L) {
tinycodet::import_inops("magrittr")
tinycodet::import_inops("rlang")
pkg <- pkgdown:::as_pkgdown(pkg)
meta <- pkg$meta[["reference"]] %||% pkgdown:::default_reference_index(pkg)
if (length(meta) == 0) {
return(list())
}
# Cross-reference complete list of topics vs. topics found in index page
all_topics <- meta %>%
purrr::map(~ pkgdown:::select_topics(.$contents, pkg$topics)) %>%
purrr::reduce(union)
in_index <- seq_along(pkg$topics$name) %in% all_topics
missing <- !in_index & !pkg$topics$internal
pkg$topics$name[missing]
}
data_reference_index_missing("./squarebrackets")
pkgdown::template_reference("./squarebrackets")
# render site
pkgdown::build_site("./squarebrackets")
?comment
x <- matrix(1:12, 3, 4)
comment(x) <- c("This is my very important data from experiment #0234",
"Jun 5, 1998")
x
comment(x)
x
View(x)
?data.table::comment
x <- data.table::data.table(
a = letters, b = 1:26
)
x
comment(x$a) <- "hello"
View(x)
x
comment(x)
comment(x$a4)
comment(x$a)
?labels
library(squarebrackets)
# setapply vs apply ====
n <- 1000
x <- mutable_atomic(seq_len(n^2), dim = c(n,n))
# setapply vs apply ====
n <- 1000
x <- mutable_atomic(seq_len(n^2), dim = c(n,n))
foo <- bench::mark(
sb = setapply(x, 1, rev),
base = apply(x, 1, rev),
min_iterations = 500,
check = FALSE
)
foo # wow, barely any difference. Well done Tony! XD
foo
ggplot2::autoplot(foo)
pryr::object_size(x)
# setapply vs apply ====
n <- 2000
x <- mutable_atomic(seq_len(n^2), dim = c(n,n))
foo <- bench::mark(
sb = setapply(x, 1, rev), # 2-3 times faster than apply!
base = apply(x, 1, rev),
min_iterations = 500,
check = FALSE
)
foo
ggplot2::autoplot(foo)
x <- mutable_atomic(1:1e6)
bm.setv <- bench::mark(
"base `x[which(x==v)] <- rp`" = x[which(x==10)] <- -10
"squarebrackets::ma_setv" = ma_setv(x, 10, -10, NA.safety = FALSE),
x <- mutable_atomic(1:1e6)
bm.setv <- bench::mark(
"base `x[which(x==v)] <- rp`" = x[which(x==10)] <- -10,
"squarebrackets::ma_setv" = ma_setv(x, 10, -10, NA.safety = FALSE),
"collapse::setv" = collapse::setv(x, 10, -10),
min_iterations = 500,
check = FALSE
)
bm.setv
ggplot2::autoplot(bm.setv)
?bench::mark
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/vignettes/articles")
save(bm.setv, file = "bm.setv.RData")
n <- 2000
x <- mutable_atomic(seq_len(n^2), dim = c(n,n))
bm.setapply <- bench::mark(
sb = setapply(x, 1, rev),
base = apply(x, 1, rev),
min_iterations = 500,
check = FALSE
)
bm.setapply
ggplot2::autoplot(bm.setapply)
n <- 2000
x <- mutable_atomic(seq_len(n^2), dim = c(n,n))
bm.setapply <- bench::mark(
sb = setapply(x, 1, rev),
base = apply(x, 1, rev),
min_iterations = 500,
check = FALSE
)
bm.setapply
ggplot2::autoplot(bm.setapply)
n <- 2000
x <- mutable_atomic(seq_len(n^2), dim = c(n,n))
bm.setapply <- bench::mark(
sb = setapply(x, 1, rev),
base = apply(x, 1, rev),
min_iterations = 500,
check = FALSE
)
bm.setapply
ggplot2::autoplot(bm.setapply)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/vignettes/articles")
save(bm.setv, file = "bm.setapply.RData")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/vignettes/articles")
library(squarebrackets)
library(ggplot2)
library(data.table)
n <- 5e3
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, NA), n, TRUE)
sel.rows <- 1:100
sel.cols <- rep(sample(letters[1:13]), 10)
foo <- cbind(
match_all = colnames(x.mat)[match_all(sel.cols, colnames(x.mat))],
lapply = colnames(x.mat)[lapply(sel.cols, \(i) which(colnames(x.mat) == i)) |> unlist()]
)
all(apply(foo, 1, \(x)x[1] == x[2]))
bm.sb_x.matrix <- bench::mark(
"squarebrackets" = sb_x.matrix(x.mat, sel.rows, sel.cols),
"base R" = x.mat[sel.rows, lapply(sel.cols, \(i) which(colnames(x.mat) == i)) |> unlist(), drop = FALSE],
min_iterations = 500
)
bm.sb_x.matrix
summary(bm.sb_x.matrix)
autoplot(bm.sb_x.matrix) + ggtitle("matrix")
x.dims <- c(5000, 2000, 4)
x.3d <- array(1:prod(x.dims), x.dims)
sel.rows <- 1:900
sel.lyrs <- c(TRUE, FALSE, TRUE, FALSE)
all(
sb_x.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs)) ==
abind::asub(x.3d, idx = list(sel.rows, sel.lyrs), dims = c(1,3))
)
bm.sb_x.3d <- bench::mark(
"squarebrackets" =  sb_x.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs)),
"base R + abind" = abind::asub(x.3d, idx = list(sel.rows, sel.lyrs), dims = c(1,3)),
min_iterations = 500
)
summary(bm.sb_x.3d)
bm.sb_x.3d <- bench::mark(
"squarebrackets" =  sb_x.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs)),
"base R + abind" = abind::asub(x.3d, idx = list(sel.rows, sel.lyrs), dims = c(1,3)),
min_iterations = 500
)
summary(bm.sb_x.3d)
autoplot(bm.sb_x.3d) + ggtitle("3d")
n <- 1e5
chrmat <- matrix(
sample(letters, n*400, replace = TRUE), ncol = 400
)
intmat <- matrix(
seq.int(n*400), ncol = 400
)
x <- cbind(chrmat, intmat) |> as.data.frame()
rm(list = c("chrmat", "intmat"))
colnames(x) <- make.names(colnames(x), unique = TRUE)
sel.cols <- rep(sample(names(x), 10), 4)
sel.rows <- 1:1000
bm.sb_x.df <- bench::mark(
"squarebrackets" = sb2_x.data.frame(x, sel.rows, sel.cols),
"base R" = x[sel.rows, match(sel.cols, names(x)), drop = FALSE],
min_iterations = 500
)
summary(bm.sb_x.df)
autoplot(bm.sb_x.df) + ggtitle("data.frame")
x <- as.data.table(x)
tempfun <- function(x, i, j) {
x <- collapse::ss(x, i, j, check = TRUE)
names(x) <- make.names(names(x), unique = TRUE)
return(x)
}
bm.sb_x.dt <- bench::mark(
"squarebrackets" = sb2_x.data.frame(x, sel.rows, sel.cols),
"data.table + collapse" = tempfun(x, sel.rows, match(sel.cols, names(x))),
min_iterations = 500
)
summary(bm.sb_x.dt)
autoplot(bm.sb_x.dt) + ggtitle("data.table")
