reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
library(subsets)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rep(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
sub2ind_rcpp <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
library(subsets)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n - 1), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out';
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_sugar(IntegerVector x, int times) {
return rep(x, times);
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
"
)
x <- seq_len(1e6)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100)
)
foo
ggplot2::autoplot(foo)
x <- seq_len(1e5)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100),
min_iterations = 100
)
x <- seq_len(1e5)
foo <- bench::mark(
rcpp_rep_int(x, 100),
rcpp_rep_sugar(x, 100),
min_iterations = 100
)
foo
ggplot2::autoplot(foo)
Rcpp::sourceCpp(
"
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
// [[Rcpp::export]]
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rcpp_rep_int(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
Rcpp::sourceCpp(
code =  "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerVector rcpp_rep_int(IntegerVector x, int times) {
R_xlen_t n = x.length();
IntegerVector out(n * times);
for (int i = 0; i < times; ++i) {
Range myrng = Range(n * i, n * (i + 1));
out[myrng] = x;
}
return out;
}
// [[Rcpp::export]]
IntegerVector rcpp_sub2ind2(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
coord = rcpp_rep_int(rep_each(temp, reps_each[j]), reps_whole[j]);
out = out + (coord - 1) * myprod; // final addition
}
}
return(out);
}
"
)
sub2ind_rcpp <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp)
sub2ind_rcpp2 <- function(sub, x.dim) {
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
ind2 <- rcpp_sub2ind2(sub, total, reps_each, reps_whole, x.dim, cumprod(x.dim))
return(ind2)
}
codetools::checkUsage(sub2ind_rcpp2)
library(subsets)
n <- 3000
dims <- x.dim <- c(n+1, n+1)
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
lst <- sub <- list(seq_len(n - 1), rev(seq_len(n/2)))
myxp <- sub2ind_rcpp(lst, dims)
myxp2 <- sub2ind_rcpp2(lst, dims)
s2c <- coord2ind(sub2coord(lst, dims), dims)
all(myxp == s2c)
all(myxp2 == s2c)
foo <- bench::mark(
# control = list(seq_len(n), rev(seq_len(n/2)), seq_len(n)),
coord2ind(sub2coord(lst, dims), dims),
sub2ind_rcpp(sub, dims),
sub2ind_rcpp2(sub, dims),
min_iterations = 200,
check = FALSE
)
foo
ggplot2::autoplot(foo)
198-150
48*5
350-250
100*12
1200+240
1440+1500
8*6
81*3
27*3
library(bench)
library(ggplot2)
library(patchwork)
plotfun <- function(title1, bm1, title2, bm2) {
plotdat1 <- bm1 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat1$expression <- paste(
plotdat$expression, "(", as.character(plotdat$mem_alloc), ")"
)
p1 <- ggplot(plotdat, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title1)
plotdat2 <- bm2 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat2$expression <- paste(
plotdat$expression, "(", as.character(plotdat$mem_alloc), ")"
)
p2 <- ggplot(plotdat, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title2)
combined <- p1 + p2 & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
}
load("bm.sb_tf.matrix.RData")
setwd("D:/D Desktop/Publications/R package subsets/subsets/vignettes/articles")
load("bm.sb_tf.matrix.RData")
summary(bm.sb_tf.matrix)
load("bm.sb_tf.3d.RData")
summary(bm.sb_tf.3d)
plotfun("Matrix", bm.sb_tf.matrix, "Array (3D)", bm.sb_tf.3d)
plotfun <- function(title1, bm1, title2, bm2) {
plotdat1 <- bm1 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat1$expression <- paste(
plotdat1$expression,
"\n (mem_alloc = ", as.character(plotdat1$mem_alloc), ")"
)
p1 <- ggplot(plotdat1, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title1)
plotdat2 <- bm2 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat2$expression <- paste(
plotdat2$expression,
"\n (mem_alloc = ", as.character(plotdat2$mem_alloc), ")"
)
p2 <- ggplot(plotdat2, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title2)
combined <- p1 + p2 & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
}
plotfun("Matrix", bm.sb_tf.matrix, "Array (3D)", bm.sb_tf.3d)
library(subsets)
plotfun <- function(title1, bm1, title2, bm2) {
plotdat1 <- bm1 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat1$expression <- paste(
plotdat1$expression,
"\n (mem_alloc = ", as.character(plotdat1$mem_alloc), ")"
)
p1 <- ggplot(plotdat1, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title1)
plotdat2 <- bm2 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat2$expression <- paste(
plotdat2$expression,
"\n (mem_alloc = ", as.character(plotdat2$mem_alloc), ")"
)
p2 <- ggplot(plotdat2, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title2)
combined <- p1 + p2 & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
}
plotfun("Matrix", bm.sb_tf.matrix, "Array (3D)", bm.sb_tf.3d)
plotfun <- function(title1, bm1, title2, bm2) {
plotdat1 <- bm1 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat1$expression <- paste(
plotdat1$expression,
"\n (", as.character(plotdat1$mem_alloc), ")"
)
p1 <- ggplot(plotdat1, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title1)
plotdat2 <- bm2 |> tidyr::unnest(cols = c("time", "gc", "mem_alloc"))
plotdat2$expression <- paste(
plotdat2$expression,
"\n (", as.character(plotdat2$mem_alloc), ")"
)
p2 <- ggplot(plotdat2, aes_pro(x = ~ time, y = ~ expression, color = ~ gc)) +
ggbeeswarm::geom_quasirandom() + ggtitle(title2)
combined <- p1 + p2 & theme(legend.position = "bottom")
combined + plot_layout(guides = "collect")
}
plotfun("Matrix", bm.sb_tf.matrix, "Array (3D)", bm.sb_tf.3d)
load("bm.sb_tf.df.RData")
summary(bm.sb_tf.df)
load("bm.sb_tf.dt.RData")
summary(bm.sb_tf.dt)
plotfun("data.frame", bm.sb_tf.df, "data.table", bm.sb_tf.dt)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/vignettes/articles")
# speed tests
library(squarebrackets)
library(ggplot2)
library(data.table)
# atomic ====
n <- 5e3
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, NA), n, TRUE)
sel.rows <- 1:100
sel.cols <- rep(sample(letters[1:13]), 10)
foo <- cbind(
match_all = colnames(x.mat)[match_all(sel.cols, colnames(x.mat))],
lapply = colnames(x.mat)[lapply(sel.cols, \(i) which(colnames(x.mat) == i)) |> unlist()]
)
all(apply(foo, 1, \(x)x[1] == x[2]))
bm.sb_x.matrix <- bench::mark(
"squarebrackets" = sb_x.matrix(x.mat, sel.rows, sel.cols),
"base R" = x.mat[sel.rows, lapply(sel.cols, \(i) which(colnames(x.mat) == i)) |> unlist(), drop = FALSE],
min_iterations = 500
)
bm.sb_x.matrix
summary(bm.sb_x.matrix)
autoplot(bm.sb_x.matrix) + ggtitle("matrix")
save(bm.sb_x.matrix, file = "bm.sb_x.matrix.RData")
x.dims <- c(5000, 2000, 4)
x.3d <- array(1:prod(x.dims), x.dims)
sel.rows <- 1:900
sel.lyrs <- c(TRUE, FALSE, TRUE, FALSE)
all(
sb_x.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs)) ==
abind::asub(x.3d, idx = list(sel.rows, sel.lyrs), dims = c(1,3))
)
bm.sb_x.3d <- bench::mark(
"squarebrackets" =  sb_x.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs)),
"base R + abind" = abind::asub(x.3d, idx = list(sel.rows, sel.lyrs), dims = c(1,3)),
min_iterations = 500
)
summary(bm.sb_x.3d)
autoplot(bm.sb_x.3d) + ggtitle("3d")
save(bm.sb_x.3d, file = "bm.sb_x.3d.RData")
#
# x.dims <- c(1000, 1000, 4, 2)
# x.4d <- array(1:prod(x.dims), x.dims)
# sel.rows <- 1:900
# sel.lyrs <- c(TRUE, FALSE, TRUE, FALSE)
# all(
#   sb_x.array(x.4d, idx = list(sel.rows, sel.lyrs), dims = c(1,3)) ==
#     abind::asub(x.4d, idx = list(sel.rows, sel.lyrs), dims = c(1,3))
# )
# bm.sb_x.4d <- bench::mark(
#   "squarebrackets" =  sb_x.array(x.4d, idx = list(sel.rows, sel.lyrs), dims = c(1,3)),
#   "base R + abind" = abind::asub(x.4d, idx = list(sel.rows, sel.lyrs), dims = c(1,3)),
#   min_iterations = 500
# )
# summary(bm.sb_x.4d)
# autoplot(bm.sb_x.4d) + ggtitle("4d")
# save(bm.sb_x.4d, file = "bm.sb_x.4d.RData")
# data.frame-like ====
n <- 1e5
chrmat <- matrix(
sample(letters, n*400, replace = TRUE), ncol = 400
)
intmat <- matrix(
seq.int(n*400), ncol = 400
)
x <- cbind(chrmat, intmat) |> as.data.frame()
rm(list = c("chrmat", "intmat"))
colnames(x) <- make.names(colnames(x), unique = TRUE)
sel.cols <- rep(sample(names(x), 10), 4)
sel.rows <- 1:1000
bm.sb_x.df <- bench::mark(
"squarebrackets" = sb_x.data.frame(x, sel.rows, sel.cols),
"base R" = x[sel.rows, match(sel.cols, names(x)), drop = FALSE],
min_iterations = 500
)
summary(bm.sb_x.df)
autoplot(bm.sb_x.df) + ggtitle("data.frame")
save(bm.sb_x.df, file = "bm.sb_x.df.RData")
x <- as.data.table(x)
tempfun <- function(x, i, j) {
x <- collapse::ss(x, i, j, check = TRUE)
names(x) <- make.names(names(x), unique = TRUE)
return(x)
}
bm.sb_x.dt <- bench::mark(
"squarebrackets" = sb_x.data.frame(x, sel.rows, sel.cols),
"data.table + collapse" = tempfun(x, sel.rows, match(sel.cols, names(x))),
min_iterations = 500
)
summary(bm.sb_x.dt)
autoplot(bm.sb_x.dt) + ggtitle("data.table")
print(bm.sb_x.dt)
save(bm.sb_x.dt, file = "bm.sb_x.dt.RData")
bm.sb_x.dt <- bench::mark(
"squarebrackets" = sb_x.data.frame(x, sel.rows, sel.cols),
"data.table + collapse" = tempfun(x, sel.rows, match(sel.cols, names(x))),
min_iterations = 500
)
summary(bm.sb_x.dt)
autoplot(bm.sb_x.dt) + ggtitle("data.table")
print(bm.sb_x.dt)
save(bm.sb_x.dt, file = "bm.sb_x.dt.RData")
getwd()
