// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const double myprod, NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
double temp;
for(R_xlen_t i = start; i <= end; ++i) {
temp = out[i] + rp[counter_rp] * myprod;
out[i] = temp;
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int i = 1; i < ndim; ++i) {
double myprod = dimcumprod[i - 1];
NumericVector temp = lst[i];
for(R_xlen_t i = 0; i < reps_whole[j]; ++i) {
rcpp_sub2ind_setrange(out, n * i, n * (i + 1) - 1, reps_each[i], myprod, temp);
}
}
}
return(out);
}
"
)
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const double myprod, NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
double temp;
for(R_xlen_t i = start; i <= end; ++i) {
temp = out[i] + rp[counter_rp] * myprod;
out[i] = temp;
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
double myprod = dimcumprod[j - 1];
NumericVector temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(R_xlen_t i = 0; i < reps_whole[j]; ++i) {
rcpp_sub2ind_setrange(out, n * i, n * (i + 1) - 1, reps_each[j], myprod, temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- out[20:29] * -10
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, 1.0, rp)
print(out)
x.dim <- c(20, 20, 3)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:20, 1:20, 1:2)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
starts <- c(0, cumprod(ns))[1:n]
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
all(out1 == (out2 - 420))
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const double myprod, NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
double temp;
for(R_xlen_t i = start; i <= end; ++i) {
temp = out[i] + rp[counter_rp] * myprod;
out[i] = temp;
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
Rcpp::NumericVector coord(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
double myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(R_xlen_t i = 0; i < reps_whole[j]; ++i) {
rcpp_sub2ind_setrange(out, n * i, n * (i + 1) - 1, reps_each[j], myprod, temp)
}
}
}
return(out);
}
"
)
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const double myprod, NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
double temp;
for(R_xlen_t i = start; i <= end; ++i) {
temp = out[i] + rp[counter_rp] * myprod;
out[i] = temp;
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
Rcpp::NumericVector coord(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
double myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(R_xlen_t i = 0; i < reps_whole[j]; ++i) {
rcpp_sub2ind_setrange(out, n * i, n * (i + 1) - 1, reps_each[j], myprod, temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- out[20:29] * -10
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, 1.0, rp)
print(out)
x.dim <- c(20, 20, 3)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:20, 1:20, 1:2)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
starts <- c(0, cumprod(ns))[1:n]
ends <- cumprod(ns) - 1
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == (out2 - 420))
foo <- bench::mark(
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general2(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500,
check = FALSE
)
foo <- bench::mark(
rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500,
check = FALSE
)
foo
ggplot2::autoplot(foo)
x.dim <- c(200, 200, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
starts <- c(0, cumprod(ns))[1:n]
ends <- cumprod(ns) - 1
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == (out2 - 420))
cbind(out1, out2) # out2 increases way too slow; why?
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const double myprod, NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
double temp;
for(R_xlen_t i = start; i <= end; ++i) {
temp = out[i] + (rp[counter_rp] - 1) * myprod;
out[i] = temp;
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
Rcpp::NumericVector coord(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
double myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(R_xlen_t i = 0; i < reps_whole[j]; ++i) {
rcpp_sub2ind_setrange(out, n * i, n * (i + 1) - 1, reps_each[j], myprod, temp);
}
}
}
return(out);
}
"
)
x.dim <- c(200, 200, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
starts <- c(0, cumprod(ns))[1:n]
ends <- cumprod(ns) - 1
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == (out2 - 420))
cbind(out1, out2) # out2 increases way too slow; why?
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
foo <- bench::mark(
rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500,
check = FALSE
)
foo
ggplot2::autoplot(foo)
foo <- bench::mark(
old = rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
new = rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
devtools::build_manual(
"./squarebrackets", "./squarebrackets"
) # if this fails...:
# codetools checks:
codetools::checkUsagePackage("squarebrackets")
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# codetools checks:
codetools::checkUsagePackage("squarebrackets")
ns <- loadNamespace("squarebrackets") |> as.list(all.names = TRUE)
ns <- ns[!stringi::stri_detect(names(ns), fixed = ".__")]
checks <- sapply(ns, \(x) any(deparse(x) |> stringi::stri_detect(regex = "return")))
names(checks)[!checks] |> sort()
# if(!require(tinytest)){install.packages("tinytest")}
# tinytest::setup_tinytest("./squarebrackets")
# check package in general:
# Note: edit .Rbuildignore to make it ignore things R CMD CHECK should not check
devtools::run_examples("./squarebrackets", fresh = TRUE)
# tinytest::run_test_dir("./squarebrackets/inst/tinytest/generic2")
foo <- rcmdcheck::rcmdcheck("./squarebrackets")
foo
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/src_related")
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
tempfun2 <- function(x, sub, dims, rp) {
x <- data.table::copy(x)
sb_set.array(x, sub, dims, rp = rp)
return(x)
}
tempfun1 <- function(x, sub, rp) {
ind <- sub2ind(sub, dim(x))
x[ind] <- rp
return(x)
}
rp.lst <- list(
NA,
-1000L,
-Inf,
"NA; NaN; Inf; -Inf",
as.complex(-1000),
as.raw(0)
)
generate_data <- function(x.len) {
list(
sample(c(TRUE, FALSE, NA), x.len, TRUE),
as.integer(sample(c(1:x.len - 1, NA))),
sample(c(rnorm(x.len - 4), NA, NaN, Inf, -Inf), x.len),
sample(c(stringi::stri_rand_strings(x.len - 1, 26), NA)),
as.complex(sample(c(rnorm(x.len - 1), NA))),
as.raw(sample(1:100, x.len, TRUE))
)
}
x.dim <- sample(1:iDim)
iDim = 2
sample(1:iDim)
x.dim <- sample(1:10, size = iDim)
x.dim <- sample(1:10, size = iDim)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
x <- as.mutable_atomic(array(x.data[[j]], x.dim))
x.dim <- sample(1:10, size = iDim)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
iType = 1
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
expect_equal(
tempfun1(x, sub, rp.lst[[iType]]), tempfun2(x, sub, dims, rp.lst[[iType]])
) |> errorfun() # test indexing & atomic type recognition
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
for(iSample in 1:10) {
for(iDim in 2:6) {
x.dim <- sample(1:10, size = iDim)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
expect_equal(
tempfun1(x, sub, rp.lst[[iType]]), tempfun2(x, sub, dims, rp.lst[[iType]])
) |> errorfun() # test indexing & atomic type recognition
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
}
}
}
iSample
iDim
iType
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
View(x)
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
expect_equal(
tempfun1(x, sub, rp.lst[[iType]]), tempfun2(x, sub, dims, rp.lst[[iType]])
) |> errorfun() # test indexing & atomic type recognition
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
generate_data <- function(x.len) {
list(
sample(c(TRUE, FALSE, NA), x.len, TRUE),
as.integer(sample(c(1:x.len - 1, NA))),
sample(c(rnorm(x.len), NA, NaN, Inf, -Inf), x.len),
sample(c(stringi::stri_rand_strings(x.len, 26), NA)),
as.complex(sample(c(rnorm(x.len - 1), NA))),
as.raw(sample(1:100, x.len, TRUE))
)
}
n <- 5
for(iSample in 1:10) {
for(iDim in 2:6) {
x.dim <- sample(1:10, size = iDim)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
expect_equal(
tempfun1(x, sub, rp.lst[[iType]]), tempfun2(x, sub, dims, rp.lst[[iType]])
) |> errorfun() # test indexing & atomic type recognition
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
}
}
}
for(iSample in 1:10) {
for(iDim in 2:7) {
x.dim <- sample(1:10, size = iDim)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
expect_equal(
tempfun1(x, sub, rp.lst[[iType]]), tempfun2(x, sub, dims, rp.lst[[iType]])
) |> errorfun() # test indexing & atomic type recognition
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
}
}
}
