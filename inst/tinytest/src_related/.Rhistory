replacement = c("plus", "double", "double", "double"),
vectorize_all = FALSE
)
txt_plus <- stringi::stri_replace_all(
txt_plus,
fixed = c("<, additional_args>"),
replacement = c(""),
vectorize_all = FALSE
)
specify_input <- "
double *px = REAL(x);
double *py = REAL(y);
"
specify_output <- "
SEXP out = PROTECT(Rf_allocVector(REALSXP, n));
double *pout = REAL(out);
"
do_something <- "
tempout = px[flatind_x] + py[flatind_y];
"
txt_plus <- stringi::stri_replace_all(
txt_plus,
fixed = c("<specify_input>", "<specify_output>", "<do_something>"),
replacement = c(specify_input, specify_output, do_something),
vectorize_all = FALSE
)
txt_plus <- stringi::stri_c(header, txt_plus, collapse = "\n\n")
cat(txt_plus)
Rcpp::sourceCpp(code = txt_plus)
x <- array(1:27, c(3,3,3))
y <- array(1, c(1,1,1))
x + y
dimcumprod_x <- cumprod(dim(x))
dimcumprod_y <- cumprod(dim(y))
x <- array(1:27, c(3,3,3))
y <- array(1, c(1,1,1))
x + y
dimcumprod_x <- cumprod(dim(x))
dimcumprod_y <- cumprod(dim(y))
.rcpp_plus_double_double_double_3d(
x, y, 1:3, 1:3, 1:3, rep(1, 3), rep(1, 3), rep(1, 3),
dimcumprod_x, dimcumprod_y
)
ind_y <- rep(1L, 3)
ind_x <- as.integer(1:3)
ind_y <- rep(1L, 3)
x <- array(1:27, c(3,3,3))
y <- array(1, c(1,1,1))
x + y
dimcumprod_x <- cumprod(dim(x))
dimcumprod_y <- cumprod(dim(y))
ind_x <- as.integer(1:3)
ind_y <- rep(1L, 3)
.rcpp_plus_double_double_double_3d(
x, y, ind_x, ind_x, ind_x, ind_y, ind_y, ind_y,
dimcumprod_x, dimcumprod_y
)
x <- array(1.1:27.1, c(3,3,3))
y <- array(1.1, c(1,1,1))
x <- array(1.1:27.1, c(3,3,3))
y <- array(1.1, c(1,1,1))
x + y
dimcumprod_x <- cumprod(dim(x))
dimcumprod_y <- cumprod(dim(y))
ind_x <- as.integer(1:3)
ind_y <- rep(1L, 3)
.rcpp_plus_double_double_double_3d(
x, y, ind_x, ind_x, ind_x, ind_y, ind_y, ind_y,
dimcumprod_x, dimcumprod_y
)
x + drop(y)
expected <- x + drop(y)
expected <- x + drop(y) |> as.vector()
out <- .rcpp_plus_double_double_double_3d(
x, y, ind_x, ind_x, ind_x, ind_y, ind_y, ind_y,
dimcumprod_x, dimcumprod_y
)
tinytest::expect_equal(expected, out)
expected <- x + drop(y) |> as.vector()
expected
expected <- x + drop(y) |> as.vector()
expected <- as.vector(x + drop(y))
out <- .rcpp_plus_double_double_double_3d(
x, y, ind_x, ind_x, ind_x, ind_y, ind_y, ind_y,
dimcumprod_x, dimcumprod_y
)
tinytest::expect_equal(expected, out)
libray(rray)
install.packages("rray")
remotes::install_github("r-lib/rray")
as.roman("III")
x <- as.roman("III")
as.integer(x)
is.integer(x)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# Render ReadMe, vignettes and site ====
pkgs <- c("dplyr", "powerjoin", "magrittr", "zeallot", "tidytable", "data.table",
"gamair", "rbenchmark", "xfun", "pkgdown", "servr")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
# check references:
data_reference_index_missing <- function(pkg = ".", depth = 1L) {
tinycodet::import_inops("magrittr")
tinycodet::import_inops("rlang")
pkg <- pkgdown:::as_pkgdown(pkg)
meta <- pkg$meta[["reference"]] %||% pkgdown:::default_reference_index(pkg)
if (length(meta) == 0) {
return(list())
}
# Cross-reference complete list of topics vs. topics found in index page
all_topics <- meta %>%
purrr::map(~ pkgdown:::select_topics(.$contents, pkg$topics)) %>%
purrr::reduce(union)
in_index <- seq_along(pkg$topics$name) %in% all_topics
missing <- !in_index & !pkg$topics$internal
pkg$topics$name[missing]
}
data_reference_index_missing("./squarebrackets")
pkgdown::template_reference("./squarebrackets")
# render site
pkgdown::build_site("./squarebrackets")
setwd("~/")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/src_related")
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp)
return(x)
}
tempfun2 <- function(x, sub, dims, rp) {
ind <- idx.array(x, sub, dims)
x[ind] <- rp
return(x)
}
rp.lst <- list(
NA,
-1000L,
-Inf,
"NA; NaN; Inf; -Inf",
as.complex(-1000),
as.raw(0)
)
generate_data <- function(x.len) {
list(
sample(c(TRUE, FALSE, NA), x.len, TRUE),
as.integer(sample(c(1:x.len - 1, NA))),
sample(c(rnorm(x.len), NA, NaN, Inf, -Inf), x.len),
sample(c(stringi::stri_rand_strings(x.len, 26), NA)),
as.complex(sample(c(rnorm(x.len - 1), NA))),
as.raw(sample(1:100, x.len, TRUE))
)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
out[[i]] <- tempfun1(x, sub, rp.lst[[iType]])
expected[[i]] <- tempfun2(x, sub, dims, rp.lst[[iType]])
x <- data.table::copy(x)
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
rp <- rep(rp.lst[[iType]], prod(lengths(sub)))
out[[i]] <- tempfun1(x, sub, rp)
expected[[i]] <- tempfun2(x, sub, dims, rp)
x <- data.table::copy(x)
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_16d(x, rp, sub, dim(x))
return(x)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
out[[i]] <- tempfun1(x, sub, rp.lst[[iType]])
expected[[i]] <- tempfun2(x, sub, dims, rp.lst[[iType]])
x <- data.table::copy(x)
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_16d(x, rp, sub, dim(x))
return(x)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
rp <- rep(rp.lst[[iType]], prod(lengths(sub)))
out[[i]] <- tempfun1(x, sub, rp)
expected[[i]] <- tempfun2(x, sub, dims, rp)
x <- data.table::copy(x)
x2 <- x
sb_set.array(x, sub, dims, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
tempfun2 <- function(x, sub, dims, rp) {
ind <- idx.array(x, sub, dims)
x[ind] <- rp
return(x)
}
rp.lst <- list(
NA,
-1000L,
-Inf,
"NA; NaN; Inf; -Inf",
as.complex(-1000),
as.raw(0)
)
generate_data <- function(x.len) {
list(
sample(c(TRUE, FALSE, NA), x.len, TRUE),
as.integer(sample(c(1:x.len - 1, NA))),
sample(c(rnorm(x.len), NA, NaN, Inf, -Inf), x.len),
sample(c(stringi::stri_rand_strings(x.len, 26), NA)),
as.complex(sample(c(rnorm(x.len - 1), NA))),
as.raw(sample(1:100, x.len, TRUE))
)
}
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp)
return(x)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
out[[i]] <- tempfun1(x, sub, rp.lst[[iType]])
expected[[i]] <- tempfun2(x, sub, dims, rp.lst[[iType]])
x <- data.table::copy(x)
x2 <- x
tempfun1(x, sub, rp = rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp)
return(x)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
out[[i]] <- tempfun1(x, sub, rp.lst[[iType]])
expected[[i]] <- tempfun2(x, sub, dims, rp.lst[[iType]])
x <- data.table::copy(x)
x2 <- x
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
rp <- rep(rp.lst[[iType]], prod(lengths(sub)))
out[[i]] <- tempfun1(x, sub, rp)
expected[[i]] <- tempfun2(x, sub, dims, rp)
x <- data.table::copy(x)
x2 <- x
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp)
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
tempfun2 <- function(x, sub, dims, rp) {
ind <- idx.array(x, sub, dims)
x[ind] <- rp
return(x)
}
rp.lst <- list(
NA,
-1000L,
-Inf,
"NA; NaN; Inf; -Inf",
as.complex(-1000),
as.raw(0)
)
generate_data <- function(x.len) {
list(
sample(c(TRUE, FALSE, NA), x.len, TRUE),
as.integer(sample(c(1:x.len - 1, NA))),
sample(c(rnorm(x.len), NA, NaN, Inf, -Inf), x.len),
sample(c(stringi::stri_rand_strings(x.len, 26), NA)),
as.complex(sample(c(rnorm(x.len - 1), NA))),
as.raw(sample(1:100, x.len, TRUE))
)
}
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp)
return(x)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
out[[i]] <- tempfun1(x, sub, rp.lst[[iType]])
expected[[i]] <- tempfun2(x, sub, dims, rp.lst[[iType]])
x <- data.table::copy(x)
x2 <- x
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp.lst[[iType]])
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
rp <- rep(rp.lst[[iType]], prod(lengths(sub)))
out[[i]] <- tempfun1(x, sub, rp)
expected[[i]] <- tempfun2(x, sub, dims, rp)
x <- data.table::copy(x)
x2 <- x
squarebrackets:::.rcpp_set_array_general_atomic(x, sub, dim(x), rp)
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_16d(x, rp, sub, dim(x))
return(x)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
out[[i]] <- tempfun1(x, sub, rp.lst[[iType]])
expected[[i]] <- tempfun2(x, sub, dims, rp.lst[[iType]])
x <- data.table::copy(x)
x2 <- x
squarebrackets:::.rcpp_set_array_16d(x, rp.lst[[iType]], sub, dim(x))
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
tempfun1 <- function(x, sub, rp) {
x <- data.table::copy(x)
squarebrackets:::.rcpp_set_array_16d(x, rp, sub, dim(x))
return(x)
}
expected <- out <- list()
i <- 1
for(iSample in 1:10) {
for(iDim in 2:8) {
x.dim <- sample(1:6, size = iDim, replace = TRUE)
x.len <- prod(x.dim)
x.data <- generate_data(x.len)
for(iType in seq_along(x.data)) {
x <- as.mutable_atomic(array(x.data[[iType]], x.dim))
sub <- lapply(x.dim, \(x) sample(1:x, max(c(1, x)), FALSE))
dims <- 1:length(x.dim)
rp <- rep(rp.lst[[iType]], prod(lengths(sub)))
out[[i]] <- tempfun1(x, sub, rp)
expected[[i]] <- tempfun2(x, sub, dims, rp)
x <- data.table::copy(x)
x2 <- x
squarebrackets:::.rcpp_set_array_16d(x, rp, sub, dim(x))
expect_equal(x,x2) |> errorfun() # test indexing & pass-by-reference
enumerate <- enumerate + 2
i <- i + 1
}
}
}
expect_equal(expected, out)
