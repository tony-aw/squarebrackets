}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- as.numeric(-1:-10)
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, rp)
print(out)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 resets after each reps_each[2]; why?
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
for(R_xlen_t i = start; i <= end; ++i) {
out[i] = rp[counter_rp];
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int i = 1; i < ndim; ++i) {
double myprod = dimcumprod[i - 1];
NumericVector temp = lst[i];
R_xlen_t n = temp.length() * reps_each[i];
for(R_xlen_t j = 0; j < reps_whole[i]; ++i) {
rcpp_sub2ind_setrange(out, n * j, n * (j + 1) - 1, reps_each[i - 1], temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- as.numeric(-1:-10)
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, rp)
print(out)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
for(R_xlen_t i = start; i <= end; ++i) {
out[i] = rp[counter_rp];
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int i = 1; i < ndim; ++i) {
double myprod = dimcumprod[i - 1];
NumericVector temp = lst[i];
R_xlen_t n = temp.length() * reps_each[i];
for(R_xlen_t j = 0; j < reps_whole[i]; ++i) {
rcpp_sub2ind_setrange(out, n * j, n * (j + 1) - 1, 1, temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- as.numeric(-1:-10)
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, rp)
print(out)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
for(R_xlen_t i = start; i <= end; ++i) {
out[i] = rp[counter_rp];
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
if(counter_rp == rp.length()) {
counter_rp = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int i = 1; i < ndim; ++i) {
double myprod = dimcumprod[i - 1];
NumericVector temp = lst[i];
R_xlen_t n = temp.length() * reps_each[i];
for(R_xlen_t j = 0; j < reps_whole[i]; ++i) {
rcpp_sub2ind_setrange(out, n * j, n * (j + 1) - 1, 1, temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- as.numeric(-1:-10)
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, rp)
print(out)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
for(R_xlen_t i = start; i <= end; ++i) {
out[i] = rp[counter_rp];
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
if(counter_rp == rp.length()) {
counter_rp = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int i = 1; i < ndim; ++i) {
double myprod = dimcumprod[i - 1];
NumericVector temp = lst[i];
R_xlen_t n = temp.length() * reps_each[i];
for(R_xlen_t j = 0; j < reps_whole[i]; ++i) {
rcpp_sub2ind_setrange(out, n * j, n * (j + 1) - 1, reps_each[i], temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- as.numeric(-1:-10)
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, rp)
print(out)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
reps_each
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
for(R_xlen_t i = start; i <= end; ++i) {
out[i] = rp[counter_rp];
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
if(counter_rp == rp.length()) {
counter_rp = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int i = 1; i < ndim; ++i) {
double myprod = dimcumprod[i - 1];
NumericVector temp = lst[i];
R_xlen_t n = temp.length() * reps_each[i];
for(R_xlen_t j = 0; j < reps_whole[i]; ++i) {
rcpp_sub2ind_setrange(out, n * (j + 1), n * (j + 1) - 1, reps_each[i], temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- as.numeric(-1:-10)
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, rp)
print(out)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
Rcpp::sourceCpp(
code = "
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(rcpp_sub2ind_setrange)]]
void rcpp_sub2ind_setrange(
NumericVector out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const NumericVector rp
) {
R_xlen_t counter_each = 0;
R_xlen_t counter_rp = 0;
for(R_xlen_t i = start; i <= end; ++i) {
out[i] = rp[counter_rp];
counter_each++;
if(counter_each == each) {
counter_rp++;
counter_each = 0;
}
if(counter_rp == rp.length()) {
counter_rp = 0;
}
}
}
// [[Rcpp::export(rcpp_sub2ind_general2)]]
NumericVector rcpp_sub2ind_general2(
const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const NumericVector xdim, const NumericVector dimcumprod
) {
int ndim = lst.length();
Rcpp::NumericVector out(total);
NumericVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int i = 1; i < ndim; ++i) {
double myprod = dimcumprod[i - 1];
NumericVector temp = lst[i];
R_xlen_t n = temp.length() * reps_each[i];
for(R_xlen_t j = 0; j < reps_whole[i]; ++i) {
rcpp_sub2ind_setrange(out, n, n * (j + 1) - 1, reps_each[i], temp);
}
}
}
return(out);
}
"
)
out <- as.numeric(1:100)
print(out)
rp <- as.numeric(-1:-10)
rcpp_sub2ind_setrange(out, 19, 19 + length(rp) * 2 - 1, 2, rp)
print(out)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
out1 <- rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
out2 <- rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod)
all(out1 == out2)
cbind(out1, out2) # out2 increases way too slow; why?
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
x
x.dim <- c(500, 500, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
starts <- c(0, cumprod(ns))[1:n]
ends <- cumprod(ns) - 1
foo <- bench::mark(
general = squarebrackets:::.rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
C = squarebrackets:::.C_sub2ind_3d(sub[[1]], sub[[2]], sub[[3]], dimcumprod),
sub2coord2ind = sub2coord(sub, x.dim) |> coord2ind(x.dim, checks = FALSE),
min_iterations =  500
)
library(squarebrackets)
foo <- bench::mark(
general = squarebrackets:::.rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
C = squarebrackets:::.C_sub2ind_3d(sub[[1]], sub[[2]], sub[[3]], dimcumprod),
sub2coord2ind = sub2coord(sub, x.dim) |> coord2ind(x.dim, checks = FALSE),
min_iterations =  500
)
foo
ggplot2::autoplot(foo)
foo <- bench::mark(
general = squarebrackets:::.rcpp_sub2ind_general(
sub, total, reps_each, reps_whole, x.dim, dimcumprod
),
C = squarebrackets:::.C_sub2ind_3d(sub[[1]], sub[[2]], sub[[3]], dimcumprod),
sub2coord2ind = sub2coord(sub, x.dim) |> coord2ind(x.dim, checks = FALSE),
min_iterations =  500
)
foo
ggplot2::autoplot(foo)
foo <- bench::mark(
general = squarebrackets:::.rcpp_sub2ind_general(
sub, total, reps_each, reps_whole, x.dim, dimcumprod
),
rcpp = squarebrackets:::.rcpp_sub2ind_3d(sub[[1]], sub[[2]], sub[[3]], dimcumprod),
C = squarebrackets:::.C_sub2ind_3d(sub[[1]], sub[[2]], sub[[3]], dimcumprod),
sub2coord2ind = sub2coord(sub, x.dim) |> coord2ind(x.dim, checks = FALSE),
min_iterations =  500
)
foo
ggplot2::autoplot(foo)
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
# root folder tests ====
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
# sub folder tests ====
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "developer", "special", "src_related"
)
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
cat("\n")
}
print(enumerate_total)
# end ====
