}
expected[[k]] <- f_expect(x, row[[i]], col[[j]])
out[[k]] <- f_out(x, sub, dims)
assign("enumerate", enumerate + 2, envir = parent.frame(n = 1))
k <- k + 1
}
}
expect_equal(expected, out) |> errorfun()
expect_true(all(sapply(out, is.array))) |> errorfun()
}
temp.fun.1d <- function(x, row, f_expect, f_out) {
out <- expected <- vector("list", length(row))
for(i in 1:length(row)) {
len <- length(pre_subset_1d(x, row[[i]]))
rp <- sample(c(seq_len(len), NA), size = len)
expected[[i]] <- f_expect(x, row[[i]])
out[[i]] <- f_out(x, row[[i]], 1)
assign("enumerate", enumerate + 2, envir = parent.frame(n = 1))
}
expect_equal(expected, out) |> errorfun()
expect_true(all(sapply(out, is.array))) |> errorfun()
}
# uniquely named matrix ====
x <- matrix(as.double(-sample.int(20)), nrow = 5, ncol=4)
rownames(x) <- letters[1:5]
colnames(x) <- letters[1:4]
row <- indx_named(x, 1)
col <- indx_named(x, 2)
temp.fun.matrix(x, row, col, f_expect.matrix, f_out.matrix)
out <- expected <- vector("list", length(row) * length(col))
k <- 1
for(i in 1:length(row)) {
for(j in 1:length(col)) {
len <- length(pre_subset_mat(x, row[[i]], col[[j]]))
len <- sample(c(len, 1L), size = 1L)
rp <- sample(c(seq_len(len), NA), size = len)
expected[[k]] <- f_expect(x, row[[i]], col[[j]])
out[[k]] <- f_out(x, row = row[[i]], col = col[[j]])
assign("enumerate", enumerate + 2, envir = parent.frame(n = 1))
k <- k + 1
}
}
expect_equal(expected, out) |> errorfun()
i
j
i=1
j
i=20
j=20
out <- expected <- vector("list", length(row) * length(col))
k <- 1
len <- length(pre_subset_mat(x, row[[i]], col[[j]]))
len <- sample(c(len, 1L), size = 1L)
rp <- sample(c(seq_len(len), NA), size = len)
expected[[k]] <- f_expect(x, row[[i]], col[[j]])
f_expect(x, row[[i]], col[[j]])
f_out(x, row = row[[i]], col = col[[j]])
rep3.bind <- function(x, dim) {
return(abind::abind(x, x, x, along = dim))
}
pre_subset_mat <- function(x, row = NULL, col = NULL) {
if(!is.null(row)) row <- indx_x(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_x(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
return(x[row, col])
}
f_expect.matrix <- f_expect.2d <- function(x, row = NULL, col = NULL) {
rp <- parent.frame()$rp
if(!is.null(row)) row <- indx_x(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_x(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
x[row, col] <- rp
return(x)
}
f_out.matrix <- function(x, row, col) {
rp <- parent.frame()$rp
return(sb_mod(x, row = row, col = col, rp = rp))
}
f_out.2d <- function(x, sub, dims) {
rp <- parent.frame()$rp
return(sb_mod.array(x, sub, dims, rp = rp))
}
pre_subset_1d <- function(x, i) {
return(indx_x(i, x, names(x), length(x)))
}
f_expect.1d <- function(x, i) {
rp <- parent.frame()$rp
i <- indx_x(i, x, dimnames(x)[[1]], length(x))
if(any_empty_indices(i)) {
return(x)
}
x[i] <- rp
return(x)
}
f_out.1d <- function(x, sub, dims) {
rp <- parent.frame()$rp
return(sb_mod(x, sub, dims, rp = rp))
}
sb_test <- function(x, ...) {
rp <- sb_x.array(x, ...) * -1
return(sb_mod.array(x, ..., rp = rp))
}
f_expect.arbitrary <- function(x, i, j, l) {
tf <- mean
i <- indx_x(i, x, rownames(x), nrow(x))
j <- indx_x(j, x, colnames(x), ncol(x))
l <- indx_x(l, x, dimnames(x)[4], dim(x)[4])
rp <- x[i, j, , l] * -1
x[i, j, , l] <- rp
return(x)
}
out <- expected <- vector("list", length(row) * length(col))
k <- 1
len <- length(pre_subset_mat(x, row[[i]], col[[j]]))
len <- sample(c(len, 1L), size = 1L)
rp <- sample(c(seq_len(len), NA), size = len)
expected[[k]] <- f_expect(x, row[[i]], col[[j]])
# uniquely named matrix ====
x <- matrix(as.double(-sample.int(20)), nrow = 5, ncol=4)
rownames(x) <- letters[1:5]
colnames(x) <- letters[1:4]
row <- indx_named(x, 1)
col <- indx_named(x, 2)
out <- expected <- vector("list", length(row) * length(col))
len <- length(pre_subset_mat(x, row[[i]], col[[j]]))
len <- sample(c(len, 1L), size = 1L)
rp <- sample(c(seq_len(len), NA), size = len)
f_expect <- f_expect.matrix()
f_expect <- f_expect.matrix
f_out <- f_out.matrix
len <- length(pre_subset_mat(x, row[[i]], col[[j]]))
len <- sample(c(len, 1L), size = 1L)
rp <- sample(c(seq_len(len), NA), size = len)
f_expect(x, row[[i]], col[[j]])
f_out(x, row = row[[i]], col = col[[j]])
temp.fun.matrix <- function(x, row, col, f_expect, f_out) {
out <- expected <- vector("list", length(row) * length(col))
k <- 1
for(i in 1:length(row)) {
for(j in 1:length(col)) {
len <- length(pre_subset_mat(x, row[[i]], col[[j]]))
len <- sample(c(len, 1L), size = 1L)
rp <- sample(c(seq_len(len), NA), size = len)
expected[[k]] <- f_expect(x, row[[i]], col[[j]])
out[[k]] <- f_out(x, row = row[[i]], col = col[[j]])
assign("enumerate", enumerate + 2, envir = parent.frame(n = 1))
k <- k + 1
}
}
expect_equal(expected, out) |> errorfun()
expect_true(all(sapply(out, is.matrix))) |> errorfun()
}
temp.fun.2d <- function(x, row, col, f_expect, f_out) {
out <- expected <- vector("list", length(row) * length(col))
k <- 1
for(i in 1:length(row)) {
for(j in 1:length(col)) {
len <- length(pre_subset_mat(x, row[[i]], col[[j]]))
rp <- sample(c(seq_len(len), NA), size = len)
sub <- n(row[[i]], col[[j]])
dims <- 1:2
rem <- which(vapply(sub, is.null, logical(1L)))
if(length(rem) > 0L) {
sub <- sub[-rem]
dims <- dims[-rem]
}
expected[[k]] <- f_expect(x, row[[i]], col[[j]])
out[[k]] <- f_out(x, sub, dims)
assign("enumerate", enumerate + 2, envir = parent.frame(n = 1))
k <- k + 1
}
}
expect_equal(expected, out) |> errorfun()
expect_true(all(sapply(out, is.array))) |> errorfun()
}
temp.fun.1d <- function(x, row, f_expect, f_out) {
out <- expected <- vector("list", length(row))
for(i in 1:length(row)) {
len <- length(pre_subset_1d(x, row[[i]]))
rp <- sample(c(seq_len(len), NA), size = len)
expected[[i]] <- f_expect(x, row[[i]])
out[[i]] <- f_out(x, row[[i]], 1)
assign("enumerate", enumerate + 2, envir = parent.frame(n = 1))
}
expect_equal(expected, out) |> errorfun()
expect_true(all(sapply(out, is.array))) |> errorfun()
}
# uniquely named matrix ====
x <- matrix(as.double(-sample.int(20)), nrow = 5, ncol=4)
rownames(x) <- letters[1:5]
colnames(x) <- letters[1:4]
row <- indx_named(x, 1)
col <- indx_named(x, 2)
temp.fun.matrix(x, row, col, f_expect.matrix, f_out.matrix)
temp.fun.2d(x, row, col, f_expect.2d, f_out.2d)
# unnamed matrix ====
x <- matrix(as.double(-sample.int(20)), nrow = 5, ncol=4)
row <- indx_general(x, 1)
col <- indx_general(x, 2)
temp.fun.matrix(x, row, col, f_expect.matrix, f_out.matrix)
temp.fun.2d(x, row, col, f_expect.2d, f_out.2d)
# non-uniquely named matrix ====
x <- matrix(as.double(-sample.int(20)), nrow = 5, ncol=4)
rownames(x) <- c("a", "a", "b", "", NA)
colnames(x) <- c("a", "a", "", NA)
row <- indx_named(x, 1)
col <- indx_named(x, 2)
temp.fun.matrix(x, row, col, f_expect.matrix, f_out.matrix)
temp.fun.2d(x, row, col, f_expect.2d, f_out.2d)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
sb_x(x, row = c("a", "a", "a")),
rep3.bind(x[which(rownames(x) %in% "a"), ], 1)
) |> errorfun()
expect_equal(
sb_x(x, col = c("a", "a", "a")),
rep3.bind(x[, which(colnames(x) %in% "a")], 2)
) |> errorfun()
expect_equal(
sb_x.array(x, c("a", "a", "a"), 1),
rep3.bind(x[which(rownames(x) %in% "a"), ], 1)
) |> errorfun()
expect_equal(
sb_x.array(x, c("a", "a", "a"), 2),
rep3.bind(x[, which(colnames(x) %in% "a")], 2)
) |> errorfun()
}
indx_general <- function(x, dim.i) {
dim.n <- dim(x)[[dim.i]]
dim.n1 <- dim.n - round(dim.n/2)
dim.n2 <- dim.n - dim.n1
out <- list(
logical(0),
rep(TRUE, dim.n),
rep(FALSE, dim.n),
c(rep(TRUE, dim.n1), rep(FALSE, dim.n2)),
1,
1:3,
3:1,
c(2, 3, 1)
)
if(test_allow_duplicates) {
out <- c(out, list(c(1, 1, 1)))
}
return(out)
}
indx_named <- function(x, dim.i) {
# note: duplicate names tested separetely, since it's something inconsistent in R
return(c(indx_general(x, dim.i), list("a", c("a", "b"), c("b", "a"))))
}
# uniquely named 1d array ====
x <- array(as.double(-sample.int(20)), 20)
dimnames(x) <- list(letters[1:20])
row <- indx_named(x, 1)
temp.fun.1d(x, row, f_expect.1d, f_out.1d)
# unnamed 1d array ====
x <- array(as.double(-sample.int(20)), 20)
row <- indx_general(x, 1)
temp.fun.1d(x, row, f_expect.1d, f_out.1d)
# non-uniquely named 1d array ====
x <- array(as.double(-sample.int(20)), 20)
dimnames(x) <- list(c("a", letters[1:17], "", NA))
row <- indx_named(x, 1)
temp.fun.1d(x, row, f_expect.1d, f_out.1d)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
sb_x(x, c("a", "a", "a"), 1),
rep3.bind(x[which(rownames(x) %in% "a"), drop = FALSE], 1)
) |> errorfun()
}
x <- array(as.double(seq_len(10^4)), dim = c(10, 10, 10, 10))
rownames(x) <- c(letters[1:8], "a", NA)
sub <- list(c("a", "b"), 1:3, c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb_test(x, sub, dims),
f_expect.arbitrary(x, sub[[1]], sub[[2]], sub[[3]])
) |> errorfun()
sub <- list(c("a", "b"), logical(0), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb_test(x, sub, dims),
f_expect.arbitrary(x, sub[[1]], sub[[2]], sub[[3]])
) |> errorfun()
sub <- list(c("a", "b"), 1:4, rep(FALSE, 10))
dims <- c(1,2,4)
expect_equal(
sb_test(x, sub, dims),
f_expect.arbitrary(x, sub[[1]], sub[[2]], sub[[3]])
) |> errorfun()
enumerate <- enumerate + 3
if(isTRUE(test_allow_duplicates)) {
sub <- list(c("a", "a"), c(1, 1:3), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb_test(x, sub, dims),
f_expect.arbitrary(x, sub[[1]], sub[[2]], sub[[3]])
) |> errorfun()
sub <- list(c("a", "a"), logical(0), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb_test(x, sub, dims),
f_expect.arbitrary(x, sub[[1]], sub[[2]], sub[[3]])
) |> errorfun()
sub <- list(c("a", "a"), c(1, 1:4), rep(FALSE, 10))
dims <- c(1,2,4)
expect_equal(
sb_test(x, sub, dims),
f_expect.arbitrary(x, sub[[1]], sub[[2]], sub[[3]])
) |> errorfun()
}
enumerate <- enumerate + 3
# set-up ====
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- FALSE
test_PassByReference <- FALSE
# test missing arguments (NULL) ====
temp.fun <- function(x) {
tempfun <- function(x) {
x[] <- x[1]
return(x)
}
expect_equal(
sb_mod(x, rp = x[1], inv = TRUE),
tempfun(x)
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
# test elements ====
test_sb <- function(x, i, rp) {
if(!is.list(x)) {
i <- indx_rm(i, x, names(x), length(x))
if(length(i) == 0) return(x)
x[i] <- rp
return(x)
}
if(is.list(x)) {
i <- indx_rm(i, x, names(x), length(x))
if(length(i) == 0) return(x)
if(length(i) != 1)  x[i] <- as.list(rp)
if(length(i) == 1) x[[i]] <- rp
return(x)
}
}
temp.fun <- function(x, elements) {
for (i in 1:length(elements)) {
rp1 <- rp2 <- rep(1, length(indx_rm(elements[[i]], x, names(x), length(x))))
if(is.list(x)) rp1 <- as.list(rp1)
if(is.list(x) && length(rep) != 1) rp2 <- as.list(rp)
expect_equal(
sb_mod(x, i = elements[[i]], rp = rp1, inv = TRUE),
test_sb(x, i = elements[[i]], rp = rp2)
) |> errorfun()
assign("enumerate", enumerate + 1, envir = parent.frame(n = 1))
}
}
sys.source(file.path(getwd(), "source", "sourcetest-elements.R"), envir = environment())
# test factor ====
x <- factor(rep(c("Male", "Female", "Other", "Unknown"), 4))
names(x) <- c(letters[1:13], "a", "a", NA)
x2 <- x
levels(x2) <- c("F", "M", "Other", "Unknown")
expect_equal(sb_mod(x, lvl = c("Female", "Male"), rp = c("F", "M"), inv = TRUE), x2)
x <- factor(rep(c("Male", "Female", "Other", "Unknown"), 4))
names(x) <- c(letters[1:13], "a", "a", NA)
x2 <- x
x2[-1:-2] <-  c("Other")
expect_equal(sb_mod(x, i = 1:2, rp = "Other", inv = TRUE), x2)
expect_equal(sb_mod(x, i = c(TRUE, TRUE, rep(FALSE, 14)), rp = "Other", inv = TRUE), x2)
x <- factor(rep(c("Male", "Female", "Other", "Unknown"), 4))
names(x) <- c(letters[1:13], "a", "a", NA)
x2 <- x
x2[indx_rm("a",x, names(x), length(x))] <- "Male"
expect_equal(sb_mod(x, i = "a", rp = "Male", inv = TRUE), x2)
rep3.bind <- function(x, dim) {
return(abind::abind(x, x, x, along = dim))
}
pre_subset_mat <- function(x, row = NULL, col = NULL) {
if(!is.null(row)) row <- indx_rm(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_rm(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
return(x[row, col])
}
f_expect.matrix <- f_expect.2d <- function(x, row = NULL, col = NULL) {
rp <- parent.frame()$rp
if(!is.null(row)) row <- indx_rm(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_rm(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
x[row, col] <- rp
return(x)
}
f_out.matrix <- function(x, row, col) {
rp <- parent.frame()$rp
return(sb_mod(x, row = row, col = col, rp = rp))
}
f_out.2d <- function(x, sub, dims) {
rp <- parent.frame()$rp
return(sb_mod.array(x, sub, dims, rp = rp))
}
pre_subset_1d <- function(x, i) {
return(indx_rm(i, x, names(x), length(x)))
}
f_expect.1d <- function(x, i) {
rp <- parent.frame()$rp
i <- indx_rm(i, x, dimnames(x)[[1]], length(x))
if(any_empty_indices(i)) {
return(x)
}
x[i] <- rp
return(x)
}
f_out.1d <- function(x, sub, dims) {
rp <- parent.frame()$rp
return(sb_mod(x, sub, dims, rp = rp))
}
sb_test <- function(x, ...) {
rp <- sb_rm.array(x, ...) * -1
return(sb_mod.array(x, ..., rp = rp))
}
f_expect.arbitrary <- function(x, i, j, l) {
tf <- mean
i <- indx_rm(i, x, rownames(x), nrow(x))
j <- indx_rm(j, x, colnames(x), ncol(x))
l <- indx_rm(l, x, dimnames(x)[4], dim(x)[4])
rp <- x[i, j, , l] * -1
x[i, j, , l] <- rp
return(x)
}
sys.source(file.path(getwd(), "source", "sourcetest-dims.R"), envir = environment())
rep3.bind <- function(x, dim) {
return(abind::abind(x, x, x, along = dim))
}
pre_subset_mat <- function(x, row = NULL, col = NULL) {
if(!is.null(row)) row <- indx_rm(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_rm(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
return(x[row, col])
}
f_expect.matrix <- f_expect.2d <- function(x, row = NULL, col = NULL) {
rp <- parent.frame()$rp
if(!is.null(row)) row <- indx_rm(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_rm(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
x[row, col] <- rp
return(x)
}
f_out.matrix <- function(x, row, col) {
rp <- parent.frame()$rp
return(sb_mod(x, row = row, col = col, inv = TRUE, rp = rp))
}
f_out.2d <- function(x, sub, dims) {
rp <- parent.frame()$rp
return(sb_mod.array(x, sub, dims, inv = TRUE, rp = rp))
}
pre_subset_1d <- function(x, i) {
return(indx_rm(i, x, names(x), length(x)))
}
f_expect.1d <- function(x, i) {
rp <- parent.frame()$rp
i <- indx_rm(i, x, dimnames(x)[[1]], length(x))
if(any_empty_indices(i)) {
return(x)
}
x[i] <- rp
return(x)
}
f_out.1d <- function(x, sub, dims) {
rp <- parent.frame()$rp
return(sb_mod(x, sub, dims, inv = TRUE, rp = rp))
}
sb_test <- function(x, ...) {
rp <- sb_rm.array(x, ...) * -1
return(sb_mod.array(x, ..., inv = TRUE, rp = rp))
}
f_expect.arbitrary <- function(x, i, j, l) {
tf <- mean
i <- indx_rm(i, x, rownames(x), nrow(x))
j <- indx_rm(j, x, colnames(x), ncol(x))
l <- indx_rm(l, x, dimnames(x)[4], dim(x)[4])
rp <- x[i, j, , l] * -1
x[i, j, , l] <- rp
return(x)
}
sys.source(file.path(getwd(), "source", "sourcetest-dims.R"), envir = environment())
?abind::asub
identical
