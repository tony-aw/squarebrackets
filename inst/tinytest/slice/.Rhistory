haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
tempfun2 <- function(m) {
out <- collapse::radixorderv(x, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
tempfun1 <- function(m, v) {
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
tempfun2 <- function(m) {
out <- collapse::radixorderv(x, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
tempfun2 <- function(m) {
out <- collapse::radixorderv(m, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
code <- "
const int *restrict pm = INTEGER(m);
SEXP res;
int nm = Rf_length(m);
int nv = Rf_length(v);
int *buf = (int *) R_alloc(nm, sizeof(int));
int count = 0;
for(int i = 1; i <= nv; ++i) {
for(int j = 0; j < nm; ++j) {
if(pm[j] == i) {
buf[count] = j + 1;
count ++;
}
}
}
PROTECT(res = Rf_allocVector(INTSXP, count));
if(count) memcpy(INTEGER(res), buf, sizeof(int) * count);
UNPROTECT(1);
return res;
"
C_match_which <- inline::cfunction(body = code, sig = signature(m = "SEXP", v = "SEXP"), language = "C")
tempfun1 <- function(m, v) {
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
return(out)
}
tempfun2 <- function(m, v) {
return(C_match_which(m, v))
}
haystack <- letters[1:4]
needles <- c("a", "c")
m <- collapse::fmatch(haystack, needles)
tempfun2(m, unique(needles))
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
t2 = tempfun2(m, v)
haystack <- sample(c(letters, LETTERS), 1e5, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m, v),
order(m),
min_iterations = 500,
check = FALSE,
)
summary(foo)
ggplot2::autoplot(foo)
methods("[")
.S3methods("[")
`[.hexmode`
cat(factor(letters[1:5]))
print(factor(letters[1:5]))
?cat
cat.default
c.factor
?vapply
forcats::fct_c
c(factor(letters), factor(month.abb))
Rcpp::cppFunction(
"
CharacterVector alt_classname(RObject x){
if(!ALTREP(x)) {
stop(\"not alrep\");
}
return as<CharacterVector>(ATTRIB(ALTREP_CLASS(x))[0]);
}
"
)
Rcpp::cppFunction(
"
CharacterVector alt_classname(RObject x){
if(!ALTREP(x)) {
stop(\"not alrep\");
}
RawVector Myclass = ALTREP_CLASS(x);
return as<CharacterVector>(ATTRIB(Myclass)[0]);
}
"
)
Rcpp::cppFunction(
"
CharacterVector alt_classname(RObject x){
if(!ALTREP(x)) {
stop(\"not alrep\");
}
RawVector Myclass = ALTREP_CLASS(x);
Pairlist Myattrib = ATTRIB(Myclass);
return as<CharacterVector>(Myattrib[0]);
}
"
)
altrepclass(1:10)
alt_classname(1:10)
x <- 1:10
x <- 1:26
names(x) <- letters
x
data.table::setattr(x, "names", rev(letters))
letters
x
[]
[1, 2]
<>
<1, 2>
`[`
`.`
help
?help
?is.name
is.name(x)
x <- 3
is.name(x)
is.name(`x`)
is.name(substitute(x))
is.name(substitute((x))
)
substitute(x)
substitute((x))
substitute([x])
x <- [3]
x <- `[3]`
`1:3, 1:2`
is.name([1])
is.name({1})
is.name({x})
is.name(substitute([x]))
is.name(substitute({x}))
sub <- function(x) { substitute(x)}
sub([x])
sub('x')
x <- 3
eval(x)
eval('x')
eval(substitute(x))
x <- "3"
eval(substitute(x))
eval(str2expression(x))
x
sub('3')
sub('3')
sub <- function(x) { eval(str2expression(x))}
ind <- 1:3
sub('ind')
sub <- function(x) { eval(str2expression(x), envir = parent.frame())}
sub('ind')
'ind, ind'
sub('ind, ind')
~ [ind, ind]
library(squarebrackets)
tinycodet::import_as(~gg., "ggplot2")
# array vs matrix set ====
n <- 3162 # approx sqrt(1e7)
x.mat <- matrix(seq_len(n*n), ncol = n)
x.mat2 <- as.mutable_atomic(x.mat)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
sel.rows <- 1:1000
sel.cols <- 1:1000
tf <- function(x) { return(-1 * x) }
bm.sb_tf.matrix <- bench::mark(
"sb_set.matrix" = sb_set.matrix(x.mat2, col = sel.cols, tf = tf),
"sb_set.array(list sub)" = sb_set.array(x.mat2, n(sel.cols), 2, tf = tf),
"sb_set.array(atomic sub)" = sb_set.array(x.mat2, sel.cols, 2, tf = tf),
check = FALSE,
min_iterations = 500
)
summary(bm.sb_tf.matrix)
gg.$autoplot(bm.sb_tf.matrix) + gg.$ggtitle("matrix")
# array vs matrix mod ====
n <- 3162 # approx sqrt(1e7)
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
sel.rows <- 1:1000
sel.cols <- 1:1000
tf <- function(x) { return(-1 * x) }
bm.sb_tf.matrix <- bench::mark(
"sb_mod.matrix" = sb_mod.matrix(x.mat, col = sel.cols, tf = tf),
"sb_mod.array (list sub)" = sb_mod.array(x.mat, n(sel.cols), 2, tf = tf),
"sb_mod.array (atomic sub)" = sb_mod.array(x.mat, sel.cols, 2, tf = tf),
min_iterations = 500
)
summary(bm.sb_tf.matrix)
gg.$autoplot(bm.sb_tf.matrix) + gg.$ggtitle("matrix")
bm.sb_tf.matrix <- bench::mark(
"sb_mod.matrix" = sb_mod.matrix(x.mat, col = sel.cols, tf = tf),
"sb_mod.array (list sub)" = sb_mod.array(x.mat, n(sel.cols), 2, tf = tf),
"sb_mod.array (atomic sub)" = sb_mod.array(x.mat, sel.cols, 2, tf = tf),
min_iterations = 500
)
summary(bm.sb_tf.matrix)
gg.$autoplot(bm.sb_tf.matrix) + gg.$ggtitle("matrix")
# array vs matrix extract ====
n <- 3162 # approx sqrt(1e7)
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
sel.rows <- 1:1000
sel.cols <- 1:1000
tf <- function(x) { return(-1 * x) }
# array vs matrix extract ====
n <- 3162 # approx sqrt(1e7)
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
sel.rows <- 1:1000
sel.cols <- 1:1000
tf <- function(x) { return(-1 * x) }
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = sb_x.matrix(x.mat, col = sel.cols),
"sb_x.array (list sub)" = sb_x.array(x.mat, n(sel.cols), 2),
"sb_x.array (atomic sub)" = sb_x.array(x.mat, sel.cols, 2),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
library(squarebrackets)
tinycodet::import_as(~gg., "ggplot2")
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
sel.rows <- 1:9
sel.cols <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:500) sb_x.matrix(x.mat, col = sel.cols),
"sb_x.array (list sub)" = for(i in 1:500) sb_x.array(x.mat, n(sel.cols), 2),
"sb_x.array (atomic sub)" = for(i in 1:500) sb_x.array(x.mat, sel.cols, 2),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
sel.rows <- 1:9
sel.cols <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:500) sb_x.matrix(x.mat, col = sel.cols),
"sb_x.array (list sub)" = for(i in 1:500) sb_x.array(x.mat, n(sel.cols), 2),
"sb_x.array (atomic sub)" = for(i in 1:500) sb_x.array(x.mat, sel.cols, 2),
min_iterations = 500
)
summary(bm.sb_x.matrix)
install.packages(R.utils)
install.packages("R.utils")
?extrac.arrau
?extrac.array
?R.utils::extrac.array
?R.utils::extract.array
# abind vs R.tuils vs do.call ===
n <- 100
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:99
sel.cols <- 1:99
lst <- n(sel.rows, sel.cols)
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:100) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:100) do.call(\(...)x.mat[..., drop = FALSE], lst),
"abind" = for(i in 1:100) abind::asub(x.mat, lst),
"R.utils" = for(i in 1:100) R.utils::extract.array(x, indices = lst, 1:length(dim(x))), )
library(squarebrackets)
tinycodet::import_as(~gg., "ggplot2")
# abind vs R.tuils vs do.call ===
n <- 100
x.mat <- matrix(seq_len(n*n), ncol = n)
sel.rows <- 1:99
sel.cols <- 1:99
lst <- n(sel.rows, sel.cols)
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:100) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:100) do.call(\(...)x.mat[..., drop = FALSE], lst),
"abind" = for(i in 1:100) abind::asub(x.mat, lst),
"R.utils" = for(i in 1:100) R.utils::extract.array(x, indices = lst, 1:length(dim(x))), )
bm.sb_x.matrix <- bench::mark(
"[]" = for(i in 1:100) x.mat[sel.rows, sel.cols, drop = FALSE],
"do.call" = for(i in 1:100) do.call(\(...)x.mat[..., drop = FALSE], lst),
"abind" = for(i in 1:100) abind::asub(x.mat, lst),
"R.utils" = for(i in 1:100) R.utils::extract.array(x.mat, indices = lst, 1:length(dim(x))), )
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# anonymous function vs named function ====
temp.fun <- function(x) {
return(x[1:1e4])
}
temp.fun1 <- function(x) {
return(temp.fun(x))
}
temp.fun2 <- function(x) {
temp.fun0 <- \(x)x[1:1e4]
return(temp.fun0(x))
}
x <- sample(1e5)
foo <- bench::mark(
temp1 = for(i in 1:100) temp.fun1(x),
temp2 = for(i in 1:100) temp.fun2(x),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
library(squarebrackets)
tinycodet::import_as(~gg., "ggplot2")
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
ind <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:100) sb_x.matrix(x.mat, ind, ind),
"sb_x.array (list sub)" = for(i in 1:100) sb_x.array(x.mat, n(ind, ind)),
"sb_x.array (atomic sub)" = for(i in 1:100) sb_x.array(x.mat, ind),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
ind <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:200) sb_x.matrix(x.mat, ind, ind),
"sb_x.array (list sub)" = for(i in 1:200) sb_x.array(x.mat, n(ind, ind)),
"sb_x.array (atomic sub)" = for(i in 1:200) sb_x.array(x.mat, ind),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
ind <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:250) sb_x.matrix(x.mat, ind, ind),
"sb_x.array (list sub)" = for(i in 1:250) sb_x.array(x.mat, n(ind, ind)),
"sb_x.array (atomic sub)" = for(i in 1:250) sb_x.array(x.mat, ind),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
ind <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:100) sb_x.matrix(x.mat, ind, ind),
"sb_x.array (list sub)" = for(i in 1:100) sb_x.array(x.mat, n(ind, ind)),
"sb_x.array (atomic sub)" = for(i in 1:100) sb_x.array(x.mat, ind),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# array vs matrix extract ====
n <- 3162 # approx sqrt(1e7)
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
ind <- 1:1000
sel.cols <- 1:1000
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = sb_x.matrix(x.mat, ind, ind),
"sb_x.array (list sub)" = sb_x.array(x.mat, n(ind, ind)),
"sb_x.array (atomic sub)" = sb_x.array(x.mat, ind),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
ind <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:500) sb_x.matrix(x.mat, ind, ind),
"sb_x.array (list sub)" = for(i in 1:500) sb_x.array(x.mat, n(ind, ind)),
"sb_x.array (atomic sub)" = for(i in 1:500) sb_x.array(x.mat, ind),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
rownames(foo)
rownames(bm.sb_x.matrix)
bm.sb_x.matrix$expression
# array vs matrix extract overhead ====
n <- 10
x.mat <- matrix(seq_len(n*n), ncol = n)
colnames(x.mat) <- sample(c(letters, LETTERS, NA), n, TRUE)
ind <- 1:9
bm.sb_x.matrix <- bench::mark(
"sb_x.matrix" = for(i in 1:500) sb_x.matrix(x.mat, ind, ind),
"sb_x.array (list sub)" = for(i in 1:500) sb_x.array(x.mat, n(ind, ind)),
"sb_x.array (atomic sub)" = for(i in 1:500) sb_x.array(x.mat, ind),
min_iterations = 500
)
summary(bm.sb_x.matrix)
gg.$autoplot(bm.sb_x.matrix) + gg.$ggtitle("matrix")
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
# root folder tests ====
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
# sub folder tests ====
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "sub2ind", "developer", "special", "src_related", "slice"
)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
path <- file.path(getwd(), subfolders) |> normalizePath()
files <- list.files(path, pattern = "*.R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total", "max.width"))
rm(list = rem)
cat("\n")
}
print(enumerate_total)
# end ====
