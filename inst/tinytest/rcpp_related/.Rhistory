rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 100
)
foo
ggplot2::autoplot(foo)
n <- 100
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
n <- 75
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
n <- 80
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(1000,1000,3)))
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(500,500,3)))
n <- 50
x.dim <- c(500, 500, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
n <- 50
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
n <- 70
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
n <- 700
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
n <- 700
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = x.dim))
n <- 650
x.dim <- c(700, 700, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = x.dim))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:n, 1:n, 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:n, 1:n, 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
library(squarebrackets)
library(ggplot2)
library(data.table)
loadNamespace("bench")
library(future.apply)
x.dims <- c(1900, 1900, 3) # leads to approx 1e7 elements
x.3d <- array(1:prod(x.dims), x.dims)
x.3d2 <- as.mutable_atomic(x.3d)
sel.rows <- 1:900
sel.lyrs <- c(TRUE, FALSE, TRUE)
basefun <- function(x, rows, lyrs, tf) {
x[rows, , lyrs] <- tf(x[rows, , lyrs])
return(x)
}
tf <- function(x) { return(-1 * x) }
bm.sb_tf.3d <- bench::mark(
"base [<-" = basefun(x.3d, sel.rows, sel.lyrs, tf = tf ),
"sb_set" =  sb_set.array(x.3d2, n(sel.rows, sel.lyrs), c(1,3), tf = tf),
"sb_mod" = sb_mod.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs), tf = tf),
check = FALSE,
min_iterations = 500
)
summary(bm.sb_tf.3d)
autoplot(bm.sb_tf.3d) + ggtitle("3d")
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
IntegerVector temp2 = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (temp2 - 1) * myprod;
}
}
}
return(out);
}
"
)
squarebrackets::sub2ind
squarebrackets:::.sub2ind_general
x.dim <- c(500, 500, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
lst <- list(1:400, 1:400, 1:20)
sub <- list(1:400, 1:400, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
)
foo
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
IntegerVector temp2 = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (temp2 - 1) * myprod;
}
}
}
return(out);
}
"
)
x.dim <- c(500, 500, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:400, 1:400, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
)
foo
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
?match.call
fun <- function(a, b, ...) {match.call()}
fun()
fun <- function(a, b, ...) {print(match.call())}
fun()
fun
fun <- function(a, b, ...) {print(as.list(match.call()))}
fun
fun()
fun(a=1)
?collapse::fmode
?abind::adrop
?abind::acorn
abind::acorn
abind:::acorn.default
?abind::afill
abind::afill
abind::`afill<-`
abind:::`afill<-.default`
?abind::asub
?Subscript
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# codetools checks:
codetools::checkUsagePackage("squarebrackets")
ns <- loadNamespace("squarebrackets") |> as.list(all.names = TRUE)
ns <- ns[!stringi::stri_detect(names(ns), fixed = ".__")]
checks <- sapply(ns, \(x) any(deparse(x) |> stringi::stri_detect(regex = "return")))
names(checks)[!checks] |> sort()
# if(!require(tinytest)){install.packages("tinytest")}
# tinytest::setup_tinytest("./squarebrackets")
# check package in general:
# Note: edit .Rbuildignore to make it ignore things R CMD CHECK should not check
devtools::run_examples("./squarebrackets", fresh = TRUE)
# tinytest::run_test_dir("./squarebrackets/inst/tinytest/generic_bind")
foo <- rcmdcheck::rcmdcheck("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/rcpp_related")
source(file.path(getwd(), "source", "functions4testing.R"))
enumerate <- 0
# 4D array ====
dims <- c(10, 10, 10, 10)
len <- prod(dims)
temp.fun <- function(...) {
return(x[...])
}
for(i in 1:10) {
x <- array(sample(seq_len(len*10), len, FALSE), dims)
ind1 <- sample(1:10, 3, FALSE)
ind2 <- sample(1:10, 3, FALSE)
ind3 <- sample(1:10, 3, FALSE)
ind4 <- sample(1:10, 3, FALSE)
subs <- list(ind1, ind2, ind3, ind4)
coords <- sub2coord(subs, dims)
ind <- coord2ind(coords, dims)
x.coord <- numeric(length(ind))
for(i in 1:length(x.coord)) {
x.coord[i] <- x[coords[i,1], coords[i,2], coords[i,3], coords[i,4]]
}
expect_equal(
x[ind], x.coord
) |> errorfun()
coords <- ind2coord(ind, dims)
for(i in 1:length(x.coord)) {
x.coord[i] <- x[coords[i,1], coords[i,2], coords[i,3], coords[i,4]]
}
expect_equal(
x[ind], x.coord
) |> errorfun()
expect_equal(
coord2sub(coords), subs
) |> errorfun()
enumerate <- enumerate + 3
}
# 3D array ====
dims <- c(10, 10, 10)
len <- prod(dims)
temp.fun <- function(...) {
return(x[...])
}
for(i in 1:10) {
x <- array(sample(seq_len(len*10), len, FALSE), dims)
ind1 <- sample(1:10, 3, FALSE)
ind2 <- sample(1:10, 3, FALSE)
ind3 <- sample(1:10, 3, FALSE)
subs <- list(ind1, ind2, ind3)
expect_equal(
coord2ind(sub2coord(subs, dims), dims),
sub2ind(subs, dims)
) |> errorfun()
coords <- coords <- sub2coord(subs, dims)
ind <- coord2ind(coords, dims)
x.coord <- numeric(length(ind))
for(i in 1:length(x.coord)) {
x.coord[i] <- x[coords[i,1], coords[i,2], coords[i,3]]
}
expect_equal(
x[ind], x.coord
) |> errorfun()
coords <- ind2coord(ind, dims)
for(i in 1:length(x.coord)) {
x.coord[i] <- x[coords[i,1], coords[i,2], coords[i,3]]
}
expect_equal(
x[ind], x.coord
) |> errorfun()
expect_equal(
coord2sub(coords), subs
) |> errorfun()
enumerate <- enumerate + 4
}
# matrix ====
dims <- c(10, 10)
len <- prod(dims)
temp.fun <- function(...) {
return(x[...])
}
for(i in 1:10) {
x <- matrix(sample(seq_len(len*10), len, FALSE), ncol = 10)
ind1 <- sample(1:10, 3, FALSE)
ind2 <- sample(1:10, 3, FALSE)
subs <- list(ind1, ind2)
expect_equal(
coord2ind(sub2coord(subs, dims), dims),
sub2ind(subs, dims)
) |> errorfun()
coords <- coords <- sub2coord(subs, dims)
ind <- coord2ind(coords, dims)
x.coord <- numeric(length(ind))
for(i in 1:length(x.coord)) {
x.coord[i] <- x[coords[i,1], coords[i,2]]
}
expect_equal(
x[ind], x.coord
) |> errorfun()
coords <- ind2coord(ind, dims)
for(i in 1:length(x.coord)) {
x.coord[i] <- x[coords[i,1], coords[i,2]]
}
expect_equal(
x[ind], x.coord
) |> errorfun()
expect_equal(
coord2sub(coords), subs
) |> errorfun()
enumerate <- enumerate + 4
}
# error checks ====
dims <- c(1000, 1000, 4, 4)
len <- prod(dims)
x <- array(1:len, dims)
coords <- rbind(c(4:1), 1:4)
subs <- list(4:1, 1:4)
expect_error(
coord2ind(coords, numeric(0)),
pattern = "`length(x.dim) == 0`",
fixed = TRUE
)
expect_error(
coord2ind(matrix("1", ncol=4), character(4)),
pattern = "`x.dim` and `coord` must both be numeric",
fixed = TRUE
)
expect_error(
coord2ind(coords, c(1, dims)),
pattern = "`ncol(coord) != length(x.dim)`",
fixed = TRUE
)
expect_error(
sub2coord(subs, rep(5, 5)),
pattern = "`length(sub) != length(x.dim)`",
fixed = TRUE
)
# expect_error(
#   coord2ind(coords, dims, 1),
#   pattern = "length of object does not correspond to the given dimensions"
# )
enumerate <- enumerate + 5
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
coord[myrng] = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (coord[myrng] - 1) * myprod;
}
}
}
return(out);
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general2(
const List lst, const int total, const IntegerVector reps_each, const IntegerVector reps_whole, const IntegerVector xdim, const IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
coord[myrng] = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (coord[myrng] - 1) * myprod;
}
}
}
return(out);
}
"
)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
foo <- bench::mark(
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general2(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
x.dim <- c(250, 250, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:200, 1:200, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
foo <- bench::mark(
rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
foo <- bench::mark(
simple = rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
const = rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
foo <- bench::mark(
simple = rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
const = rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
x.dim <- c(1000, 1000, 4)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:900, 1:900, 1:3)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
foo <- bench::mark(
simple = rcpp_sub2ind_general(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
const = rcpp_sub2ind_general2(sub, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
