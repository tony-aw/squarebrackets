x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
n <- 700
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
n <- 700
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = x.dim))
n <- 650
x.dim <- c(700, 700, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = x.dim))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:n, 1:n, 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:n, 1:n, 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
library(squarebrackets)
library(ggplot2)
library(data.table)
loadNamespace("bench")
library(future.apply)
x.dims <- c(1900, 1900, 3) # leads to approx 1e7 elements
x.3d <- array(1:prod(x.dims), x.dims)
x.3d2 <- as.mutable_atomic(x.3d)
sel.rows <- 1:900
sel.lyrs <- c(TRUE, FALSE, TRUE)
basefun <- function(x, rows, lyrs, tf) {
x[rows, , lyrs] <- tf(x[rows, , lyrs])
return(x)
}
tf <- function(x) { return(-1 * x) }
bm.sb_tf.3d <- bench::mark(
"base [<-" = basefun(x.3d, sel.rows, sel.lyrs, tf = tf ),
"sb_set" =  sb_set.array(x.3d2, n(sel.rows, sel.lyrs), c(1,3), tf = tf),
"sb_mod" = sb_mod.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs), tf = tf),
check = FALSE,
min_iterations = 500
)
summary(bm.sb_tf.3d)
autoplot(bm.sb_tf.3d) + ggtitle("3d")
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
IntegerVector temp2 = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (temp2 - 1) * myprod;
}
}
}
return(out);
}
"
)
squarebrackets::sub2ind
squarebrackets:::.sub2ind_general
x.dim <- c(500, 500, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
lst <- list(1:400, 1:400, 1:20)
sub <- list(1:400, 1:400, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
)
foo
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
IntegerVector temp2 = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (temp2 - 1) * myprod;
}
}
}
return(out);
}
"
)
x.dim <- c(500, 500, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:400, 1:400, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
)
foo
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
?match.call
fun <- function(a, b, ...) {match.call()}
fun()
fun <- function(a, b, ...) {print(match.call())}
fun()
fun
fun <- function(a, b, ...) {print(as.list(match.call()))}
fun
fun()
fun(a=1)
?collapse::fmode
?abind::adrop
?abind::acorn
abind::acorn
abind:::acorn.default
?abind::afill
abind::afill
abind::`afill<-`
abind:::`afill<-.default`
?abind::asub
?Subscript
?data.table::uniqueN
data.table::uniqueN
?squarebrackets
?squarebrackets::`squarebrackets-package`
?`squarebrackets-package`
?squarebrackets::`squarebrackets-package`
?idx_by
library(squarebrackets)
?idx_by
x <- data.table::data.table(a=1:10, b=letters[1:10])
dimnames(x)
dim(x)
?collapse:::BY
library(tinycodet)
library(ggplot2)
loadNamespace("bench")
n <- 1e5
x <- rep(paste0(1:50, collapse = ""), n)
p <- "\\d"
i <- sample(c(-50:-1, 1:50), replace=TRUE, size = n)
locate_stringi <- function(...) {
stringi::stri_locate_all(...)
stringi::stri_count(...)
}
bm.stri_locate_ith <- bench::mark(
"stri_locate_ith" = stri_locate_ith_regex(x, p, i),
"stringi::(stri_locate_all + stri_count)" = locate_stringi(x, regex = p),
min_iterations = 500,
check = FALSE,
filter_gc = FALSE
)
summary(bm.stri_locate_ith)
autoplot(bm.stri_locate_ith)
?getNamespaceExports
getNamespaceExports
?.getNamespaceInfo()
.getNamespaceInfo()
.getNamespaceInfo
library(tinycodet)
expect_equal(
sort(tinycodet:::.internal_list_coreR()),
sort(c(
"base", "compiler", "datasets", "grDevices", "graphics", "grid", "methods",
"parallel", "splines", "stats", "stats4", "tcltk", "tools",
"translations", "utils"
))
)
expect_equal(
sort(tinycodet:::.internal_list_preinst()),
sort(c(
"boot", "class", "cluster", "codetools", "foreign", "KernSmooth",
"lattice", "MASS", "Matrix",  "mgcv", "nlme", "nnet",
"rpart", "spatial", "survival"
))
)
library(tinytest)
expect_equal(
sort(tinycodet:::.internal_list_coreR()),
sort(c(
"base", "compiler", "datasets", "grDevices", "graphics", "grid", "methods",
"parallel", "splines", "stats", "stats4", "tcltk", "tools",
"translations", "utils"
))
)
expect_equal(
sort(tinycodet:::.internal_list_preinst()),
sort(c(
"boot", "class", "cluster", "codetools", "foreign", "KernSmooth",
"lattice", "MASS", "Matrix",  "mgcv", "nlme", "nnet",
"rpart", "spatial", "survival"
))
)
expect_equal(
sort(tinycodet:::.internal_list_knownmeta()),
sort(c("tidyverse", "fastverse", "tinyverse"))
)
expect_equal(
sort(tinycodet:::.internal_list_tidyshared()),
sort(c("rlang", "lifecycle", "cli", "glue", "withr"))
)
expect_error(
tinycodet:::.internal_check_forbidden_pkgs(
c("tidyverse", "fastverse", "tinyverse"), lib.loc, abortcall = sys.call()
),
pattern = paste0(
"The following packages are known meta-verse packages, which is not allowed:",
"\n",
"tidyverse, fastverse, tinyverse"
),
fixed = TRUE
)
# check rcpp internal function does NOT modify by reference ====
lib.loc <- .libPaths()
package <- "stringi"
ns <- as.list(loadNamespace(package, lib.loc = lib.loc),
all.names = TRUE, sorted = TRUE)
names_exported <- names(ns[[".__NAMESPACE__."]][["exports"]])
ns <- ns[names_exported]
ns <- ns[!is.na(names(ns))]
names_exported <- names(ns)
names_functions <- names(ns)[
unlist(vapply(ns, is.function, FUN.VALUE = logical(1)), use.names = FALSE)
]
ns2 <- ns
ns <- tinycodet:::.rcpp_prep_ns(ns, names_functions, package)
out <- mapply(identical, ns, ns2)
expect_false(
any(out)
)
import_as(~stri., "stringi")
# attr.import ====
myattr <- attr.import(stri.)
expect_equal(
myattr$tinyimport,
"tinyimport"
)
expect_equal(
attr.import(stri., "pkgs"),
myattr$pkgs
)
expect_equal(
attr.import(stri., "conflicts"),
myattr$conflicts
)
attr.import(stri., "versions")
find.package
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "special", "rcpp_related"
)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
file.path("generic")
normalizePath("generic")
path.expand("generic")
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "special", "rcpp_related"
)
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
}
print(enumerate_total)
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "special", "rcpp_related"
)
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = FALSE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
cat(iSubFolder, "/", iFile)
iFile <- file.path(getwd(), iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
}
?basename
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "special", "rcpp_related"
)
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
}
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "special", "rcpp_related"
)
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
}
print(enumerate_total)
