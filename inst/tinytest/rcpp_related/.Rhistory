# collapse::setvind1 vs rcpp ====
Rcpp::cppFunction(
"
void rcpp_set_Integer(
IntegerVector x, IntegerVector ind, IntegerVector rp
) {
R_xlen_t n = ind.length();
if(rp.length() == 1) {
for(R_xlen_t i =0; i < n; ++i) {
x[ind[i]] = rp[0];
}
} else {
R_xlen_t counter = 0
for(R_xlen_t i =0; i < n; ++i) {
x[ind[i]] = rp[counter];
counter++;
}
}
}
"
)
# collapse::setvind1 vs rcpp ====
Rcpp::cppFunction(
"
void rcpp_set_Integer(
IntegerVector x, IntegerVector ind, IntegerVector rp
) {
R_xlen_t n = ind.length();
if(rp.length() == 1) {
for(R_xlen_t i =0; i < n; ++i) {
x[ind[i]] = rp[0];
}
}
else {
R_xlen_t counter = 0;
for(R_xlen_t i = 0; i < n; ++i) {
x[ind[i]] = rp[counter];
counter++;
}
}
}
"
)
x <- sample(1:1e6)
clp = collapse::setv(x, 1:1e5, -1)
sb = rcpp_set_Integer(x, 1:1e5, -1)
x <- sample(1:1e6)
foo <- bench::mark(
clp = collapse::setv(x, 1:1e5, -1),
sb = rcpp_set_Integer(x, 1:1e5, -1),
min_iterations = 500
)
foo <- bench::mark(
clp = collapse::setv(x, 1:1e5, -1),
sb = rcpp_set_Integer(x, 1:1e5, -1),
min_iterations = 500,
check = FALSE
)
foo
ggplot2::autoplot(foo)
x <- sample(1:1e6)
foo <- bench::mark(
clp = collapse::setv(x, 1:5e5, -1),
sb = rcpp_set_Integer(x, 1:5e5, -1),
min_iterations = 500,
check = FALSE
)
foo
ggplot2::autoplot(foo)
x <- matrix(letters[1:4], 2, 2)
x
names(x) <- x
x
dim(x) <- c(4,1)
x
names(x)
?dim
x <- matrix(letters[1:4], 2, 2)
names(x) <- x
x[,1]
x[1,1]
x[1,1] |> names(x)
names(x[1,1])
dimnames(x) <- letters[1:2]
colnames(x) <- letters[1:2]
rownames(x) <- letters[1:2]
x
x[1,1]
x[1,1, drop = FALSE]
x[1,1, drop = FALSE] |> names()
x[1,1, drop = FALSE] |> dimnames()
x <- as.list(letters[1:4]) |> matrix(2,2)
z
x
names(x) <- x
x
x[1,1:2]
x[1,1:2, drop = FALSE]
sticky::sticky(x)
x <- sticky::sticky(x)
x[1,1]
x[1,1, drop = FALSE]
`[.sticky`
?sticky
is.array
?is.vector
?is.array
?is.vector
?is.data.frame
is.data.frame
n <- sqrt(2^31 - 1)
n <- n^(1/3)
1:n^3
n <- 35
x <- array(sample(1:n^3), dim = c(n,n,n))
pryr::object_size(z)
pryr::object_size(x)
n <- 40
x <- array(sample(1:n^3), dim = c(n,n,n))
length(x)
library(squarebrackets)
n <- 40
x <- array(sample(1:n^3), dim = c(n,n,n))
foo <- bench::mark(
sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 100
)
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
foo <- bench::mark(
sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 100
)
foo
n <- 50
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 100
)
foo
ggplot2::autoplot(foo)
n <- 100
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
n <- 75
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
n <- 80
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(n,n,n)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:(n-1)), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:(n-1)), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(1000,1000,3)))
x <- as.mutable_atomic(array(sample(1:n^3), dim = c(500,500,3)))
n <- 50
x.dim <- c(500, 500, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
n <- 50
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
n <- 70
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
n <- 700
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = c(500,500,3)))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:(n-1), 1:(n-1), 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:(n-1), 1:(n-1), 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
n <- 700
x.dim <- c(750, 750, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = x.dim))
n <- 650
x.dim <- c(700, 700, 3)
x.len <- prod(x.dim)
x <- as.mutable_atomic(array(sample(1:x.len), dim = x.dim))
foo <- bench::mark(
rcl = sb_set(x, rcl = n(1:n, 1:n, 1:2), tf = \(x)-x),
idx_dims = sb_set(x, n(1:n, 1:n, 1:2), 1:3, tf = \(x)-x),
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
library(squarebrackets)
library(ggplot2)
library(data.table)
loadNamespace("bench")
library(future.apply)
x.dims <- c(1900, 1900, 3) # leads to approx 1e7 elements
x.3d <- array(1:prod(x.dims), x.dims)
x.3d2 <- as.mutable_atomic(x.3d)
sel.rows <- 1:900
sel.lyrs <- c(TRUE, FALSE, TRUE)
basefun <- function(x, rows, lyrs, tf) {
x[rows, , lyrs] <- tf(x[rows, , lyrs])
return(x)
}
tf <- function(x) { return(-1 * x) }
bm.sb_tf.3d <- bench::mark(
"base [<-" = basefun(x.3d, sel.rows, sel.lyrs, tf = tf ),
"sb_set" =  sb_set.array(x.3d2, n(sel.rows, sel.lyrs), c(1,3), tf = tf),
"sb_mod" = sb_mod.array(x.3d, rcl = n(sel.rows, NULL, sel.lyrs), tf = tf),
check = FALSE,
min_iterations = 500
)
summary(bm.sb_tf.3d)
autoplot(bm.sb_tf.3d) + ggtitle("3d")
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
Rcpp::IntegerVector coord(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
IntegerVector temp2 = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (temp2 - 1) * myprod;
}
}
}
return(out);
}
"
)
squarebrackets::sub2ind
squarebrackets:::.sub2ind_general
x.dim <- c(500, 500, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
lst <- list(1:400, 1:400, 1:20)
sub <- list(1:400, 1:400, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
)
foo
Rcpp::cppFunction(
"
IntegerVector rcpp_sub2ind_general(
List lst, int total, IntegerVector reps_each, IntegerVector reps_whole, IntegerVector xdim, IntegerVector dimcumprod
) {
int ndim = lst.length();
Rcpp::IntegerVector out(total);
IntegerVector temp = lst[0];
out = rep(temp, reps_whole[0]);
if(ndim > 1) {
for(int j = 1; j < ndim; ++j) {
int myprod = dimcumprod[j - 1];
temp = lst[j];
R_xlen_t n = temp.length() * reps_each[j];
for(int i = 0; i < reps_whole[j]; ++i) {
Range myrng = Range(n * i, n * (i + 1) - 1);
IntegerVector temp2 = rep_each(temp, reps_each[j]);
out[myrng] = out[myrng] + (temp2 - 1) * myprod;
}
}
}
return(out);
}
"
)
x.dim <- c(500, 500, 30)
dimcumprod <- as.integer(cumprod(x.dim))
x.len <- prod(x.dim)
x <- array(1:x.len, x.dim)
sub <- list(1:400, 1:400, 1:20)
n <- length(x.dim)
ns <- collapse::vlengths(sub)
total <- as.integer(prod(ns))
reps_each <- as.integer(cumprod(c(1, ns))[1:n])
reps_whole <- as.integer(total/(ns * reps_each))
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod)
)
foo
foo <- bench::mark(
squarebrackets:::.rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
rcpp_sub2ind_general(lst, total, reps_each, reps_whole, x.dim, dimcumprod),
min_iterations = 500
)
foo
?match.call
fun <- function(a, b, ...) {match.call()}
fun()
fun <- function(a, b, ...) {print(match.call())}
fun()
fun
fun <- function(a, b, ...) {print(as.list(match.call()))}
fun
fun()
fun(a=1)
?collapse::fmode
?abind::adrop
?abind::acorn
abind::acorn
abind:::acorn.default
?abind::afill
abind::afill
abind::`afill<-`
abind:::`afill<-.default`
?abind::asub
?Subscript
?data.table::uniqueN
data.table::uniqueN
?squarebrackets
?squarebrackets::`squarebrackets-package`
?`squarebrackets-package`
?squarebrackets::`squarebrackets-package`
?idx_by
library(squarebrackets)
?idx_by
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic_idx")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic_bind")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./special")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./helper")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./rcpp_related")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
print(enumerate_total)
