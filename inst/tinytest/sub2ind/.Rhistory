96/8 + 2 + 1
v <- sample(letters)
haystack <- sample(c(letters, month.abb))
collapse::fmatch(haystack, needles)
collapse::fmatch(haystack, v)
collapse::fmatch(haystack, v) |> typeof
collapse::fmatch(haystack, v) |> typeof()
collapse::gsplit
collapse::GRP
collapse::GRP.default
collapse:::switchGRP
collapse::fmatch(haystack, v)
m <- collapse::fmatch(haystack, v)
order(m)
haystack <- sample(letters, 100, TRUE)
m <- collapse::fmatch(haystack, v)
order(m)
m
Rcpp::cppFunction(
"
SEXP rcpp_match_range(SEXP x, int len) {
int *px = INTEGER(x);
SEXP res = PROTECT(Rf_allocVector(INTSXP, len));
int *pres = INTEGER(res);
for(int i = 0; i < len; ++i) {
pres[i] = px[i];
}
UNPROTECT(1);
return res;
}
"
)
match_all1 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
if(length(v) == 1L) {
out <- list(collapse::whichv(haystack, v))
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m) # basically lapply(1:length(v), \(i) which(m == i))
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
is_simple_match <- isTRUE(unlist) && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- order(m, method = "radix", na.last = TRUE, decreasing = FALSE)
out <- rcpp_match_range(out, length(m) - kit::countNA(m))
return(out)
}
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
haystack <- sample(c(letters, LETTERS, month.abb, month.name), 1e5, TRUE)
needles <- sample(letters, 1e3, TRUE)
m <- collapse::fmatch(haystack, needles)
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
haystack <- sample(c(letters, LETTERS, month.abb, month.name), 1e5, TRUE)
needles <- sample(letters, 1e3, TRUE)
m <- collapse::fmatch(haystack, needles)
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
needles <- "a"
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- order(m, method = "radix", na.last = TRUE, decreasing = FALSE)
out <- rcpp_match_range(out, length(m) - kit::countNA(m))
return(out)
}
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
needles <- "a"
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
haystack <- sample(c(letters, LETTERS, month.abb, month.name), 1e5, TRUE)
needles <- sample(letters, 1e3, TRUE)
m <- collapse::fmatch(haystack, needles)
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- collapse::radixorderv(m)
out <- rcpp_match_range(out, length(m) - kit::countNA(m))
return(out)
}
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
haystack <- sample(c(letters, LETTERS, month.abb, month.name), 1e5, TRUE)
needles <- sample(letters, 1e3, TRUE)
m <- collapse::fmatch(haystack, needles)
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
data.table::fsort()
?data.table::fsort()
?collapse::radixorderv
foo <- sample(c(1:10, NA))
foo
order(foo)
collapse::radixorderv(foo)
collapse::radixorderv(foo, na.last = NA)
match_all1 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
if(length(v) == 1L) {
out <- list(collapse::whichv(haystack, v))
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m) # basically lapply(1:length(v), \(i) which(m == i))
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- order(m, method = "radix", na.last = TRUE, decreasing = FALSE)
out <- rcpp_match_range(out, rcpp_match_last_nonNA(m))
return(out)
}
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
tempfun2 <- function(m) {
out <- collapse::radixorderv(x, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
tempfun1 <- function(m, v) {
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
tempfun2 <- function(m) {
out <- collapse::radixorderv(x, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
tempfun2 <- function(m) {
out <- collapse::radixorderv(m, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
code <- "
const int *restrict pm = INTEGER(m);
SEXP res;
int nm = Rf_length(m);
int nv = Rf_length(v);
int *buf = (int *) R_alloc(nm, sizeof(int));
int count = 0;
for(int i = 1; i <= nv; ++i) {
for(int j = 0; j < nm; ++j) {
if(pm[j] == i) {
buf[count] = j + 1;
count ++;
}
}
}
PROTECT(res = Rf_allocVector(INTSXP, count));
if(count) memcpy(INTEGER(res), buf, sizeof(int) * count);
UNPROTECT(1);
return res;
"
C_match_which <- inline::cfunction(body = code, sig = signature(m = "SEXP", v = "SEXP"), language = "C")
tempfun1 <- function(m, v) {
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
return(out)
}
tempfun2 <- function(m, v) {
return(C_match_which(m, v))
}
haystack <- letters[1:4]
needles <- c("a", "c")
m <- collapse::fmatch(haystack, needles)
tempfun2(m, unique(needles))
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
t2 = tempfun2(m, v)
haystack <- sample(c(letters, LETTERS), 1e5, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m, v),
order(m),
min_iterations = 500,
check = FALSE,
)
summary(foo)
ggplot2::autoplot(foo)
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
# root folder tests ====
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
# sub folder tests ====
subfolders <- c(
"generic", "generic2", "generic_idx", "generic_bind",
"helper", "developer", "special", "src_related", "slice", "sub2ind"
)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
path <- file.path(getwd(), subfolders) |> normalizePath()
files <- list.files(path, pattern = "*.R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total", "max.width"))
rm(list = rem)
cat("\n")
}
print(enumerate_total)
# end ====
warnings()
