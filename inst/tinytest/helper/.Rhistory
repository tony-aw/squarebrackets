# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/helper")
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
# argument i ====
x <- 1:10
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, length(x), length(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 0, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- matrix(1:50, ncol = 10)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
x <- matrix(1:50, ncol = 10)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 2, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- matrix(1:50, nrow = 10)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 1, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- data.frame(a = 1:10, b = letters[1:10])
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
x <- data.frame(a = 1:10, b = letters[1:10])
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x,1, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- data.frame(
a = 1:10, b = letters[1:10], c = factor(letters[1:10]), d = rnorm(10), e = sample(c(TRUE, FALSE, NA), TRUE)
)
x <- data.frame(
a = 1:10, b = letters[1:10], c = factor(letters[1:10]), d = rnorm(10), e = sample(c(TRUE, FALSE, NA), 10, TRUE)
)
x <- data.frame(a = 1:10, b = letters[1:10])
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x,1, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- data.frame(
a = 1:10, b = letters[1:10], c = factor(letters[1:10]), d = rnorm(10), e = sample(c(TRUE, FALSE, NA), 10, TRUE)
)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 2, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
source(file.path(getwd(), "source", "functions4testing.R"))
enumerate <- 0
# idx_by ====
for(i in 1:10) {
x <- sample(1:20)
r <- setNames(seq_along(x), names(x))
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0L, head, grp) |> as.integer(),
tapply(r, grp, head, simplify = FALSE) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
x <- letters[1:20]
r <- setNames(seq_along(x), names(x))
expect_equal(
idx_by(x, 0, head, grp),
tapply(r, grp, head, simplify = FALSE) |> unlist(use.names = TRUE)
) |> errorfun()
enumerate <- enumerate + 2
}
# idx_ord ====
samples <- list(
rep(c(TRUE, FALSE), 25),
as.integer(1:25),
as.double(1:25),
letters,
as.factor(letters)
)
for(i_na.last in c(TRUE, FALSE)) {
for(j_decr in c(TRUE, FALSE)) {
for(k_method in c("auto", "shell", "radix")) {
for(l_sample in 1:length(samples)) {
for(m_rep in 1:10) {
x <- sample(samples[[l_sample]], size = 25)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- matrix(x, ncol = 5)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], x[5,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 2, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.data.frame(x)
expect_equal(
idx_ord_df(x, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
enumerate <- enumerate + 3
}
}
}
}
}
################################################################################
# idx_r ====
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
# argument i ====
x <- 1:10
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, length(x), length(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 0, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
################################################################################
# array arguments ====
x <- matrix(1:50, ncol = 10)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 2, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- matrix(1:50, nrow = 10)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 1, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
################################################################################
# data.frame arguments ====
x <- data.frame(a = 1:10, b = letters[1:10])
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x,1, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- data.frame(
a = 1:10, b = letters[1:10], c = factor(letters[1:10]), d = rnorm(10), e = sample(c(TRUE, FALSE, NA), 10, TRUE)
)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
idx_r(x, 2, slice_start[i], slice_end[j], slice_by[[k]]),
seq(seq_start[i], seq_end[j], seq_by)
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
