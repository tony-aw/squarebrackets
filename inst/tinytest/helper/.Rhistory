# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/helper")
source(file.path(getwd(), "source", "functions4testing.R"))
enumerate <- 0
for(i in 1:10) {
r <- sample(1:20)
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(head, r, grp) |> as.integer(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.integer()
) |> errorfun()
r <- sample(letters[1:20])
expect_equal(
idx_by(head, r, grp) |> as.character(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.character()
) |> errorfun()
enumerate <- enumerate + 2
}
for(i in 1:10) {
X <- sample(1:20)
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0, head, grp) |> as.integer(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.integer()
) |> errorfun()
r <- sample(letters[1:20])
expect_equal(
idx_by(x, 0, head, grp) |> as.character(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.character()
) |> errorfun()
enumerate <- enumerate + 2
}
for(i in 1:10) {
x <- sample(1:20)
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0, head, grp) |> as.integer(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.integer()
) |> errorfun()
r <- sample(letters[1:20])
expect_equal(
idx_by(x, 0, head, grp) |> as.character(),
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.character()
) |> errorfun()
enumerate <- enumerate + 2
}
x <- sample(1:20)
grp <- factor(sample(letters[1:20]))
idx_by(x, 0, head, grp)
tapply(r, grp, head) |> unlist(use.names = FALSE) |> as.integer()
expect_equal(
idx_by(x, 0, head, grp) |> as.integer(),
tapply(x, grp, head) |> unlist(use.names = FALSE) |> as.integer()
) |> errorfun()
tapply(x, grp, head) |> unlist(use.names = FALSE) |> as.integer()
idx_by(x, 0, head, grp) |> as.integer()
?idx_bby
?idx_by
# vectors ====
(a <- 1:20)
(grp <- factor(rep(letters[1:5], each = 4)))
# get the last element of `a` for each group in `grp`:
i <- idx_by(a, 0L, last, grp)
sb_x(cbind(a, grp), row = i)
# data.frame ====
x <- data.frame(
a = sample(1:20),
b = letters[1:20],
group = factor(rep(letters[1:5], each = 4))
)
print(x)
# get the first row for each group in data.frame `x`:
row <- idx_by(x, 1, first, x$group)
sb2_x(x, row)
# get the first row for each group for which a > 10:
x2 <- sb2_x(x, filter = ~ a > 10)
row <- na.omit(idx_by(x2, 1, first, x2$group))
sb2_x(x2, row)
expect_equal(
idx_by(x, 0, head, grp) |> as.integer(),
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
x <- sample(1:20)
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0, head, grp) |> as.integer(),
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
idx_by(x, 0, head, grp) |> as.integer()
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.integer()
?tapply
x <- sample(1:20)
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0, head, grp) |> as.integer(),
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
idx_by(x, 0L, head, grp) |> as.integer()
idx_by(x, 0L, head, grp) |> as.integer()
tapply(x, grp, head)
tapply(x, grp, head, simplify = FALSE)
collapse::BY.default(x, grp, head)
x <- 1:20
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0L, head, grp) |> as.integer(),
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
x <- sample(letters[1:20])
expect_equal(
idx_by(x, 0, head, grp) |> as.character(),
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.character()
) |> errorfun()
x <- letters[1:20]
idx_by(x, 0, head, grp) |> as.character()
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.character()
x <- letters[1:20]
idx_by(x, 0, head, grp)
x <- sample(1:20)
r <- setNames(seq_along(x), names(x))
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0L, head, grp) |> as.integer(),
tapply(r, grp, head) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
x <- letters[1:20]
r <- setNames(seq_along(x), names(x))
expect_equal(
idx_by(x, 0, head, grp) |> as.character(),
tapply(x, grp, head) |> unlist(use.names = TRUE) |> as.character()
) |> errorfun()
tapply(r, grp, head) |> unlist(use.names = TRUE) |> as.character()
x <- letters[1:20]
r <- setNames(seq_along(x), names(x))
expect_equal(
idx_by(x, 0, head, grp),
tapply(r, grp, head) |> unlist(use.names = TRUE)
) |> errorfun()
x <- letters[1:20]
r <- setNames(seq_along(x), names(x))
idx_by(x, 0, head, grp)
tapply(r, grp, head) |> unlist(use.names = TRUE)
expect_equal(
idx_by(x, 0, head, grp),
tapply(r, grp, head) |> unlist(use.names = TRUE)
) |> errorfun()
tapply(r, grp, head) |> unlist(use.names = TRUE)
idx_by(x, 0, head, grp)
tapply(r, grp, head) |> unlist(use.names = TRUE) == idx_by(x, 0, head, grp)
tapply(r, grp, head) |> unlist(use.names = TRUE)
expect_equal(
idx_by(x, 0, head, grp),
tapply(r, grp, head) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
tapply(r, grp, head) |> unlist(use.names = TRUE) |> as.integer()
tapply(r, grp, head) |> unlist(use.names = TRUE)
idx_by(x, 0, head, grp)
idx_by(x, 0, head, grp) |> attributes()
tapply(r, grp, head) |> unlist(use.names = TRUE) |> attributes()
tapply(r, grp, head) |> unlist(use.names = TRUE)
tapply(r, grp, head) |> unlist(use.names = TRUE) |> class()
tapply(r, grp, head) |> unlist(use.names = TRUE) |> as.vector()
tapply(r, grp, head)
tapply(r, grp, head, simplify = FALSE)
expect_equal(
idx_by(x, 0, head, grp),
tapply(r, grp, head, simplify = FALSE) |> unlist(use.names = TRUE)
) |> errorfun()
for(i in 1:10) {
x <- sample(1:20)
r <- setNames(seq_along(x), names(x))
grp <- factor(sample(letters[1:20]))
expect_equal(
idx_by(x, 0L, head, grp) |> as.integer(),
tapply(r, grp, head, simplify = FALSE) |> unlist(use.names = TRUE) |> as.integer()
) |> errorfun()
x <- letters[1:20]
r <- setNames(seq_along(x), names(x))
expect_equal(
idx_by(x, 0, head, grp),
tapply(r, grp, head, simplify = FALSE) |> unlist(use.names = TRUE)
) |> errorfun()
enumerate <- enumerate + 2
}
samples <- list(
rep(c(TRUE, FALSE), 25),
as.integer(1:25),
as.double(1:25),
letters,
as.factor(letters)
)
for(i_na.last in c(TRUE, FALSE)) {
for(j_decr in c(TRUE, FALSE)) {
for(k_method in c("auto", "shell", "radix")) {
for(l_sample in 1:length(samples)) {
for(m_rep in 1:10) {
x <- sample(samples[[l_sample]], size = 25)
expect_equal(
idx_ord_v(x, i_na.last, j_decr, k_method),
order(x, na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- matrix(x, ncol = 5)
expect_equal(
idx_ord_m(x, 1, i_na.last, j_decr, k_method),
order(x[1,], x[2,], x[3,], x[4,], x[5,], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
expect_equal(
idx_ord_m(x, 2, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
x <- as.data.frame(x)
expect_equal(
idx_ord_df(x, i_na.last, j_decr, k_method),
order(x[, 1], x[, 2], x[, 3], x[, 4], x[, 5], na.last = i_na.last, decreasing = j_decr, method = k_method)
) |> errorfun()
enumerate <- enumerate + 3
}
}
}
}
}
