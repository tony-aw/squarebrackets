m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- collapse::radixorderv(m)
out <- rcpp_match_range(out, length(m) - kit::countNA(m))
return(out)
}
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
haystack <- sample(c(letters, LETTERS, month.abb, month.name), 1e5, TRUE)
needles <- sample(letters, 1e3, TRUE)
m <- collapse::fmatch(haystack, needles)
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
data.table::fsort()
?data.table::fsort()
?collapse::radixorderv
foo <- sample(c(1:10, NA))
foo
order(foo)
collapse::radixorderv(foo)
collapse::radixorderv(foo, na.last = NA)
match_all1 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
if(length(v) == 1L) {
out <- list(collapse::whichv(haystack, v))
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m) # basically lapply(1:length(v), \(i) which(m == i))
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- order(m, method = "radix", na.last = TRUE, decreasing = FALSE)
out <- rcpp_match_range(out, rcpp_match_last_nonNA(m))
return(out)
}
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
tempfun2 <- function(m) {
out <- collapse::radixorderv(x, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
tempfun1 <- function(m, v) {
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
tempfun2 <- function(m) {
out <- collapse::radixorderv(x, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
tempfun2 <- function(m) {
out <- collapse::radixorderv(m, na.last = NA)
return(out)
}
foo <- bench::mark(
t1 =  tempfun1(m, v),
t2 = tempfun2(m),
check = FALSE,
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
order(NA)
haystack <- letters
needles <- LETERS
needles <- LETTERS
collapse::fmatch(haystack, needles)
?collapse::fmatch(haystack, needles)
collapse::fmatch(haystack, needles, nomatch = NULL)
collapse::fmatch(haystack, c(needles, "A"))
collapse::fmatch(haystack, c(needles, "a"))
collapse::fmatch(haystack, c(needles, "b"))
code <- "
const int *restrict px = INTEGER(x);
SEXP res;
int n = Rf_length(x);
int *buf = (int *) R_alloc(n, sizeof(int));
int count = 0;
for(int i = 0; i < n; ++i) {
if(px[i] != NA_INTEGER) {
buf[count] = i + 1;
count++;
}
}
PROTECT(res = Rf_allocVector(INTSXP, count));
if(count) memcpy(INTEGER(res), buf, sizeof(int) * count);
UNPROTECT(1);
return res;
"
C_match_order <- inline::cfunction(body = code, sig = signature(x = "SEXP"), language = "C")
haystack <- c(LETTERS, "b")
needles <- c(letters, "A")
haystack <- c(LETTERS, "b")
needles <- c(letters, "A")
m <- collapse::fmatch(haystack, needles)
C_match_order(m)
m
haystack <- c(LETTERS)
needles <- c(letters)
m <- collapse::fmatch(haystack, needles)
m
C_match_order(m)
m
C_match_order(m)
tempfun1 <- function(m, v) {
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
return(out)
}
tempfun2 <- function(m) {
out <- C_match_order(m)
return(out)
}
haystack <- letters[1:4]
needles <- c("a", "c")
m <- collapse::fmatch(haystack, needles)
order(m)[1:2]
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
foo <- bench::mark(
t2 = tempfun2(m, v),
t1 =  tempfun1(m, v),
order(m),
min_iterations = 500,
check = FALSE,
)
foo <- bench::mark(
t2 = tempfun2(m),
t1 =  tempfun1(m, v),
order(m),
min_iterations = 500,
check = FALSE,
)
summary(foo)
ggplot2::autoplot(foo)
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
match_all1 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
if(length(v) == 1L) {
out <- list(collapse::whichv(haystack, v))
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m) # basically lapply(1:length(v), \(i) which(m == i))
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
n.groups <- length(v)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- C_match_order(m)
return(out)
}
attr(m, "N.groups") <- n.groups
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == n.groups) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
haystack <- letters[1:4]
needles <- c("a", "c")
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
haystack <- sample(c(letters, LETTERS, month.abb, month.name), 2e6, TRUE)
needles <- "a"
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
needles <- rep("a", 1e4)
haystack <- sample(c(letters, LETTERS, month.abb, month.name), 1e5, TRUE)
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
match_all <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
n.groups <- length(v)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- C_match_order(m)
return(out)
}
attr(m, "N.groups") <- n.groups
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == n.groups) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/helper")
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
library(tinytest)
needles <- list(
c("a", "c"),
"ab",
c("ac", "ab", "ab", "ac"), # to check duplicates AND ordering
character(0),
general_names,
c(general_names, "ab", "ab"),
letters,
LETTERS
)
haystack <- list(
c("a", "c"),
"ab",
c("ac", "ab", "ab", "ac"),
NA,
character(0),
general_names,
c(general_names, "ab", "ab", NA),
letters,
LETTERS
)
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
general_names <- combn(letters, 2) |> apply(2, paste, collapse = "")
needles <- list(
c("a", "c"),
"ab",
c("ac", "ab", "ab", "ac"), # to check duplicates AND ordering
character(0),
general_names,
c(general_names, "ab", "ab"),
letters,
LETTERS
)
haystack <- list(
c("a", "c"),
"ab",
c("ac", "ab", "ab", "ac"),
NA,
character(0),
general_names,
c(general_names, "ab", "ab", NA),
letters,
LETTERS
)
tempfun <- function(needles, haystack) {
if(length(na.omit(needles)) == 0 || length(na.omit(haystack)) == 0) {
return(integer(0))
}
return(lapply(na.omit(needles), \(j) which(na.omit(haystack) == j)) |> unlist())
}
for(iNeedles in needles) {
for(iHaystack in haystack) {
expect_equal(
tempfun(iNeedles, iHaystack),
match_all(iNeedles, iHaystack)
) |> errorfun()
enumerate <- enumerate + 1
}
}
tempfun(iNeedles, iHaystack)
match_all(iNeedles, iHaystack)
iNeedles
iHaystack
collapse::fmatch(iHaystack, iNeedles)
tempfun(iNeedles, iHaystack)
collapse::fmatch(iHaystack, iNeedles) |> C_match_order
collapse::fmatch(iHaystack, iNeedles) |> C_match_order()
collapse::fmatch(iHaystack, iNeedles) |> sort() |> C_match_order()
