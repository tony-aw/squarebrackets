x <- array(seq_len(10^4), dim = c(10, 10, 10, 10))
rownames(x) <- c(letters[1:8], "a", NA)
idx <- list(c("a"), c(1:3), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
rp <- seq_len(length(sb_x(x, idx, dims)))* -1
lst <- .rcpp_seq_mlen(as.integer(dims))
for(i in seq_along(dims)) {
lst[[dims[i]]] <- .indx_make_dim(
idx[[i]], x, dim.L = dims[i], chkdup = chkdup, inv = inv, abortcall
)
}
chkdup = TRUE
inv = FALSE
lst <- .rcpp_seq_mlen(as.integer(dims))
for(i in seq_along(dims)) {
lst[[dims[i]]] <- .indx_make_dim(
idx[[i]], x, dim.L = dims[i], chkdup = chkdup, inv = inv, abortcall
)
}
lst <- .rcpp_seq_mlen(as.integer(dims))
for(i in seq_along(dims)) {
lst[[dims[i]]] <- .indx_make_dim(
idx[[i]], x, dim.L = dims[i], chkdup = chkdup, inv = inv, abortcall
)
}
inv
idx
x
ndims <- length(dim(x))
.arr_check(x, idx, dims, ndims, abortcall)
.arr_length(x, lst, dims)
rp
x.dim <- dim(x)
spec.dimsize <- collapse::vlengths(lst[dims])
spec.dimsize
dims
lst
unspec.dimsize <- x.dim[-dims]
prod(spec.dimsize, unspec.dimsize)
sb_x(x, idx=idx, dims=dims)
sb_x(x, idx=idx, dims=dims) |> length()
-dims
x.dim
x.dim[-dims]
spec.dimsize
prod(spec.dimsize, unspec.dimsize)
library(tinytest)
library(squarebrackets)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
# as.mutable_atomic vs mutable_atomic ====
x <- 1:10
names(x) <- letters[1:10]
expect_equal(
as.mutable_atomic(x),
mutable_atomic(1:10, names = letters[1:10])
)
x <- matrix(1:20, ncol = 4)
colnames(x) <- letters[1:4]
expect_equal(
as.mutable_atomic(x),
mutable_atomic(1:20, dim = c(4, 5), dimnames = list(NULL, letters[1:4]))
)
expect_equal(
as.mutable_atomic(x),
mutable_atomic(1:20, dim = c(5, 4), dimnames = list(NULL, letters[1:4]))
)
expect_equal(
as.mutable_atomic(x),
mutable_atomic(1:20, dim = c(5, 4), dimnames = n(NULL, letters[1:4]))
)
expect_equal(
as.mutable_atomic(x),
mutable_atomic(1:27, dim = c(3,3,3), dimnames = n(NULL, NULL, letters[1:3]))
)
x <- array(1:27, dim = c(3,3,3))
dimnames(x) <- n(NULL, NULL, letters[1:3])
x
expect_equal(
as.mutable_atomic(x),
mutable_atomic(1:27, dim = c(3,3,3), dimnames = n(NULL, NULL, letters[1:3]))
)
as.mutable_atomic(x)
mutable_atomic(1:27, dim = c(3,3,3), dimnames = n(NULL, NULL, letters[1:3]))
mutable_atomic(1:27, dim = c(3,3,3), dimnames = n(NULL, NULL, letters[1:3]))
?filter
library(squarebrackets)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "goodpractice", "tinytest", "rhub", "V8")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
x <- mutable_atomic(sample(1:100), dim = c(10,10))
View(x)
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
rows <- list(
2, 2:10, 1:nrow(x)
)
cols <- list(
2, 2:10, 1:ncol(x)
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
rows <- list(
2, 2:10, 1:nrow(x), NULL
)
cols <- list(
2, 2:10, 1:ncol(x), NULL
)
for(iD in seq_len(x.data)) {
for(iRow in 1:3) {
for(iCol in 1:3) {
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
x2[ rows[[iRow]], cols[[iCol]] ] <- x2[ rows[[iRow]], cols[[iCol]] ] * -1
rp <- x[ rows[[iRow]], cols[[iCol]] ] * -1
sb_set(x, row = rows[[iRow]], col = cols[[iCol]], rp = rp)
expect_equal(
x,
x2
)
enumerate <- enumerate + 1
}
}
}
for(iD in 1:4) {
for(iRow in 1:3) {
for(iCol in 1:3) {
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
x2[ rows[[iRow]], cols[[iCol]] ] <- x2[ rows[[iRow]], cols[[iCol]] ] * -1
rp <- x[ rows[[iRow]], cols[[iCol]] ] * -1
sb_set(x, row = rows[[iRow]], col = cols[[iCol]], rp = rp)
expect_equal(
x,
x2
)
enumerate <- enumerate + 1
}
}
}
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
rows <- list(
2, 2:10, 1:nrow(x), NULL
)
cols <- list(
2, 2:10, 1:ncol(x), NULL
)
for(iD in 1:4) {
for(iRow in 1:3) {
for(iCol in 1:3) {
temp.row <- rows[[iRow]]
temp.col <- cols[[iCol]]
if(is.null(temp.row)) temp.row <- 1:nrow(x)
if(is.null(temp.col)) temp.col <- 1:ncol(x)
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
x2[ temp.row, temp.col ] <- x2[ temp.row, temp.col ] * -1
rp <- x[ temp.row, temp.col ] * -1
sb_set(x, row = rows[[iRow]], col = cols[[iCol]], rp = rp)
expect_equal(
x,
x2
)
enumerate <- enumerate + 1
}
}
}
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
rows <- list(
2, 2:10, 1:nrow(x), NULL
)
cols <- list(
2, 2:10, 1:ncol(x), NULL
)
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
rows <- list(
2, 2:10, 1:nrow(x), NULL
)
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
rows <- list(
2, 2:10, 1:10, NULL
)
cols <- list(
2, 2:10, 1:10, NULL
)
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
x.nrow <- 10
x.ncol <- 10
rows <- list(
2, 5:10, 1:x.nrow, NULL
)
cols <- list(
2, 5:10, 1:x.ncol, NULL
)
for(iD in 1:4) {
for(iRow in 1:3) {
for(iCol in 1:3) {
temp.row <- rows[[iRow]]
temp.col <- cols[[iCol]]
if(is.null(temp.row)) temp.row <- 1:nrow(x)
if(is.null(temp.col)) temp.col <- 1:ncol(x)
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
x2[ temp.row, temp.col ] <- x2[ temp.row, temp.col ] * -1
rp <- x[ temp.row, temp.col ] * -1
sb_set(x, row = rows[[iRow]], col = cols[[iCol]], rp = rp)
expect_equal(
x,
x2
)
enumerate <- enumerate + 1
}
}
}
quantile(letters)
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
x.nrow <- 10
x.ncol <- 10
rows <- list(
2, 5:10, 1:x.nrow, NULL
)
cols <- list(
2, 5:10, 1:x.ncol, NULL
)
for(iD in 1:4) {
for(iRow in 1:3) {
for(iCol in 1:3) {
temp.row <- rows[[iRow]]
temp.col <- cols[[iCol]]
if(is.null(temp.row)) temp.row <- 1:nrow(x)
if(is.null(temp.col)) temp.col <- 1:ncol(x)
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
x2[ temp.row, temp.col ] <- sort(x2[ temp.row, temp.col ])
rp <- sort(x[ temp.row, temp.col ])
sb_set(x, row = rows[[iRow]], col = cols[[iCol]], rp = rp)
expect_equal(
x,
x2
)
enumerate <- enumerate + 1
}
}
}
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
x.nrow <- 10
x.ncol <- 10
rows <- list(
2, 5:10, 1:x.nrow, NULL
)
cols <- list(
2, 5:10, 1:x.ncol, NULL
)
for(iD in 1:4) {
for(iRow in 1:3) {
for(iCol in 1:3) {
temp.row <- rows[[iRow]]
temp.col <- cols[[iCol]]
if(is.null(temp.row)) temp.row <- 1:nrow(x)
if(is.null(temp.col)) temp.col <- 1:ncol(x)
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
x2[ temp.row, temp.col ] <- sort(x2[ temp.row, temp.col ])
rp <- sort(x[ temp.row, temp.col ])
sb_set(x, row = rows[[iRow]], col = cols[[iCol]], rp = rp)
expect_equal(
x,
x2
) |> errorfun()
enumerate <- enumerate + 1
}
}
}
# setapply ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
for(iD in 1:4) {
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
for(i in 1:ncol(x)) x2[i,] <- sort(x2[i,])
setapply(x, 1, sort)
expect_equal(
x,
as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
x <- mutable_atomic(sample(1:100), dim = c(10,10))
x2 <- x
for(i in 1:nrow(x)) x2[i,] <- sort(x2[i,])
setapply(x, 1, sort)
expect_equal(
x,
as.mutable_atomic(x2)
)
x <- mutable_atomic(sample(1:100), dim = c(10,10))
x <- mutable_atomic(sample(1:90), dim = c(9,10))
x2 <- x
for(i in 1:nrow(x)) x2[i,] <- sort(x2[i,])
setapply(x, 1, sort)
expect_equal(
x,
as.mutable_atomic(x2)
)
x <- mutable_atomic(sample(1:90), dim = c(9,10))
x2 <- x
for(i in 1:ncol(x)) x2[,i] <- sort(x2[,i])
setapply(x, 2, sort)
expect_equal(
x,
as.mutable_atomic(x2)
)
# setapply ====
x.data <- list(
sample(c(TRUE, FALSE), 90, TRUE),
sample(1:90),
rnorm(90),
sample(c(letters, LETTERS), 90, TRUE)
)
# setapply ====
x.data <- list(
sample(c(TRUE, FALSE), 90, TRUE),
sample(1:90),
rnorm(90),
sample(c(letters, LETTERS), 90, TRUE)
)
for(iD in 1:4) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:nrow(x)) x2[i,] <- sort(x2[i,])
setapply(x, 1, sort)
expect_equal(
x,
as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
for(iD in 1:4) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:ncol(x)) x2[i,] <- sort(x2[i,])
setapply(x, 2, sort)
expect_equal(
x,
as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
for(iD in 1:4) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:ncol(x)) x2[,i] <- sort(x2[,i])
setapply(x, 2, sort)
expect_equal(
x,
as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
# set-up ====
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# sb_set.matrix() ====
x.data <- list(
sample(c(TRUE, FALSE), 100, TRUE),
sample(1:100),
rnorm(100),
sample(c(letters, LETTERS), 100, TRUE)
)
x.nrow <- 10
x.ncol <- 10
rows <- list(
2, 5:10, 1:x.nrow, NULL
)
cols <- list(
2, 5:10, 1:x.ncol, NULL
)
for(iD in 1:4) {
for(iRow in 1:3) {
for(iCol in 1:3) {
temp.row <- rows[[iRow]]
temp.col <- cols[[iCol]]
if(is.null(temp.row)) temp.row <- 1:nrow(x)
if(is.null(temp.col)) temp.col <- 1:ncol(x)
x <- mutable_atomic(x.data[[iD]], dim = c(10,10))
x2 <- x
x2[ temp.row, temp.col ] <- sort(x2[ temp.row, temp.col ])
rp <- sort(x[ temp.row, temp.col ])
sb_set(x, row = rows[[iRow]], col = cols[[iCol]], rp = rp)
expect_equal(
x,
x2
) |> errorfun()
enumerate <- enumerate + 1
}
}
}
# setapply ====
x.data <- list(
sample(c(TRUE, FALSE), 90, TRUE),
sample(1:90),
rnorm(90),
sample(c(letters, LETTERS), 90, TRUE)
)
for(iD in 1:4) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:nrow(x)) x2[i,] <- sort(x2[i,])
setapply(x, 1, sort)
expect_equal(
x,
as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
for(iD in 1:4) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:ncol(x)) x2[,i] <- sort(x2[,i])
setapply(x, 2, sort)
expect_equal(
x,
as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
