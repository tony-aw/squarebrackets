)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
seq_by <- ifelse(seq_start > seq_end, -1, 1) * c(1, 2, 2, 2)
seq_by
seq_by <- ifelse(seq_start > seq_end, -1, 1) * c(1, , 2, 2)
seq_by <- ifelse(seq_start > seq_end, -1, 1) * c(1, 1, 2, 2)
seq_start > seq_end
i=1
j=1
k=1
# argument i ====
x <- 1:10
slice_start <- list(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, length(x), length(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * slice_by[[k]]
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
)
slice_start[i]
slice_start <- c(
1, 2, 1-1i, 2-1i
)
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
)
# argument i ====
x <- 1:10
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, length(x), length(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * slice_by[[k]]
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
)
}
}
}
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * slice_by[[k]]
seq_start[i]
seq_end[j]
slice_by[[k]]
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * slice_by[[k]]
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
)
}
}
}
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * slice_by[[k]]
is.null(slice_by[[k]]
)
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
seq(seq_start[i], seq_end[j], seq_by)
slice(slice_start[i], slice_end[j], slice_by[[k]])
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# argument i ====
x <- 1:10
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, length(x), length(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * slice_by[[k]]
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
)
}
}
}
slice(slice_start[i], slice_end[j], slice_by[[k]])
seq_start[i], seq_end[j], seq_by)
seq(seq_start[i], seq_end[j], seq_by)
seq_start[i] > seq_end[j]
slice_start[i]
slice_end[j]
slice_by[[k]]
seq_by
seq_start[i] > seq_end[j]
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * slice_by[[k]]
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
!is.null(slice_by[[k]])
slice_by[[k]]
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
)
}
}
}
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
# argument i ====
x <- 1:10
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, length(x), length(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
) |> errorfun()
}
}
}
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
# argument i ====
x <- 1:10
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, length(x), length(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, length(x), length(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by)]
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- matrix(1:20, ncol = 5)
x <- matrix(1:20, ncol = 5)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, col = slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[, seq(seq_start[i], seq_end[j], seq_by)]
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
expect_equal(
sb_x(x, col = slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[, seq(seq_start[i], seq_end[j], seq_by), drop = FALSE]
) |> errorfun()
x <- matrix(1:50, ncol = 10)
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, ncol(x), ncol(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, col = slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[, seq(seq_start[i], seq_end[j], seq_by), drop = FALSE]
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- data.frame(a = 1:10, by = letters[1:10])
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb_x(x, col = slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[, seq(seq_start[i], seq_end[j], seq_by), drop = FALSE]
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
expect_equal(
sb2_x(x, col = slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[, seq(seq_start[i], seq_end[j], seq_by), drop = FALSE]
) |> errorfun()
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb2_x(x, col = slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[, seq(seq_start[i], seq_end[j], seq_by), drop = FALSE]
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x <- data.frame(a = 1:10, by = letters[1:10])
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb2_x(x, row = slice(slice_start[i], slice_end[j], slice_by[[k]])),
x[seq(seq_start[i], seq_end[j], seq_by), drop = FALSE, ]
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
x[seq(seq_start[i], seq_end[j], seq_by), drop = FALSE, ]
sb2_x(x, row = slice(slice_start[i], slice_end[j], slice_by[[k]]))
expect_equal(
sb2_x(x, row = slice(slice_start[i], slice_end[j], slice_by[[k]])),
collapse::ss(x, j = seq(seq_start[i], seq_end[j], seq_by))
) |> errorfun()
expect_equal(
sb2_x(x, row = slice(slice_start[i], slice_end[j], slice_by[[k]])),
collapse::ss(x, i = seq(seq_start[i], seq_end[j], seq_by))
) |> errorfun()
x <- data.frame(a = 1:10, b = letters[1:10])
slice_start <- c(
1, 2, 1-1i, 2-1i
)
seq_start <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_end <- c(
1, 2, 1-1i, 2-1i
)
seq_end <- c(
1, 2, nrow(x), nrow(x) - 1
)
slice_by <- list(
1, -1, 2, -2, NULL
)
for(i in seq_along(slice_start)) {
for(j in seq_along(slice_end)) {
for(k in seq_along(slice_by)) {
if(!is.null(slice_by[[k]])) {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1) * abs(slice_by[[k]])
} else {
seq_by <- ifelse(seq_start[i] > seq_end[j], -1, 1)
}
expect_equal(
sb2_x(x, row = slice(slice_start[i], slice_end[j], slice_by[[k]])),
collapse::ss(x, i = seq(seq_start[i], seq_end[j], seq_by))
) |> errorfun()
enumerate <- enumerate + 1L
}
}
}
library(squarebrackets)
enumerate <- 0L
# recursive vector ====
x <- lapply(1:20, \(x)sample(letters))
expect_equal(
sb2_x(x, 2, red = TRUE),
x[[2L]]
)
library(tinytest)
enumerate <- 0L
# recursive vector ====
x <- lapply(1:20, \(x)sample(letters))
expect_equal(
sb2_x(x, 2, red = TRUE),
x[[2L]]
)
expect_equal(
sb2_x(x, red = TRUE),
x
)
enumerate <- enumerate + 2L
# recursive matrix ====
x <- matrix(lapply(1:20, \(x)sample(letters)), ncol = 4)
expect_equal(
sb2_x(x, 2, red = TRUE),
x[[2,2]]
)
x <- matrix(lapply(1:20, \(x)sample(letters)), ncol = 1)
expect_equal(
sb2_x(x, 2L, 1L, red = TRUE),
x[[2,1]]
)
x <- matrix(lapply(1:20, \(x)sample(letters)), nrow = 1)
expect_equal(
sb2_x(x, 2L, 2L, red = TRUE),
x[[1,2]]
)
expect_equal(
sb2_x(x, red = TRUE),
x
)
enumerate <- enumerate + 3L
# recursive array ====
x <- array(lapply(1:27, \(x)sample(letters)), c(3,3,3))
expect_equal(
sb2_x(x, 2, red = TRUE),
x[[2,2,2]]
)
expect_equal(
sb2_x(x, red = TRUE),
x
)
x <- array(lapply(1:20, \(x)sample(letters)), c(4,1,5))
expect_equal(
sb2_x(x, 2, c(1,3), red = TRUE),
x[[2,1,2]]
)
expect_equal(
sb2_x(x, red = TRUE),
x
)
enumerate <- enumerate + 2L
idx(x)
idx.default(x)
x <- data.frame(a = 1:12, b = month.abb)
idx(x)
idx(x, margin = 1)
