pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:27, dim = c(3,3,3))
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, ~ 1),
pattern = "`FUN` must be a function"
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, \(x)x[1]),
pattern = "improper function given"
)
expect_error(
setapply(x, margin, \(x)as.character(x)),
pattern = "improper function given"
)
enumerate <- enumerate + 5
margin <- 2
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:27, dim = c(3,3,3))
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, ~ 1),
pattern = "`FUN` must be a function"
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, \(x)x[1]),
pattern = "improper function given"
)
expect_error(
setapply(x, margin, \(x)as.character(x)),
pattern = "improper function given"
)
enumerate <- enumerate + 5
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, 3, rev),
pattern = "`MARGIN` must be 1 or 2"
)
enumerate <- enumerate + 1
# main checks ====
x.data <- list(
sample(c(TRUE, FALSE, NA), 90, TRUE),
sample(c(1:88, NA, NA)),
rnorm(90),
sample(c(NA, NaN, Inf, -Inf, 0), 90, TRUE),
sample(c(letters, LETTERS, NA, NA), 90, TRUE),
sample(c(as.complex(1:89), NA)),
as.raw(0:89),
rep(NA, 90)
)
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:nrow(x)) x2[i,] <- rev(x2[i,])
setapply(x, 1, rev)
invisible(x) # waking up R
expect_equal(
x, as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:ncol(x)) x2[,i] <- rev(x2[,i])
setapply(x, 2, rev)
expect_equal(
x, as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "goodpractice", "tinytest", "rhub", "V8")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
rnorm(125),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(125), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
values <- c(
TRUE, 2, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
iD=1
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[iD])
x2[ ind ] <- rps[iD]
values <- c(
TRUE, 2, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- c(
FALSE, -2, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[iD])
x2[ ind ] <- rps[iD]
sb_set(x, temp.ind, rp = rps[iD])
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[iD])
x2[ ind ] <- rps[iD]
ma_setv(x, values[iD], rps[iD])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x
x2
x==x2
expect_equal(
x, as.mutable_atomic(x2)
) |> errorfun()
all(x==x2, na.rm = TRUE)
class(x)
class(x2)
x
x2
rps[iD]
typeof(x)
typeof(x2)
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[iD])
x2[ ind ] <- rps[iD]
rps[iD]
rps <- list(
FALSE, -2, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(125), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
values <- list(
TRUE, 2, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- list(
FALSE, -2, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(125), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
values <- list(
TRUE, 2, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- list(
FALSE, -2, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
enumerate <- enumerate + 2
}
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
values <- list(
TRUE, 2L, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- list(
FALSE, -2L, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(125), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
values <- list(
TRUE, 2L, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- list(
FALSE, -2L, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
enumerate <- enumerate + 2
}
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(123), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
values <- list(
TRUE, 2L, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- list(
FALSE, -2L, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
enumerate <- enumerate + 2
}
x <- mutable_atomic(x.data[[iD]])
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "goodpractice", "tinytest", "rhub", "V8")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(123), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(123), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
values <- list(
TRUE, 2L, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- list(
FALSE, -2L, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
enumerate <- enumerate + 2
}
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(123), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124),
rep(NA, 125)
)
values <- list(
TRUE, 2L, 2.5, Inf, "A", as.complex(3), as.raw(0), NA
)
rps <- list(
FALSE, -2L, -2.5, -Inf, "XXX", as.complex(1), as.raw(1), TRUE
)
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
enumerate <- enumerate + 2
}
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
x.data <- list(
sample(c(TRUE, FALSE, NA), 125, TRUE),
sample(c(1:123, NA, NA)),
c(2.5, rnorm(123), 2.5),
sample(c(NA, NaN, -Inf, Inf, 0), 125, TRUE),
sample(c(letters, LETTERS, NA, NA), 125, TRUE),
as.complex(c(1:124, NA)),
as.raw(0:124)
)
values <- list(
TRUE, 2L, 2.5, Inf, "A", as.complex(3), as.raw(0)
)
rps <- list(
FALSE, -2L, -2.5, -Inf, "XXX", as.complex(1), as.raw(1)
)
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]])
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
x <- mutable_atomic(x.data[[iD]], dim = c(5, 5, 5))
x2 <- x
ind <- which(x == values[[iD]])
x2[ ind ] <- rps[[iD]]
ma_setv(x, values[[iD]], rps[[iD]])
invisible(x) # waking up R
expect_equal(
x, x2
) |> errorfun()
enumerate <- enumerate + 2
}
