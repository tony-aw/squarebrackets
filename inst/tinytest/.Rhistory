}
"
args <- sprintf("as<IntegerVector>(ind[%d])", 0:5)
rp <- sapply(2:6, \(i) stri_c(args[1:i], collapse = ", "))
tailers <- stri_replace_all_fixed(
tailers,
sprintf("<args%d>", 2:6),
rp,
vectorize_all = FALSE
)
rcpp_code <- paste(c(headers, rcpp_scripts, tailers), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
DTYPES <- 2:6
all_args <- stri_c("IntegerVector ind", 1:6)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();",
"int nn = ind6.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- rev(c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"ind1[i]",
"dimcumprod[0] * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)",
"dimcumprod[4] * (ind6[n] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<startfor>
flatind[counter] = <main>;
counter++;
<endfor>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[1:i], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
library(stringi)
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[1:i], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
DTYPES <- 2:6
all_args <- stri_c("IntegerVector ind", 1:6)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();",
"int nn = ind6.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- rev(c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"ind1[i]",
"dimcumprod[0] * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)",
"dimcumprod[4] * (ind6[n] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<startfor>
flatind[counter] = <main>;
counter++;
<endfor>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[1:i], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
fileConn <- file("src/dynamic_rcpp_sub2ind_d.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
temp.fun <- function(x, ...) {
return(x[...])
}
# 5D array ====
dims <- rep(10, 5)
len <- prod(dims)
for(i in 1:10) {
x <- array(sample(seq_len(len*10), len, FALSE), dims)
ind1 <- sample(1:10, 4, FALSE)
ind2 <- sample(1:10, 4, FALSE)
ind3 <- sample(1:10, 4, FALSE)
ind4 <- sample(1:10, 4, FALSE)
ind5 <- sample(1:10, 4, FALSE)
subs <- list(ind1, ind2, ind3, ind4, ind5)
ind <- sub2ind(subs, dims)
expect_equal(
x[ind], as.vector(x[ind1, ind2, ind3, ind4, ind5])
) |> errorfun()
}
# 5D array ====
dims <- rep(10, 5)
len <- prod(dims)
x <- array(sample(seq_len(len*10), len, FALSE), dims)
ind1 <- sample(1:10, 4, FALSE)
ind2 <- sample(1:10, 4, FALSE)
ind3 <- sample(1:10, 4, FALSE)
ind4 <- sample(1:10, 4, FALSE)
ind5 <- sample(1:10, 4, FALSE)
subs <- list(ind1, ind2, ind3, ind4, ind5)
ind <- sub2ind(subs, dims)
ind
expect_equal(
x[ind], as.vector(x[ind1, ind2, ind3, ind4, ind5])
) |> errorfun()
cat(rcpp_code)
DTYPES <- 2:6
all_args <- stri_c("IntegerVector ind", 1:6)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();",
"int nn = ind6.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
)
all_parts <- c(
"ind1[i]",
"dimcumprod[0] * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)",
"dimcumprod[4] * (ind6[n] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<startfor>
flatind[counter] = <main>;
counter++;
<endfor>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[1:i], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
DTYPES <- 2:6
all_args <- stri_c("IntegerVector ind", 1:6)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();",
"int nn = ind6.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
)
DTYPES <- 2:6
all_args <- stri_c("IntegerVector ind", 1:6)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();",
"int nn = ind6.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm", "nn")
all_for <- rev(c(
"\t for(int n = 0; n < nn; ++n) {",
"\t for(int m = 0; m < nm; ++m) {",
"\t for(int l = 0; l < nl; ++l) {",
"\t for(int k = 0; k < nk; ++k) {",
"\t for(int j = 0; j < nj; ++j) {",
"\t for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"ind1[i]",
"dimcumprod[0] * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)",
"dimcumprod[4] * (ind6[n] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlengths>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<startfor>
flatind[counter] = <main>;
counter++;
<endfor>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in DTYPES) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlengths <- stri_c(setlengths[1:i], collapse = "\n")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }", i), collapse = "\n")
current_fixed <- c(
"DTYPE",
"<args>",
"<setlengths>",
"<setlength_mult>",
"<startfor>",
"<main>",
"<endfor>"
)
current_replacement <- c(
i,
current_args,
current_setlengths,
current_setlength_mult,
current_for,
current_main,
current_end
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
fileConn <- file("src/dynamic_rcpp_sub2ind_d.cpp")
writeLines(rcpp_code, fileConn)
close(fileConn)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
enumerate <- 0
temp.fun <- function(x, ...) {
return(x[...])
}
# 5D array ====
dims <- rep(10, 5)
len <- prod(dims)
for(i in 1:10) {
x <- array(sample(seq_len(len*10), len, FALSE), dims)
ind1 <- sample(1:10, 4, FALSE)
ind2 <- sample(1:10, 4, FALSE)
ind3 <- sample(1:10, 4, FALSE)
ind4 <- sample(1:10, 4, FALSE)
ind5 <- sample(1:10, 4, FALSE)
subs <- list(ind1, ind2, ind3, ind4, ind5)
ind <- sub2ind(subs, dims)
expect_equal(
x[ind], as.vector(x[ind1, ind2, ind3, ind4, ind5])
) |> errorfun()
}
