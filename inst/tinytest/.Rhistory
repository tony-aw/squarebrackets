fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
DTYPES <- 1:5
all_args <- c(
"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
)
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:5, ">"),
"<setlength_mult>",
paste0("<for", 1:5, ">"),
"<main>",
paste0("<end", 1:5, ">")
)
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
all_for <- rev(c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
))
DTYPES <- 1:5
all_args <- c(
"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- rev(c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:5, ">"),
"<setlength_mult>",
paste0("<for", 1:5, ">"),
"<main>",
paste0("<end", 1:5, ">")
)
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
DTYPES <- 2:5
all_args <- c(
"IntegerVector ind1",
"IntegerVector ind2",
"IntegerVector ind3",
"IntegerVector ind4",
"IntegerVector ind5"
)
setlengths <- c("int ni = ind1.length();",
"int nj = ind2.length();",
"int nk = ind3.length();",
"int nl = ind4.length();",
"int nm = ind5.length();")
all_lengths <- c("ni", "nj",  "nk", "nl", "nm")
all_for <- rev(c(
"for(int m = 0; m < nm; ++m) {",
"for(int l = 0; l < nl; ++l) {",
"for(int k = 0; k < nk; ++k) {",
"for(int j = 0; j < nj; ++j) {",
"for(int i = 0; i < ni; ++i) {"
))
all_parts <- c(
"ind1[i]",
"dimcumprod[0]  * (ind2[j] - 1)",
"dimcumprod[1] * (ind3[k] - 1)",
"dimcumprod[2] * (ind4[l] - 1)",
"dimcumprod[3] * (ind5[m] - 1)"
)
templatecode <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_sub2ind_DTYPEd)]]
IntegerVector rcpp_sub2ind_DTYPEd(
<args>, IntegerVector dimcumprod
) {
<setlength1>
<setlength2>
<setlength3>
<setlength4>
<setlength5>
R_xlen_t counter = 0;
IntegerVector flatind(<setlength_mult>);
<for5>
<for4>
<for3>
<for2>
<for1>
flatind[counter] = <main>;
counter++;
<end1>
<end2>
<end3>
<end4>
<end5>
return flatind;
}
"
rcpp_scripts <- character(length(DTYPES))
names(rcpp_scripts) <- DTYPES
for(i in seq_along(DTYPES)) {
current_args <- stri_c(all_args[1:i], collapse = ", ")
current_setlength_mult <- stri_c(all_lengths[1:i], collapse = " * ")
current_main <- stri_c(all_parts[1:i], collapse = " + ")
current_fixed <- c(
"DTYPE",
"<args>",
paste0("<setlength", 1:5, ">"),
"<setlength_mult>",
paste0("<for", 1:5, ">"),
"<main>",
paste0("<end", 1:5, ">")
)
current_replacement <- c(
i,
current_args,
c(setlengths[1:i],rep("", 5-i)),
current_setlength_mult,
c(all_for[1:i], rep("", 5-i)),
current_main,
c(rep("}", i), rep("", 5-i))
)
out <- stri_replace_all(
templatecode,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
rcpp_scripts[[i]] <- out
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# codetools checks:
codetools::checkUsagePackage("squarebrackets")
ns <- loadNamespace("squarebrackets") |> as.list(all.names = TRUE)
ns <- ns[!stringi::stri_detect(names(ns), fixed = ".__")]
checks <- sapply(ns, \(x) any(deparse(x) |> stringi::stri_detect(regex = "return")))
names(checks)[!checks] |> sort()
# if(!require(tinytest)){install.packages("tinytest")}
# tinytest::setup_tinytest("./squarebrackets")
# check package in general:
# Note: edit .Rbuildignore to make it ignore things R CMD CHECK should not check
devtools::run_examples("./squarebrackets", fresh = TRUE)
rcmdcheck::rcmdcheck("./squarebrackets", args = c("--no-manual", "--as-cran"))
?structure
?mutable_atomic
mutable_atomic
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
?squarebrackets::bind
x <- matrix(1:12,3,4)
y <- x+100
arg.list <- list(x = x, y=y)
bind_array(arg.list, along=0) # binds on new dimension before first
bind_array(arg.list, along=1) # binds on first dimension
bind_array(arg.list, along=2)
bind_array(arg.list, along=3) # bind on new di
mutable_atomic
as.mutable_atomic
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
x <- matrix(1:12,3,4)
y <- x+100
arg.list <- list(x = x, y=y)
bind_array(arg.list, along=0) # binds on new dimension before first
bind_array(arg.list, along=1) # binds on first dimension
bind_array(arg.list, along=2)
bind_array(arg.list, along=3) # bind on new di
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
x <- matrix(1:12,3,4)
y <- x+100
arg.list <- list(x = x, y=y)
bind_array(arg.list, along=0) # binds on new dimension before first
bind_array(arg.list, along=1) # binds on first dimension
bind_array(arg.list, along=2)
bind_array(arg.list, along=3) # bind on new di
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
rcmdcheck::rcmdcheck("./squarebrackets", args = c("--no-manual", "--as-cran"))
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest")
source(file.path(getwd(), "source", "functions4testing.R"))
enumerate <- 0
temp.fun <- function(x, ...) {
return(x[...])
}
enumerate <- 0
for(margin in 1:3) {
dims <- c(4,4,4)
dims[margin] <- 1
dimnames1 <- list(letters[1:4], rev(letters[1:4]), letters[1:4])
dimnames2 <- list(letters[5:8], rev(letters[5:8]), letters[5:8])
dimnames2[[margin]] <- "z"
ya <- array(1:64, c(4,4,4))
yl <- array(as.list(1:64), c(4,4,4))
newa <- array(1:16, dim = dims)
newl <- array(as.list(1:16), dim = dims)
dimnames(ya) <- dimnames1
dimnames(yl) <- dimnames1
dimnames(newa) <- dimnames2
dimnames(newl) <- dimnames2
out <- bind2_array(list(yl, newl, yl), margin)
pre_expected <- abind::abind(ya, newa, ya, along = margin)
expected <- array(
as.list(pre_expected),
dim = dim(pre_expected),
dimnames = dimnames(pre_expected)
)
expect_equal(
out, expected
) |> errorfun()
enumerate <- enumerate + 1
}
dims <- c(4,4,4)
dims[margin] <- 1
dimnames1 <- list(letters[1:4], rev(letters[1:4]), letters[1:4])
dimnames2 <- list(letters[5:8], rev(letters[5:8]), letters[5:8])
dimnames2[[margin]] <- "z"
ya <- array(1:64, c(4,4,4))
yl <- array(as.list(1:64), c(4,4,4))
newa <- array(1:16, dim = dims)
newl <- array(as.list(1:16), dim = dims)
dimnames(ya) <- dimnames1
dimnames(yl) <- dimnames1
dimnames(newa) <- dimnames2
dimnames(newl) <- dimnames2
bind2_array(list(yl, newl, yl), margin)
list(yl, newl, yl)
out <- bind2_array(list(yl, newl, yl), margin, name_along = FALSE)
out
