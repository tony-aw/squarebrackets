countv(y, v, FALSE)
countv(y, v, r = FALSE)
# set-up ====
errorfun <- function(tt) {
if(isTRUE(tt)) print(tt)
if(isFALSE(tt)) stop(print(tt))
}
enumerate <- 0L
n <- 10
rel <- c(TRUE, FALSE)
from <- n(NULL, 1, 2, -1i, -2i)
start <- c(1, 1, 2, n, n - 1)
to <- n(NULL, -1i, -2i, 1, 2)
end <- c(n, n, n-1, 1, 2)
tempfun1 <- function(x, v, rel, start, end) {
x <- x[start:end]
x <- x[!is.na(x)]
if(!rel) {
return(sum(x != v, na.rm = TRUE))
}
else {
return(sum(x == v, na.rm = TRUE))
}
}
tempfun2 <- function(x, v, rel, start, end) {
x <- x[start:end]
x <- x[!is.na(x)]
check <- x >= v[1] & x <= v[2]
if(!rel) {
return(sum(!check, na.rm = TRUE))
}
else {
return(sum(check, na.rm = TRUE))
}
}
tempfun_complex_AND <- function(x, v, rel, start, end) {
x <- x[start:end]
x <- x[!is.na(x)]
conditions <- rel
check1 <- (Re(x) >= v[1] & Re(x) <= v[2]) == conditions[1]
check2 <- (Im(x) >= v[3] & Im(x) <= v[4]) == conditions[2]
return(sum(check1 & check2, na.rm = TRUE))
}
tempfun_complex_OR <- function(x, v, rel, start, end) {
x <- x[start:end]
x <- x[!is.na(x)]
conditions <- rel
check1 <- (Re(x) >= v[1] & Re(x) <= v[2]) == conditions[1]
check2 <- (Im(x) >= v[3] & Im(x) <= v[4]) == conditions[2]
return(sum(check1 | check2, na.rm = TRUE))
}
tempfun_complex_XOR <- function(x, v, rel, start, end) {
x <- x[start:end]
x <- x[!is.na(x)]
conditions <- rel
check1 <- (Re(x) >= v[1] & Re(x) <= v[2]) == conditions[1]
check2 <- (Im(x) >= v[3] & Im(x) <= v[4]) == conditions[2]
return(sum(xor(check1, check2), na.rm = TRUE))
}
tempfun_multistring <- function(x, v, rel, start, end) {
x <- x[start:end]
x <- x[!is.na(x)]
if(!rel) {
return(sum(! x %in% v, na.rm = TRUE))
}
else {
return(sum(x %in% v, na.rm = TRUE))
}
}
# factor ====
x <- factor(sample(letters, 100, TRUE))
v <- sample(as.character(x), 2L)
expected <- out <- vector("list", length(v) * length(rel) * length(from))
counter <- 1L
for(iV in seq_along(v)) {
for(iInv in rel) {
for(i in seq_along(from)) {
expected[[counter]] <- tempfun1(x, v[[iV]], iInv, start[i], end[i])
out[[counter]] <- countv(x, v = v[[iV]], r = iInv, from = from[[i]], to = to[[i]])
counter <- counter + 1L
}
}
}
expect_equal(
expected, out
)
countv()
countv(x, v)
countv(x, v[1])
countv(x, v[1], r = FALSE)
#' Count Number of Occurrences of a Value in a Vector
#'
#' @description
#' `counv(y, v, from, to)` counts how often a value, or range of values, `v`,
#' occurs in a vector subset `y[from:to]`. \cr \cr
#'
#' @param y an atomic vector. \cr
#' For `slice_set` it must be a \link{mutable_atomic} \bold{variable}.
#' @param v,na,r,andor See \link{squarebrackets_slicev}.
#' @param from,to see \link{cp_seq}. \cr
#'
#'
#' @returns
#' A single number, giving the number of hits.
#'
#' @example inst/examples/countv.R
#'
#'
countv <- function(y, ..., v = NULL, na = FALSE, r = TRUE, from = NULL, to = NULL, andor = 1L) {
# general checks:
andor <- as.integer(andor)
.checkv_general(y, v, na, r, andor, sys.call())
# construct value parameters (if not missing):
if(!is.na(na)) {
myval <- .cp_val(y, v, r, andor, sys.call())
v <- myval$v
r <- myval$r
}
# construct range parameters:
myslice <- cp_seq(y, 0L, from = from, to = to)
start <- myslice$start
end <- myslice$end
by <- myslice$by
len <- myslice$length
# run function:
out <- .rcpp_countv(y, v, na, !r, andor, start-1, end-1, by, len)
return(out)
}
.checkv_general <- function(y, v, na, r, andor, abortcall) {
if(!is.atomic(y)) {
stop(simpleError("`y` must be atomic", call = abortcall))
}
if(length(y) == 0L) {
stop(simpleError("zero-length `y` not allowed", call = abortcall))
}
if(anyNA(r)) {
stop(simpleError("`r` must not contain `NA`", call = abortcall))
}
if(!is.logical(r)) {
stop(simpleError("`r` must be logical", call = abortcall))
}
if(length(r) > 2L) {
stop(simpleError("`length(r) > 2L`"))
}
if(length(andor) != 1L || !is.numeric(andor) || is.na(andor)) {
stop(simpleError("`andor` must be an integer scalar", call = abortcall))
}
if(length(na) != 1 || !is.logical(na)) {
stop(simpleError("`na` must be `TRUE`, `FALSE`, or `NA`", call = abortcall))
}
if(is.na(na)) {
if(length(r) > 1L) {
stop(simpleError("if `na = NA`, `r` must be Boolean", call = abortcall))
}
}
if(is.na(na)) {
if(!is.null(v)) {
if(!is.na(v)) {
message(simpleMessage("`na = NA`, so argument `v` will be ignored", call = abortcall))
}
}
}
}
.cp_val <- function(y, v, r, andor, abortcall) {
# general checks:
if(!is.atomic(v)) {
stop(simpleError("`v` must be atomic", call = abortcall))
}
if(length(v) == 0L) {
stop(simpleError("zero-length `v` not allowed", call = abortcall))
}
if(anyNA(v)) {
stop(simpleError("`v` must not contain NA/NaN; please use `na = NA` to find NA/NaN values", call = abortcall))
}
# type-dependent checks:
if(!is.complex(y)) {
if(length(r) > 1L) {
stop(simpleError("`r` must be Boolean, except for `y` of type `complex`"))
}
}
if(is.factor(y)) {
v <- .checkv_lvl2int(v, y, abortcall)
}
else if(is.numeric(y) && !is.complex(y)) {
if(!is.numeric(v)) {
stop(simpleError("if `y` is numeric, `v` must also be numeric", call = abortcall))
}
if(length(v) > 2L) {
stop(simpleError("if `y` is numeric `v` must be of length 1 or 2", call = abortcall))
}
if(length(v) == 2L) {
if(v[1] > v[2]) {
stop(simpleError("problem in `v`: lower bound larger than upper bound", call = abortcall))
}
}
v <- as.double(v)
}
else if(is.complex(y)) {
if(length(v) == 1L) {
v <- rep(v, 4L)
}
if(length(v) == 2L) {
v <- rep(v, 2L)
}
if(length(v) != 4L || !is.numeric(v)) {
stop(simpleError("if `y` is complex, `v` must be numeric and of length 4", call = abortcall))
}
if(v[1] > v[2] || v[3] > v[4]) {
stop(simpleError("problem in `v`: lower bound larger than upper bound", call = abortcall))
}
if(length(r) < 2L) {
r <- c(r, r)
}
v <- as.double(v)
}
else if(is.character(y)) {
if(typeof(v) != typeof(y)) {
stop(simpleError("`typeof(v)` not compatible with `typeof(y)`", call = abortcall))
}
if(!all(nzchar(v))) {
stop(simpleError("`v` cannot contain zero-length strings", call = abortcall))
}
}
else {
if(typeof(v) != typeof(y)) {
stop(simpleError("`typeof(v)` not compatible with `typeof(y)`", call = abortcall))
}
if(length(v) > 1L) {
stop(simpleError("non-scalar `v` not supported for this data type", call = abortcall))
}
}
out <- list(
v = v, r = r
)
return(out)
}
.checkv_lvl2int <- function(v, y, abortcall) {
if(length(v) > 1L) {
stop(simpleError("`v` must be of length 1", call = abortcall))
}
if(is.character(v)) {
v <- factor(v, levels = levels(y), ordered = is.ordered(y), exclude = NULL)
v <- collapse::unattrib(v)
return(v)
}
if(is.factor(v)) {
if(levels(v) != levels(y)) {
stop(simpleError("`v` must have same levels as `y`", call = abortcall))
}
if(is.ordered(v) != is.ordered(y)) {
stop(simpleError("`v` must have the same ordering as `y`", call = abortcall))
}
v <- collapse::unattrib(v)
return(v)
}
if(is.numeric(v)) {
nlevels <- nlevels(y)
if(any(!v %in% 1:nlevels)) {
stop(simpleError("invalid factor level", call = abortcall))
}
return(as.integer(v))
}
else {
stop(simpleError("improper type of `v`", call = abortcall))
}
}
countv(x, v[1], r = FALSE)
countv(x, v = v[1], r = FALSE)
countv <- function(y, ..., v = NULL, na = FALSE, r = TRUE, from = NULL, to = NULL, andor = 1L) {
# general checks:
.internal_check_dots(list(...), sys.call())
andor <- as.integer(andor)
.checkv_general(y, v, na, r, andor, sys.call())
# construct value parameters (if not missing):
if(!is.na(na)) {
myval <- .cp_val(y, v, r, andor, sys.call())
v <- myval$v
r <- myval$r
}
# construct range parameters:
myslice <- cp_seq(y, 0L, from = from, to = to)
start <- myslice$start
end <- myslice$end
by <- myslice$by
len <- myslice$length
# run function:
out <- .rcpp_countv(y, v, na, !r, andor, start-1, end-1, by, len)
return(out)
}
countv(x, v = v[1], r = FALSE)
countv(x, v[1], r = FALSE)
countv(x, v = v[1], r = FALSE)
#' Count Number of Occurrences of a Value in a Vector
#'
#' @description
#' `counv(y, v, from, to)` counts how often a value, or range of values, `v`,
#' occurs in a vector subset `y[from:to]`. \cr \cr
#'
#' @param y an atomic vector. \cr
#' For `slice_set` it must be a \link{mutable_atomic} \bold{variable}.
#' @param v,na,r,andor See \link{squarebrackets_slicev}.
#' @param from,to see \link{cp_seq}. \cr
#'
#'
#' @returns
#' A single number, giving the number of hits.
#'
#' @example inst/examples/countv.R
#'
#'
countv <- function(y, ..., v = NULL, na = FALSE, r = TRUE, from = NULL, to = NULL, andor = 1L) {
# general checks:
.internal_check_dots(list(...), sys.call())
andor <- as.integer(andor)
.checkv_general(y, v, na, r, andor, sys.call())
# construct value parameters (if not missing):
if(!is.na(na)) {
myval <- .cp_val(y, v, r, andor, sys.call())
v <- myval$v
r <- myval$r
}
# construct range parameters:
myslice <- cp_seq(y, 0L, from = from, to = to)
start <- myslice$start
end <- myslice$end
by <- myslice$by
len <- myslice$length
# run function:
out <- .rcpp_countv(y, v, na, !r, andor, start-1, end-1, by, len)
return(out)
}
.checkv_general <- function(y, v, na, r, andor, abortcall) {
if(!is.atomic(y)) {
stop(simpleError("`y` must be atomic", call = abortcall))
}
if(length(y) == 0L) {
stop(simpleError("zero-length `y` not allowed", call = abortcall))
}
if(anyNA(r)) {
stop(simpleError("`r` must not contain `NA`", call = abortcall))
}
if(!is.logical(r)) {
stop(simpleError("`r` must be logical", call = abortcall))
}
if(length(r) > 2L) {
stop(simpleError("`length(r) > 2L`"))
}
if(length(andor) != 1L || !is.numeric(andor) || is.na(andor)) {
stop(simpleError("`andor` must be an integer scalar", call = abortcall))
}
if(length(na) != 1 || !is.logical(na)) {
stop(simpleError("`na` must be `TRUE`, `FALSE`, or `NA`", call = abortcall))
}
if(is.na(na)) {
if(length(r) > 1L) {
stop(simpleError("if `na = NA`, `r` must be Boolean", call = abortcall))
}
}
if(is.na(na)) {
if(!is.null(v)) {
if(!is.na(v)) {
message(simpleMessage("`na = NA`, so argument `v` will be ignored", call = abortcall))
}
}
}
}
.cp_val <- function(y, v, r, andor, abortcall) {
# general checks:
if(!is.atomic(v)) {
stop(simpleError("`v` must be atomic", call = abortcall))
}
if(length(v) == 0L) {
stop(simpleError("zero-length `v` not allowed", call = abortcall))
}
if(anyNA(v)) {
stop(simpleError("`v` must not contain NA/NaN; please use `na = NA` to find NA/NaN values", call = abortcall))
}
# type-dependent checks:
if(!is.complex(y)) {
if(length(r) > 1L) {
stop(simpleError("`r` must be Boolean, except for `y` of type `complex`"))
}
}
if(is.factor(y)) {
v <- .checkv_lvl2int(v, y, abortcall)
}
else if(is.numeric(y) && !is.complex(y)) {
if(!is.numeric(v)) {
stop(simpleError("if `y` is numeric, `v` must also be numeric", call = abortcall))
}
if(length(v) > 2L) {
stop(simpleError("if `y` is numeric `v` must be of length 1 or 2", call = abortcall))
}
if(length(v) == 2L) {
if(v[1] > v[2]) {
stop(simpleError("problem in `v`: lower bound larger than upper bound", call = abortcall))
}
}
v <- as.double(v)
}
else if(is.complex(y)) {
if(length(v) == 1L) {
v <- rep(v, 4L)
}
if(length(v) == 2L) {
v <- rep(v, 2L)
}
if(length(v) != 4L || !is.numeric(v)) {
stop(simpleError("if `y` is complex, `v` must be numeric and of length 4", call = abortcall))
}
if(v[1] > v[2] || v[3] > v[4]) {
stop(simpleError("problem in `v`: lower bound larger than upper bound", call = abortcall))
}
if(length(r) < 2L) {
r <- c(r, r)
}
v <- as.double(v)
}
else if(is.character(y)) {
if(typeof(v) != typeof(y)) {
stop(simpleError("`typeof(v)` not compatible with `typeof(y)`", call = abortcall))
}
if(!all(nzchar(v))) {
stop(simpleError("`v` cannot contain zero-length strings", call = abortcall))
}
}
else {
if(typeof(v) != typeof(y)) {
stop(simpleError("`typeof(v)` not compatible with `typeof(y)`", call = abortcall))
}
if(length(v) > 1L) {
stop(simpleError("non-scalar `v` not supported for this data type", call = abortcall))
}
}
out <- list(
v = v, r = r
)
return(out)
}
.checkv_lvl2int <- function(v, y, abortcall) {
if(length(v) > 1L) {
stop(simpleError("`v` must be of length 1", call = abortcall))
}
if(is.character(v)) {
v <- factor(v, levels = levels(y), ordered = is.ordered(y), exclude = NULL)
v <- collapse::unattrib(v)
return(as.integer(v))
}
if(is.factor(v)) {
if(levels(v) != levels(y)) {
stop(simpleError("`v` must have same levels as `y`", call = abortcall))
}
if(is.ordered(v) != is.ordered(y)) {
stop(simpleError("`v` must have the same ordering as `y`", call = abortcall))
}
v <- collapse::unattrib(v)
return(v)
}
if(is.numeric(v)) {
nlevels <- nlevels(y)
if(any(!v %in% 1:nlevels)) {
stop(simpleError("invalid factor level", call = abortcall))
}
return(as.integer(v))
}
else {
stop(simpleError("improper type of `v`", call = abortcall))
}
}
# factor ====
x <- factor(sample(letters, 100, TRUE))
v <- sample(as.character(x), 2L)
expected <- out <- vector("list", length(v) * length(rel) * length(from))
counter <- 1L
for(iV in seq_along(v)) {
for(iInv in rel) {
for(i in seq_along(from)) {
expected[[counter]] <- tempfun1(x, v[[iV]], iInv, start[i], end[i])
out[[counter]] <- countv(x, v = v[[iV]], r = iInv, from = from[[i]], to = to[[i]])
counter <- counter + 1L
}
}
}
expect_equal(
expected, out
)
View(expected)
View(out)
countv(x, v = v[[iV]], r = iInv, from = from[[i]], to = to[[i]])
tempfun1(x, v[[iV]], iInv, start[i], end[i])
x[start[i]:end[i]]
x[start[i]:end[i]] == v[[iV]]
from[[i]]
start[i]
# factor ====
x <- factor(sample(letters, 10, TRUE))
v <- sample(as.character(x), 2L)
expected <- out <- vector("list", length(v) * length(rel) * length(from))
counter <- 1L
for(iV in seq_along(v)) {
for(iInv in rel) {
for(i in seq_along(from)) {
expected[[counter]] <- tempfun1(x, v[[iV]], iInv, start[i], end[i])
out[[counter]] <- countv(x, v = v[[iV]], r = iInv, from = from[[i]], to = to[[i]])
counter <- counter + 1L
}
}
}
expect_equal(
expected, out
)
enumerate <- enumerate + counter
