.ndims <- function(x) length(dim(x))
prep <- function(x, y) {
broadcast:::.stop_general(x, y, sys.call())
if (length(x) == 1L) {
x <- drop(x)
}
if (length(y) == 1L) {
y <- drop(y)
}
if (.ndims(x) <= 1L && .ndims(y) <= 1L) {
dim(x) <- NULL
dim(y) <- NULL
}
x.dim <- dim(x)
y.dim <- dim(y)
if (!is.null(x.dim) && !is.null(y.dim)) {
x.ndims <- length(x.dim)
y.ndims <- length(y.dim)
if (x.ndims > y.ndims) {
dim(y) <- c(y.dim, rep(1L, x.ndims - y.ndims))
}
if (y.ndims > x.ndims) {
dim(x) <- c(x.dim, rep(1L, y.ndims - x.ndims))
}
}
x.dim <- dim(x)
y.dim <- dim(y)
return(list(x, y))
}
opmath <- function(op) {
if(op == "+") {
return(1L)
}
else if(op == "-") {
return(2L)
}
else if(op == "*") {
}
}
out.dim <- broadcast:::.determine_out.dim(x, y)
givedim <- function(x, dim) {
dim(x) <- dim
return(x)
}
foo <- bench::mark(
base = x + y,
bc = bc.d(x, y, "+"),
bc_internal = broadcast:::.rcpp_bcD_dbl_v(x, y, n, 1L),
prep = prep(x, y),
pmax = pmax(dim(x), dim(y)),
conf = broadcast:::.stop_conf_dim(x, y, sys.call()),
dimmode = broadcast:::.determine_dimmode(x, y, sys.call()),
outdim = broadcast:::.determine_out.dim(x, y),
dimlen = broadcast:::.determine_out.len(x, y, out.dim),
makeind = {
broadcast:::.make_indices(dim(x), out.dim)
broadcast:::.make_indices(dim(y), out.dim)
},
op = broadcast:::.op_math("+", sys.call()),
givedim = givedim(x, out.dim),
check = FALSE,
min_iterations = 100
)
summary(foo)
sum(foo$median[4:nrow(foo)]) # where is the difference between bc and bc_internal coming from???
ggplot2::autoplot(foo)
?bench::mark
# speed tests
library(broadcast)
# scalar array with regular array
x.dim <- c(100:98)
x.len <- prod(x.dim)
x.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)
x <- array(x.data, x.dim)
y <- array(1:100, c(100,1,1))
# x + y # gives error; hence need broadcasting
dimcumprod_x <- cumprod(dim(x))
dimcumprod_y <- cumprod(dim(y))
out.dim <- pmax(dim(x), dim(y))
out.len <- prod(out.dim)
dimcumprod_out <- cumprod(out.dim)
inds_x <- lapply(out.dim, \(n) 1:n)
inds_y <- list(1:100, rep(1L, 99), rep(1L, 98))
foo <- bench::mark(
base = x + drop(y),
# outer = outer(x, y, "+") # outer is not even in the same universe in terms of speed & memory LOL
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc.rcpp = broadcast:::.rcpp_bcD_dbl_d(
x, y, by_x, by_y,
dimcumprod_x, dimcumprod_y, out.dim, out.len, 1L
),
bc = bc.d(x, y, "+"),
check = FALSE,
min_iterations = 100
)
# scalar array with regular array
x.dim <- c(100:98)
x.len <- prod(x.dim)
x.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)
x <- array(x.data, x.dim)
y <- array(1:100, c(100,1,1))
# x + y # gives error; hence need broadcasting
dimcumprod_x <- cumprod(dim(x))
dimcumprod_y <- cumprod(dim(y))
out.dim <- pmax(dim(x), dim(y))
out.len <- prod(out.dim)
dimcumprod_out <- cumprod(out.dim)
inds_x <- lapply(out.dim, \(n) 1:n)
inds_y <- list(1:100, rep(1L, 99), rep(1L, 98))
by_x <- rep(1, length(out.dim))
by_y <- c(1L, 0L, 0L)
foo <- bench::mark(
base = x + drop(y),
# outer = outer(x, y, "+") # outer is not even in the same universe in terms of speed & memory LOL
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc.rcpp = broadcast:::.rcpp_bcD_dbl_d(
x, y, by_x, by_y,
dimcumprod_x, dimcumprod_y, out.dim, out.len, 1L
),
bc = bc.d(x, y, "+"),
check = FALSE,
min_iterations = 100
)
foo <- bench::mark(
base = x + drop(y),
# outer = outer(x, y, "+") # outer is not even in the same universe in terms of speed & memory LOL
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc.rcpp = broadcast:::.rcpp_bcD_dbl_d(
x, y, by_x, by_y,
dimcumprod_x, dimcumprod_y, as.integer(out.dim), out.len, 1L
),
bc = bc.d(x, y, "+"),
check = FALSE,
min_iterations = 100
)
by_x <- rep(1L, length(out.dim))
by_y <- c(1L, 0L, 0L)
foo <- bench::mark(
base = x + drop(y),
# outer = outer(x, y, "+") # outer is not even in the same universe in terms of speed & memory LOL
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc.rcpp = broadcast:::.rcpp_bcD_dbl_d(
x, y, by_x, by_y,
dimcumprod_x, dimcumprod_y, as.integer(out.dim), out.len, 1L
),
bc = bc.d(x, y, "+"),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
18.51/7.4
# vector arrays of different directions
x <- array(rnorm(1000), c(4e3, 1))
y <- array(sample(1:1000), c(1, 4e3))
out.dim <- pmax(dim(x), dim(y))
# x + y should give a matrix when broadcasted
foo <- bench::mark(
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc = bc.d(x, y, "+"),
min_iterations = 200
)
summary(foo)
ggplot2::autoplot(foo)
# vector arrays of different directions
x <- array(rnorm(1000), c(5e3, 1))
y <- array(sample(1:1000), c(1, 5e3))
out.dim <- pmax(dim(x), dim(y))
# x + y should give a matrix when broadcasted
foo <- bench::mark(
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc = bc.d(x, y, "+"),
min_iterations = 100
)
4e3*4e3
5e3*5e3
# vector arrays of different directions
x <- array(rnorm(1000), c(4e3, 1))
y <- array(sample(1:1000), c(1, 4e3))
out.dim <- pmax(dim(x), dim(y))
# x + y should give a matrix when broadcasted
foo <- bench::mark(
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc = bc.d(x, y, "+"),
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
# vector arrays of different directions
x <- array(rnorm(1000), c(4e3, 1))
y <- array(sample(1:1000), c(1, 4e3))
out.dim <- pmax(dim(x), dim(y))
# x + y should give a matrix when broadcasted
foo <- bench::mark(
recycle = array_recycle(x, out.dim) + array_recycle(y, out.dim),
bc = bc.d(x, y, "+"),
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
n <- 1e6
x <- array(rnorm(1000), c(n, 1))
y <- array(sample(1:1000), c(n, 1))
.ndims <- function(x) length(dim(x))
prep <- function(x, y) {
broadcast:::.stop_general(x, y, sys.call())
if (length(x) == 1L) {
x <- drop(x)
}
if (length(y) == 1L) {
y <- drop(y)
}
if (.ndims(x) <= 1L && .ndims(y) <= 1L) {
dim(x) <- NULL
dim(y) <- NULL
}
x.dim <- dim(x)
y.dim <- dim(y)
if (!is.null(x.dim) && !is.null(y.dim)) {
x.ndims <- length(x.dim)
y.ndims <- length(y.dim)
if (x.ndims > y.ndims) {
dim(y) <- c(y.dim, rep(1L, x.ndims - y.ndims))
}
if (y.ndims > x.ndims) {
dim(x) <- c(x.dim, rep(1L, y.ndims - x.ndims))
}
}
x.dim <- dim(x)
y.dim <- dim(y)
return(list(x, y))
}
opmath <- function(op) {
if(op == "+") {
return(1L)
}
else if(op == "-") {
return(2L)
}
else if(op == "*") {
}
}
out.dim <- broadcast:::.determine_out.dim(x, y)
givedim <- function(x, dim) {
dim(x) <- dim
return(x)
}
foo <- bench::mark(
base = x + y,
bc = bc.d(x, y, "+"),
bc_internal = broadcast:::.rcpp_bcD_dbl_v(x, y, n, 1L),
prep = prep(x, y),
pmax = pmax(dim(x), dim(y)),
conf = broadcast:::.stop_conf_dim(x, y, sys.call()),
dimmode = broadcast:::.determine_dimmode(x, y, sys.call()),
outdim = broadcast:::.determine_out.dim(x, y),
dimlen = broadcast:::.determine_out.len(x, y, out.dim),
makeind = {
broadcast:::.make_indices(dim(x), out.dim)
broadcast:::.make_indices(dim(y), out.dim)
},
op = broadcast:::.op_math("+", sys.call()),
givedim = givedim(x, out.dim),
check = FALSE,
min_iterations = 100
)
rlang::global_entrace()
foo <- bench::mark(
base = x + y,
bc = bc.d(x, y, "+"),
bc_internal = broadcast:::.rcpp_bcD_dbl_v(x, y, n, 1L),
prep = prep(x, y),
pmax = pmax(dim(x), dim(y)),
conf = broadcast:::.stop_conf_dim(x, y, sys.call()),
dimmode = broadcast:::.determine_dimmode(x, y, sys.call()),
outdim = broadcast:::.determine_out.dim(x, y),
dimlen = broadcast:::.determine_out.len(x, y, out.dim),
makeind = {
broadcast:::.make_indices(dim(x), out.dim)
broadcast:::.make_indices(dim(y), out.dim)
},
op = broadcast:::.op_math("+", sys.call()),
givedim = givedim(x, out.dim),
check = FALSE,
min_iterations = 100
)
n <- 1e6
x <- array(rnorm(1000), c(n, 1))
y <- array(sample(1:1000), c(n, 1))
.ndims <- function(x) length(dim(x))
prep <- function(x, y) {
broadcast:::.stop_general(x, y, sys.call())
if (length(x) == 1L) {
x <- drop(x)
}
if (length(y) == 1L) {
y <- drop(y)
}
if (.ndims(x) <= 1L && .ndims(y) <= 1L) {
dim(x) <- NULL
dim(y) <- NULL
}
x.dim <- dim(x)
y.dim <- dim(y)
if (!is.null(x.dim) && !is.null(y.dim)) {
x.ndims <- length(x.dim)
y.ndims <- length(y.dim)
if (x.ndims > y.ndims) {
dim(y) <- c(y.dim, rep(1L, x.ndims - y.ndims))
}
if (y.ndims > x.ndims) {
dim(x) <- c(x.dim, rep(1L, y.ndims - x.ndims))
}
}
x.dim <- dim(x)
y.dim <- dim(y)
return(list(x, y))
}
opmath <- function(op) {
if(op == "+") {
return(1L)
}
else if(op == "-") {
return(2L)
}
else if(op == "*") {
}
}
out.dim <- broadcast:::.determine_out.dim(x, y)
givedim <- function(x, dim) {
dim(x) <- dim
return(x)
}
out.dim <- broadcast:::.determine_out.dim(dim(x), dim(y))
givedim <- function(x, dim) {
dim(x) <- dim
return(x)
}
foo <- bench::mark(
base = x + y,
bc = bc.d(x, y, "+"),
bc_internal = broadcast:::.rcpp_bcD_dbl_v(x, y, n, 1L),
prep = prep(x, y),
pmax = pmax(dim(x), dim(y)),
conf = broadcast:::.stop_conf_dim(x, y, sys.call()),
dimmode = broadcast:::.determine_dimmode(dim(x), dim(y), sys.call()),
outdim = broadcast:::.determine_out.dim(dim(x), dim(y)),
dimlen = broadcast:::.determine_out.len(x, y, out.dim),
makeind = {
broadcast:::.make_indices(dim(x), out.dim)
broadcast:::.make_indices(dim(y), out.dim)
},
op = broadcast:::.op_math("+", sys.call()),
givedim = givedim(x, out.dim),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
sum(foo$median[4:nrow(foo)]) # where is the difference between bc and bc_internal coming from???
foo <- bench::mark(
base = x + y,
bc = bc.d(x, y, "+"),
bc_internal = broadcast:::.rcpp_bcD_dbl_v(x, y, n, 1L),
# prep = prep(x, y),
# pmax = pmax(dim(x), dim(y)),
# conf = broadcast:::.stop_conf_dim(x, y, sys.call()),
# dimmode = broadcast:::.determine_dimmode(dim(x), dim(y), sys.call()),
# outdim = broadcast:::.determine_out.dim(dim(x), dim(y)),
# dimlen = broadcast:::.determine_out.len(x, y, out.dim),
# makeind = {
#   broadcast:::.make_indices(dim(x), out.dim)
#   broadcast:::.make_indices(dim(y), out.dim)
# },
# op = broadcast:::.op_math("+", sys.call()),
# givedim = givedim(x, out.dim),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
?`==`
tb <- function(row, col)
`[`
pryr::show_c_source(.Primitive("["))
tb <- function(brk) {
return(brk)
}
tb([, 1])
tb <- function(brk) {
return(substitute(brk))
}
tb([, 1])
?substitute
?expression
tinycodet::import_as
substitute([])
substitute(as.expression([]))
'1, 2'
'1:2, 2'
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# Render ReadMe, vignettes and site ====
pkgs <- c("dplyr", "powerjoin", "magrittr", "zeallot", "tidytable", "data.table",
"gamair", "rbenchmark", "xfun", "pkgdown", "servr")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
if(!requireNamespace("xfun"))install.packages("xfun")
# run readme & vignettes
xfun::Rscript_call(
rmarkdown::render,
list(input = "./squarebrackets/README.Rmd", output_format = "github_document")
)
path_vignettes <- normalizePath("./squarebrackets/vignettes/articles/")
files <- list.files(path =path_vignettes, pattern = ".Rmd")
temp.fun <- function(x) {
xfun::Rscript_call(
rmarkdown::render,
list(input = file.path(path_vignettes, x), output_format = "html_vignette")
)
}
lapply(files, temp.fun)
# check references:
data_reference_index_missing <- function(pkg = ".", depth = 1L) {
tinycodet::import_inops("magrittr")
tinycodet::import_inops("rlang")
pkg <- pkgdown:::as_pkgdown(pkg)
meta <- pkg$meta[["reference"]] %||% pkgdown:::default_reference_index(pkg)
if (length(meta) == 0) {
return(list())
}
# Cross-reference complete list of topics vs. topics found in index page
all_topics <- meta %>%
purrr::map(~ pkgdown:::select_topics(.$contents, pkg$topics)) %>%
purrr::reduce(union)
in_index <- seq_along(pkg$topics$name) %in% all_topics
missing <- !in_index & !pkg$topics$internal
pkg$topics$name[missing]
}
data_reference_index_missing("./squarebrackets")
pkgdown::template_reference("./squarebrackets")
# render site
pkgdown::build_site("./squarebrackets")
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
# root folder tests ====
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
# sub folder tests ====
subfolders <- c(
"generic", "generic2", "generic_idx", "bind",
"helper", "sub2ind", "developer", "special", "src_related", "slice", "slicev"
)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
path <- file.path(getwd(), subfolders) |> normalizePath()
files <- list.files(path, pattern = "*.R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total", "max.width"))
rm(list = rem)
cat("\n")
}
print(enumerate_total)
# end ====
