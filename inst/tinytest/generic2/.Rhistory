temp.fun <- function(x) {
expect_equal(
sb_x(x),
x
) |> errorfun()
}
temp.fun(x)
# vector ====
x <- 1:10
temp.fun(x)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic")
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
test_allow_duplicates <- TRUE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb_x(x),
x
) |> errorfun()
}
# vector ====
x <- 1:10
temp.fun(x)
x <- factor(letters)
x <- factor(letters)
temp.fun(x)
x <- matrix(1:20, ncol = 4)
temp.fun(x)
x <- array(1:27, c(3,3,3))
temp.fun(x)
temp.fun <- function(x) {
expect_equal(
sb_x(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
test_allow_duplicates <- TRUE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb_x(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb_rm(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
temp.fun <- function(x) {
expect_equal(
sb_rm(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb_rm(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
sb_rm(x)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb_rm(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
?squarebrackets::squarebrackets_indx_args
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
?squarebrackets::squarebrackets_indx_args
?squarebrackets::sb_set()
?squarebrackets::squarebrackets_immutable_classes
?squarebrackets::squarebrackets_mutable_classes
?squarebrackets::squarebrackets_indx_args
?squarebrackets::squarebrackets_options
?squarebrackets::squarebrackets_PassByReference
?squarebrackets::squarebrackets_PassByReference
?squarebrackets::squarebrackets_inconveniences
?squarebrackets::class_mutable_atomic
dims <- c(4,4,4,4,4,4,4)
dims <- rep(4, 7)
x <- array(1:prod(dims), dim =dims)
length(x)
dims <- rep(4, 7)
x <- array(1:prod(dims), dim =dims)
nms <- c("a", "b", 'c', "d")
dimnames(x) <- list(nms, nms, nms)
dimnames(x) <- rep(list(nms), 7)
dims <- rep(4, 7)
x <- array(1:prod(dims), dim =dims)
nms <- c("a", "b", 'c', "d")
dimnames(x) <- rep(list(nms), 7)
x.names <- array(sample(letters, length(x), TRUE), rep(4, 7))
names(x) <- x.names
x2 <- x[1:2, 1:2, 1:2]
x2 <- x[1:2, 1:2, 1:2, 1:2, 1:2, 1:2, 1:2]
names(x2) <- x.names[1:2, 1:2, 1:2]
x2 <- x[1:2, 1:2, 1:2, 1:2, 1:2, 1:2, 1:2]
names(x2) <- x.names[1:2, 1:2, 1:2, 1:2, 1:2, 1:2, 1:2]
expect_equal(
sb_x(x, list(1:2, 1:2, 1:2), 1:3),
x2
)
dims <- rep(4, 7)
x <- array(1:prod(dims), dim =dims)
nms <- c("a", "b", 'c', "d")
dimnames(x) <- rep(list(nms), 7)
x.names <- array(sample(letters, length(x), TRUE), rep(4, 7))
names(x) <- x.names
x2 <- x[1:2, 1:2, 1:2, 1:2, 1:2, 1:2, 1:2]
names(x2) <- x.names[1:2, 1:2, 1:2, 1:2, 1:2, 1:2, 1:2]
expect_equal(
sb_x(x, rep(list(1:2), 7), 1:7),
x2
)
expect_equal(
sb_rm(x, rep(list(1:2), 7), 1:7),
x2
)
expect_equal(
sb_rm(x, rep(list(3:4), 7), 1:7),
x2
)
# atomic matrix ====
x <- matrix(1:20, ncol = 4)
colnames(x) <- c("a", "b", "c", "d")
rownames(x) <- letters[1:5]
x.names <- letters[1:20]
names(x) <- x.names
dim(x.names) <- dim(x)
x2 <- x[1:2, 1:2]
names(x2) <- x.names[1:2, 1:2]
expect_equal(
sb_x(x, 1:2, 1:2),
x2
)
expect_equal(
sb_rm(x, 3:5, 3:4),
x2
)
# atomic 3d array ====
dims <- c(4,4,4)
x <- array(1:prod(dims), dim =dims)
nms <- c("a", "b", 'c', "d")
dimnames(x) <- list(nms, nms, nms)
x.names <- array(sample(letters, length(x), TRUE), c(4,4,4))
names(x) <- x.names
x2 <- x[1:2, 1:2, 1:2]
names(x2) <- x.names[1:2, 1:2, 1:2]
expect_equal(
sb_x(x, list(1:2, 1:2, 1:2), 1:3),
x2
)
expect_equal(
sb_rm(x, list(3:4, 3:4, 3:4), 1:3),
x2
)
# atomic 7d array ====
dims <- rep(4, 7)
x <- array(1:prod(dims), dim =dims)
nms <- c("a", "b", 'c', "d")
dimnames(x) <- rep(list(nms), 7)
x.names <- array(sample(letters, length(x), TRUE), rep(4, 7))
names(x) <- x.names
x2 <- x[1:2, 1:2, 1:2, 1:2, 1:2, 1:2, 1:2]
names(x2) <- x.names[1:2, 1:2, 1:2, 1:2, 1:2, 1:2, 1:2]
expect_equal(
sb_x(x, rep(list(1:2), 7), 1:7),
x2
)
expect_equal(
sb_rm(x, rep(list(3:4), 7), 1:7),
x2
)
# recursive array ====
x <- matrix(lapply(1:20, \(x)list(sample(letters), rnorm(10))), ncol = 4)
colnames(x) <- c("a", "b", "c", "d")
rownames(x) <- letters[1:5]
x.names <- letters[1:20]
names(x) <- x.names
dim(x.names) <- dim(x)
x2 <- x[1:2, 1:2]
names(x2) <- x.names[1:2, 1:2]
expect_equal(
sb2_x(x, n(1:2, 1:2), 1:2),
x2
)
expect_equal(
sb2_rm(x, n(3:5, 3:4), 1:2),
x2
)
enumerate <- 8
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
?squarebrackets::squarebrackets_method_dispatch
?squarebrackets::squarebrackets_PassByReference
?squarebrackets::sb_set()
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic2")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_PassByReference <- FALSE
temp.fun <- function(x) {
tempfun <- function(x) {
x[] <- -1
return(x)
}
expect_equal(
sb2_mod(x, tf = \(x) return(-1)),
tempfun(x)
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
rlang::global_entrace()
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
rlang::last_trace()
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic2")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_PassByReference <- FALSE
temp.fun <- function(x) {
tempfun <- function(x) {
x[] <- -1
return(x)
}
expect_equal(
sb2_mod(x, tf = \(x) return(-1)),
tempfun(x)
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic2")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- FALSE
test_PassByReference <- FALSE
temp.fun <- function(x) {
tempfun <- function(x) {
x[] <- -1
return(x)
}
expect_equal(
sb2_mod(x, inv = TRUE, tf = \(x) return(-1)),
tempfun(x)
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
test_allow_duplicates <- TRUE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb2_x(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb_rm(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
temp.fun <- function(x) {
expect_equal(
sb2_rm(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic2")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- TRUE
test_PassByReference <- FALSE
temp.fun <- function(x) {
expect_equal(
sb2_rm(x),
x
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
library(tinycodet)
?tinycodet::tinycodet
