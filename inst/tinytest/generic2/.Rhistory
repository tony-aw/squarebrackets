d <- 1:2
rem <- which(vapply(s, is.null, logical(1L)))
if(length(rem) > 0L) {
s <- s[-rem]
d <- d[-rem]
}
rp <- lapply(pre_subset_df(x, s, d), \(x)x[1])
pre_subset_df(x, s, d)
f_expect(x, row[[i]], col[[j]])
f_out(x, s, d)
d
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- FALSE
test_PassByReference <- FALSE
temp.fun <- function(x) {
tempfun <- function(x) {
x[] <- x[1]
return(x)
}
expect_equal(
sb2_mod(x, rp = x[1], inv = TRUE),
tempfun(x)
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
test_sb <- function(x, i, rp) {
if(!is.list(x)) {
i <- indx_wo(i, x, names(x), length(x))
if(length(i) == 0) return(x)
x[i] <- rp
return(x)
}
if(is.list(x)) {
i <- indx_wo(i, x, names(x), length(x))
if(length(i) == 0) return(x)
if(length(i) != 1)  x[i] <- as.list(rp)
if(length(i) == 1) x[[i]] <- rp
return(x)
}
}
temp.fun <- function(x, elements) {
for (i in 1:length(elements)) {
rp1 <- rp2 <- rep(1, length(indx_wo(elements[[i]], x, names(x), length(x))))
if(is.list(x)) rp1 <- as.list(rp1)
if(is.list(x) && length(rep) != 1) rp2 <- as.list(rp)
expect_equal(
sb2_mod(x, i = elements[[i]], rp = rp1, inv = TRUE),
test_sb(x, i = elements[[i]], rp = rp2)
) |> errorfun()
assign("enumerate", enumerate + 1, envir = parent.frame(n = 1))
}
}
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic2")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- FALSE
test_PassByReference <- FALSE
temp.fun <- function(x) {
tempfun <- function(x) {
x[] <- x[1]
return(x)
}
expect_equal(
sb2_mod(x, rp = x[1], inv = TRUE),
tempfun(x)
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
test_sb <- function(x, i, rp) {
if(!is.list(x)) {
i <- indx_wo(i, x, names(x), length(x))
if(length(i) == 0) return(x)
x[i] <- rp
return(x)
}
if(is.list(x)) {
i <- indx_wo(i, x, names(x), length(x))
if(length(i) == 0) return(x)
if(length(i) != 1)  x[i] <- as.list(rp)
if(length(i) == 1) x[[i]] <- rp
return(x)
}
}
temp.fun <- function(x, elements) {
for (i in 1:length(elements)) {
rp1 <- rp2 <- rep(1, length(indx_wo(elements[[i]], x, names(x), length(x))))
if(is.list(x)) rp1 <- as.list(rp1)
if(is.list(x) && length(rep) != 1) rp2 <- as.list(rp)
expect_equal(
sb2_mod(x, i = elements[[i]], rp = rp1, inv = TRUE),
test_sb(x, i = elements[[i]], rp = rp2)
) |> errorfun()
assign("enumerate", enumerate + 1, envir = parent.frame(n = 1))
}
}
indx_named <- c("ab")
sys.source(file.path(getwd(), "source", "sourcetest-elements.R"), envir = environment())
rep3.bind <- function(x, dim) {
return(abind::abind(x, x, x, along = dim))
}
pre_subset_mat <- function(x, row = NULL, col = NULL) {
if(!is.null(row)) row <- indx_wo(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_wo(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
return(x[row, col])
}
f_expect.matrix <- f_expect.2d <- function(x, row = NULL, col = NULL) {
rp <- parent.frame()$rp
if(!is.null(row)) row <- indx_wo(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_wo(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
x[row, col] <- rp
return(x)
}
f_out.matrix <- function(x, row, col) {
rp <- parent.frame()$rp
return(sb2_mod(x, row = row, col = col, inv = TRUE, rp = rp))
}
f_out.2d <- function(x, s, d) {
rp <- parent.frame()$rp
return(sb2_mod.array(x, s, d, inv = TRUE, rp = rp))
}
pre_subset_1d <- function(x, i) {
return(indx_wo(i, x, names(x), length(x)))
}
f_expect.1d <- function(x, i) {
rp <- parent.frame()$rp
i <- indx_wo(i, x, dimnames(x)[[1]], length(x))
if(any_empty_indices(i)) {
return(x)
}
x[i] <- rp
return(x)
}
f_out.1d <- function(x, s, d) {
rp <- parent.frame()$rp
return(sb2_mod(x, s, d, inv = TRUE, rp = rp))
}
sb_test <- function(x, ...) {
rp <- lapply(sb2_wo.array(x, ...), \(x) x * -1)
return(sb2_mod.array(x, ..., inv = TRUE, rp = rp))
}
f_expect.arbitrary <- function(x, i, j, l) {
tf <- mean
i <- indx_wo(i, x, rownames(x), nrow(x))
j <- indx_wo(j, x, colnames(x), ncol(x))
l <- indx_wo(l, x, dimnames(x)[4], dim(x)[4])
rp <- lapply(x[i, j, , l], \(x) x * -1)
x[i, j, , l] <- rp
return(x)
}
sys.source(file.path(getwd(), "source", "sourcetest-dims.R"), envir = environment())
pre_subset_df <- sb2_wo.data.frame
f_expect.data.frame <- function(x, row = NULL, col = NULL) {
rp <- parent.frame()$rp
if(!is.null(row)) row <- indx_wo(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_wo(col, x, names(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
row <- as.integer(row)
col <- as.integer(col)
x <- data.table::copy(x)
data.table::set(x, row, col, rp)
return(x)
}
f_out.data.frame <- function(x, s, d) {
rp <- parent.frame()$rp
return(sb2_mod.data.frame(x, s, d, rp = rp, inv = TRUE))
}
# rl. <- loadNamespace("rlang")
dt. <- loadNamespace("data.table")
sys.source(file.path(getwd(), "source", "sourcetest-datasets.R"), envir = environment())
f_out <- f_out.data.frame
f_expect <- f_expect.data.frame
any_empty_indices <- function(...) {
lst <- list(...)
return(squarebrackets:::.any_empty_indices(lst))
}
indx_general <- function(x, dim.i) {
dim.n <- dim(x)[[dim.i]]
dim.n1 <- dim.n - round(dim.n/2)
dim.n2 <- dim.n - dim.n1
out <- list(
NULL,
logical(0),
rep(TRUE, dim.n),
rep(FALSE, dim.n),
c(rep(TRUE, dim.n1), rep(FALSE, dim.n2)),
1,
1:3,
3:1,
c(2, 3, 1),
1 * -1i,
1:3 * -1i,
3:1 * -1i,
c(2, 3, 1) * -1i,
1 * 1i,
1:3 * 1i,
3:1 * 1i,
c(2, 3, 1) * 1i
)
if(test_allow_duplicates) {
out <- c(out, list(c(1, 1, 1)))
}
return(out)
}
indx_named <- function(x, dim.i) {
if(dim.i == 1L) {
out <- indx_general(x, dim.i)
}
if(dim.i == 2L) {
out <- c(
indx_general(x, dim.i), list("a", c("a", "b"), c("b", "a"))
)
}
return(out)
}
temp.fun.main <- function(x, row, col, f_expect, f_out) {
out <- expected <- vector(
"list", length(row) * length(col)
)
counter <- 1
for(i in 1:length(row)) {
for(j in 1:length(col)) {
s <- n(row[[i]], col[[j]])
d <- 1:2
rem <- which(vapply(s, is.null, logical(1L)))
if(length(rem) > 0L) {
s <- s[-rem]
d <- d[-rem]
}
rp <- lapply(pre_subset_df(x, s, d), \(x)x[1])
expected[[counter]] <- f_expect(x, row[[i]], col[[j]])
out[[counter]] <- f_out(x, s, d)
assign("enumerate", enumerate + 2, envir = parent.frame(n = 1))
counter <- counter + 1
}
}
counter <- counter - 1
out <- out[1:counter]
expected <- expected[1:counter]
expect_equal(expected, out) |> errorfun()
expect_true(all(sapply(out, is.data.frame))) |> errorfun()
}
# indices ====
x.original <- data.frame(
a = -sample.int(10),
b = letters[1:10],
c = rnorm(10),
d = rep(c(TRUE, FALSE), 5)
)
row <- indx_named(x.original, 1)
col <- indx_named(x.original, 2)
filter <- list(
NULL,
~ (a >= 4) & (b != "a") & (d==TRUE), # partially TRUE/FALSE
~ (a > 10) | (b == "z"), # completely FALSE
~ (a < 10) | (b == "a") # completely TRUE
)
get_vars <- list(
NULL,
is.numeric, # partially TRUE/FALSE
is.factor, # completely FALSE
is.atomic # completely TRUE
)
if(!test_PassByReference) {
# data.frame ====
x <- as.data.frame(x.original)
temp.fun.main(x, row, col, f_expect.data.frame, f_out.data.frame)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
anyDuplicated(colnames(sb2_x(x, s = c(1,1,1), d = 2L))),
0
)
expect_equal(
anyDuplicated(colnames(sb2_x(x, s = c("a","a","a"), d = 2L))),
0
)
enumerate <- enumerate <- enumerate + 1
}
# tibble ====
if(requireNamespace("tibble")) {
x <- tibble::as_tibble(x.original)
temp.fun.main(x, row, col, f_expect.data.frame, f_out.data.frame)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
anyDuplicated(colnames(sb2_x(x, s = c(1,1,1), d = 2L))),
0
)
expect_equal(
anyDuplicated(colnames(sb2_x(x, s = c("a","a","a"), d = 2L))),
0
)
enumerate <- enumerate <- enumerate + 1
}
}
}
s <- n(row[[i]], col[[j]])
d <- 1:2
rem <- which(vapply(s, is.null, logical(1L)))
if(length(rem) > 0L) {
s <- s[-rem]
d <- d[-rem]
}
rp <- lapply(pre_subset_df(x, s, d), \(x)x[1])
f_out(x, s, d)
s
d
chkdup = FALSE
inv = TRUE
# checks:
.internal_check_dots(list(...), sys.call())
.internal_check_rptf(rp, tf, sys.call())
.check_args_df(x, s, d, obs, vars, abortcall = sys.call())
# make args:
if(length(d) == 0L) {
row <- 1:nrow(x)
col <- 1:ncol(x)
}
.ci_sub_check(x, s, d, 2L, sys.call())
rowcol <- .mat_rowcol(x, s, d, inv = FALSE, chkdup = FALSE, sys.call())
row <- rowcol[[1L]]
col <- rowcol[[2L]]
.any_empty_indices(n(row, col)
)
rowcol <- .mat_rowcol(x, s, d, inv = inv, chkdup = FALSE, sys.call())
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic2")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- FALSE
test_PassByReference <- FALSE
temp.fun <- function(x) {
tempfun <- function(x) {
x[] <- x[1]
return(x)
}
expect_equal(
sb2_mod(x, rp = x[1], inv = TRUE),
tempfun(x)
) |> errorfun()
}
sys.source(file.path(getwd(), "source", "sourcetest-missingargs.R"), envir = environment())
test_sb <- function(x, i, rp) {
if(!is.list(x)) {
i <- indx_wo(i, x, names(x), length(x))
if(length(i) == 0) return(x)
x[i] <- rp
return(x)
}
if(is.list(x)) {
i <- indx_wo(i, x, names(x), length(x))
if(length(i) == 0) return(x)
if(length(i) != 1)  x[i] <- as.list(rp)
if(length(i) == 1) x[[i]] <- rp
return(x)
}
}
temp.fun <- function(x, elements) {
for (i in 1:length(elements)) {
rp1 <- rp2 <- rep(1, length(indx_wo(elements[[i]], x, names(x), length(x))))
if(is.list(x)) rp1 <- as.list(rp1)
if(is.list(x) && length(rep) != 1) rp2 <- as.list(rp)
expect_equal(
sb2_mod(x, i = elements[[i]], rp = rp1, inv = TRUE),
test_sb(x, i = elements[[i]], rp = rp2)
) |> errorfun()
assign("enumerate", enumerate + 1, envir = parent.frame(n = 1))
}
}
indx_named <- c("ab")
sys.source(file.path(getwd(), "source", "sourcetest-elements.R"), envir = environment())
rep3.bind <- function(x, dim) {
return(abind::abind(x, x, x, along = dim))
}
pre_subset_mat <- function(x, row = NULL, col = NULL) {
if(!is.null(row)) row <- indx_wo(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_wo(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
return(x[row, col])
}
f_expect.matrix <- f_expect.2d <- function(x, row = NULL, col = NULL) {
rp <- parent.frame()$rp
if(!is.null(row)) row <- indx_wo(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_wo(col, x, colnames(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
x[row, col] <- rp
return(x)
}
f_out.matrix <- function(x, row, col) {
rp <- parent.frame()$rp
return(sb2_mod(x, row = row, col = col, inv = TRUE, rp = rp))
}
f_out.2d <- function(x, s, d) {
rp <- parent.frame()$rp
return(sb2_mod.array(x, s, d, inv = TRUE, rp = rp))
}
pre_subset_1d <- function(x, i) {
return(indx_wo(i, x, names(x), length(x)))
}
f_expect.1d <- function(x, i) {
rp <- parent.frame()$rp
i <- indx_wo(i, x, dimnames(x)[[1]], length(x))
if(any_empty_indices(i)) {
return(x)
}
x[i] <- rp
return(x)
}
f_out.1d <- function(x, s, d) {
rp <- parent.frame()$rp
return(sb2_mod(x, s, d, inv = TRUE, rp = rp))
}
sb_test <- function(x, ...) {
rp <- lapply(sb2_wo.array(x, ...), \(x) x * -1)
return(sb2_mod.array(x, ..., inv = TRUE, rp = rp))
}
f_expect.arbitrary <- function(x, i, j, l) {
tf <- mean
i <- indx_wo(i, x, rownames(x), nrow(x))
j <- indx_wo(j, x, colnames(x), ncol(x))
l <- indx_wo(l, x, dimnames(x)[4], dim(x)[4])
rp <- lapply(x[i, j, , l], \(x) x * -1)
x[i, j, , l] <- rp
return(x)
}
sys.source(file.path(getwd(), "source", "sourcetest-dims.R"), envir = environment())
pre_subset_df <- sb2_wo.data.frame
f_expect.data.frame <- function(x, row = NULL, col = NULL) {
rp <- parent.frame()$rp
if(!is.null(row)) row <- indx_wo(row, x, rownames(x), nrow(x))
if(!is.null(col)) col <- indx_wo(col, x, names(x), ncol(x))
if(any_empty_indices(row, col)) {
return(x)
}
if(is.null(row)) row <- seq_len(nrow(x))
if(is.null(col)) col <- seq_len(ncol(x))
row <- as.integer(row)
col <- as.integer(col)
x <- data.table::copy(x)
data.table::set(x, row, col, rp)
return(x)
}
f_out.data.frame <- function(x, s, d) {
rp <- parent.frame()$rp
return(sb2_mod.data.frame(x, s, d, rp = rp, inv = TRUE))
}
# rl. <- loadNamespace("rlang")
dt. <- loadNamespace("data.table")
sys.source(file.path(getwd(), "source", "sourcetest-datasets.R"), envir = environment())
sb_test <- function(x, ...)sb2_mod(x, ..., inv = TRUE, rp = x[1])
sys.source(file.path(getwd(), "source", "sourcetest-errors.R"), envir = environment())
