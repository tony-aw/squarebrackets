# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
enumerate_total <- 0
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
files
?list.files
files <- list.files(normalizePath(getwd(), "/generic"), pattern = ".R", full.names = TRUE)
files <- list.files(normalizePath(getwd(), "generic"), pattern = ".R", full.names = TRUE)
files <- list.files(normalizePath(c(getwd(), "generic")), pattern = ".R", full.names = TRUE)
files
c(getwd(), "generic")
?normalizePath
files <- list.files(normalizePath(paste0(getwd(), "/generic")), pattern = ".R", full.names = TRUE)
files
enumerate_total <- 0
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
files <- list.files(normalizePath(paste0(getwd(), "/generic")), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
normalizePath(paste0(getwd(), "/generic")
)
files <- list.files(normalizePath(paste0(getwd(), "/generic")), pattern = ".R", full.names = TRUE)
getwd()
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- TRUE
test_PassByReference <- FALSE
test_sb <- function(x, i) {
i <- indx_rm(i, x, names(x), length(x))
return(x[i])
}
temp.fun <- function(x, elements) {
for (i in 1:length(elements)) {
expect_equal(
sb2_rm(x, i = elements[[i]]),
test_sb(x, i = elements[[i]])
) |> errorfun()
assign("enumerate", enumerate + 1, envir = parent.frame(n = 1))
}
}
indx_general <- list(
integer(0),
1, 1:2, 2:1,
c(rep(TRUE, 24), rep(FALSE, 24)),
rep(TRUE, 48), rep(FALSE, 48),
c(TRUE, rep(FALSE, 47)), c(FALSE, rep(TRUE, 47)),
function(x) x>5
)
indx_named <- c(indx_general, "ab")
sys.source(file.path(getwd(), "source", "sourcetest-elements.R"), envir = environment())
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/generic2")
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
test_allow_duplicates <- FALSE
test_use_factors <- TRUE
test_PassByReference <- FALSE
test_sb <- function(x, i) {
i <- indx_rm(i, x, names(x), length(x))
return(x[i])
}
temp.fun <- function(x, elements) {
for (i in 1:length(elements)) {
expect_equal(
sb2_rm(x, i = elements[[i]]),
test_sb(x, i = elements[[i]])
) |> errorfun()
assign("enumerate", enumerate + 1, envir = parent.frame(n = 1))
}
}
indx_general <- list(
integer(0),
1, 1:2, 2:1,
c(rep(TRUE, 24), rep(FALSE, 24)),
rep(TRUE, 48), rep(FALSE, 48),
c(TRUE, rep(FALSE, 47)), c(FALSE, rep(TRUE, 47)),
function(x) x>5
)
indx_named <- c(indx_general, "ab")
sys.source(file.path(getwd(), "source", "sourcetest-elements.R"), envir = environment())
x <- as.list(1:10)
expect_equal(
sb2_rm(x, 1:9, drop = TRUE),
x[[10]]
)
expect_equal(
sb2_rm(x, c(FALSE, rep(TRUE, 9)), drop = TRUE),
x[[1]]
)
enumerate <- enumerate + 2
subset_arr <- function(x, i, j, l) {
i <- indx_rm(i, x, rownames(x), nrow(x))
j <- indx_rm(j, x, colnames(x), ncol(x))
l <- indx_rm(l, x, dimnames(x)[4], dim(x)[4])
x[i, j, , l, drop = FALSE]
}
x <- array(seq_len(10^4), dim = c(10, 10, 10, 10))
rownames(x) <- c(letters[1:8], "a", NA)
idx <- list(c("a"), c(1:3), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb2_rm(x, idx, dims),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
idx <- list(c("a"), logical(0), c(rep(TRUE, 5), rep(FALSE, 5)))
subset_arr <- function(x, i, j, l) {
i <- indx_rm(i, x, rownames(x), nrow(x))
j <- indx_rm(j, x, colnames(x), ncol(x))
l <- indx_rm(l, x, dimnames(x)[4], dim(x)[4])
x[i, j, , l, drop = FALSE]
}
x <- array(as.list(seq_len(10^4)), dim = c(10, 10, 10, 10))
rownames(x) <- c(letters[1:8], "a", NA)
idx <- list(c("a"), c(1:3), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb2_rm(x, idx, dims),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
idx <- list(c("a"), logical(0), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb2_rm(x, idx, dims),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
idx <- list(c("a"), c(1:4), rep(FALSE, 10))
dims <- c(1,2,4)
expect_equal(
sb2_rm(x, idx, dims),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
x <- array(as.list(seq_len(5^4)), dim = c(5, 5, 5, 5))
rownames(x) <- c(letters[1:3], "a", NA)
idx <- list(c("a"), c(1:3), c(rep(TRUE, 2), rep(FALSE, 3)))
dims <- c(1,2,4)
rp <- list(seq_len(length(sb2_x(x, idx, dims)))* -1)
expect_equal(
sb2_mod(x, idx, dims, rp = rp),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
idx <- list(c("a"), logical(0), c(rep(TRUE, 2), rep(FALSE, 3)))
dims <- c(1,2,4)
rp <- list(seq_len(length(sb2_x(x, idx, dims)))* -1)
expect_equal(
sb2_mod(x, idx, dims, rp = rp),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
idx <- list(c("a"), c(1:4), rep(FALSE, 5))
dims <- c(1,2,4)
rp <- list(seq_len(length(sb2_x(x, idx, dims)))* -1)
expect_equal(
sb2_mod(x, idx, dims, rp = rp),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
x <- array(as.list(seq_len(10^4)), dim = c(10, 10, 10, 10))
rownames(x) <- c(letters[1:8], "a", NA)
tf <- function(x) -x
idx <- list(c("a"), c(1:3), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb2_mod(x, idx, dims, tf = tf),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]], tf)
)
idx <- list(c("a"), logical(0), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb2_mod(x, idx, dims, tf = tf),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]], tf)
)
idx <- list(c("a"), c(1:4), rep(FALSE, 10))
dims <- c(1,2,4)
expect_equal(
sb2_mod(x, idx, dims, tf = tf),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]], tf)
)
enumerate <- enumerate + 3
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
subset_arr <- function(x, i, j, l) {
i <- indx_x(i, x, rownames(x), nrow(x))
j <- indx_x(j, x, colnames(x), ncol(x))
l <- indx_x(l, x, dimnames(x)[4], dim(x)[4])
x[i, j, , l, drop = FALSE]
}
x <- array(as.list(seq_len(10^4)), dim = c(10, 10, 10, 10))
rownames(x) <- c(letters[1:8], "a", NA)
idx <- list(c("a", "a"), c(1, 1:3), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb2_x(x, idx, dims),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
idx <- list(c("a", "a"), logical(0), c(rep(TRUE, 5), rep(FALSE, 5)))
dims <- c(1,2,4)
expect_equal(
sb2_x(x, idx, dims),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
idx <- list(c("a", "a"), c(1, 1:4), rep(FALSE, 10))
dims <- c(1,2,4)
expect_equal(
sb2_x(x, idx, dims),
subset_arr(x, idx[[1]], idx[[2]], idx[[3]])
)
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
test_allow_duplicates <- TRUE
test_use_factors <- TRUE
test_PassByReference <- FALSE
test_sb <- function(x, i) {
i <- indx_x(i, x, names(x), length(x))
return(x[i])
}
temp.fun <- function(x, elements) {
for (i in 1:length(elements)) {
expect_equal(
sb2_x(x, i = elements[[i]], .attr = NULL),
test_sb(x, i = elements[[i]])
) |> errorfun()
assign("enumerate", enumerate + 1, envir = parent.frame(n = 1))
}
}
indx_general <- list(
logical(0),
1, 1:2, 2:1, c(1, 1, 1),
c(rep(TRUE, 24), rep(FALSE, 24)),
rep(TRUE, 48), rep(FALSE, 48),
function(x) x>5
)
indx_named <- c(indx_general, "ab", list(c("ab", "ab")))
sys.source(file.path(getwd(), "source", "sourcetest-elements.R"), envir = environment())
x <- as.list(1:10)
expect_equal(
sb2_x(x, 1, drop = TRUE),
x[[1]]
)
# uniquely named list ====
x <- -sample.int(48) |> as.list()
names(x) <- general_names[1:48]
temp.fun(x, indx_named)
# unnamed list ====
x <- -sample.int(48) |> as.list()
temp.fun(x, indx_general)
# non-uniquely named list ====
x <- -sample.int(48) |> as.list()
names(x) <- c(general_names[1:45], "ab", "ab", NA)
temp.fun(x, indx_named)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
sb_x(x, i = c("ab", "ab", "ab")),
rep(x[which(names(x) %in% "ab")], 3)
) |> errorfun()
}
# uniquely named array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
names(x) <- general_names[1:48]
# non-uniquely named list ====
x <- -sample.int(48) |> as.list()
names(x) <- c(general_names[1:45], "ab", "ab", NA)
temp.fun(x, indx_named)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
sb2_x(x, i = c("ab", "ab", "ab")),
rep(x[which(names(x) %in% "ab")], 3)
) |> errorfun()
}
# uniquely named array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
names(x) <- general_names[1:48]
temp.fun(x, indx_named)
# unnamed array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
temp.fun(x, indx_general)
# non-uniquely named array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
names(x) <- c(general_names[1:45], "ab", "ab", NA)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
sys.source(file.path(getwd(), "source", "sourcetest-elements.R"), envir = environment())
# uniquely named list ====
x <- -sample.int(48) |> as.list()
names(x) <- general_names[1:48]
temp.fun(x, indx_named)
# unnamed list ====
x <- -sample.int(48) |> as.list()
temp.fun(x, indx_general)
# non-uniquely named list ====
x <- -sample.int(48) |> as.list()
names(x) <- c(general_names[1:45], "ab", "ab", NA)
temp.fun(x, indx_named)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
sb2_x(x, i = c("ab", "ab", "ab")),
rep(x[which(names(x) %in% "ab")], 3)
) |> errorfun()
}
# uniquely named array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
names(x) <- general_names[1:48]
temp.fun(x, indx_named)
# unnamed array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
temp.fun(x, indx_general)
# non-uniquely named array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
names(x) <- c(general_names[1:45], "ab", "ab", NA)
temp.fun(x, indx_named)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
sb_x(x, i = c("ab", "ab", "ab")),
rep(x[which(names(x) %in% "ab")], 3)
) |> errorfun()
}
expect_equal(
sb2_x(x, i = c("ab", "ab", "ab")),
rep(x[which(names(x) %in% "ab")], 3)
) |> errorfun()
8
8
8
# non-uniquely named array ====
x <- -sample.int(48) |> as.list() |> array(dim = c(3,4,4))
names(x) <- c(general_names[1:45], "ab", "ab", NA)
temp.fun(x, indx_named)
if(isTRUE(test_allow_duplicates)) {
expect_equal(
sb2_x(x, i = c("ab", "ab", "ab")),
rep(x[which(names(x) %in% "ab")], 3)
) |> errorfun()
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
print(enumerate_total)
# end ====
