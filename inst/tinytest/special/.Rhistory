general_names <- combn(letters, 2) |> apply(2, paste, collapse = "")
needles <- list(
"ab",
c("ac", "ab", "ab", "ac"), # to check duplicates AND ordering
character(0),
general_names,
c(general_names, "ab", "ab"),
letters,
LETTERS
)
haystack <- list(
"ab",
c("ac", "ab", "ab", "ac"),
NA,
character(0),
general_names,
c(general_names, "ab", "ab", NA),
letters,
LETTERS
)
tempfun <- function(needles, haystack) {
if(length(na.omit(needles)) == 0 || length(na.omit(haystack)) == 0) {
return(integer(0))
}
return(lapply(na.omit(needles), \(j) which(na.omit(haystack) == j)) |> unlist())
}
for(iNeedles in needles) {
for(iHaystack in haystack) {
expect_equal(
tempfun(iNeedles, iHaystack),
match_all(iNeedles, iHaystack)
) |> errorfun()
enumerate <- enumerate + 1
}
}
iNeedles
iHaystack
tempfun(iNeedles, iHaystack)
match_all(iNeedles, iHaystack)
v <- collapse::funique(needles)
v <- collapse::funique(needles)
needles
iNeedles
needles <- iNeedles
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
v
m <- collapse::fmatch(haystack, v)
haystack <- iHaystack
m <- collapse::fmatch(haystack, v)
m
.C_match_range(m)
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/helper")
enumerate <- 0 # to count number of tests in loops
sys.source(file.path(getwd(), "source", "functions4testing.R"), envir = environment())
general_names <- combn(letters, 2) |> apply(2, paste, collapse = "")
needles <- list(
"ab",
c("ac", "ab", "ab", "ac"), # to check duplicates AND ordering
character(0),
general_names,
c(general_names, "ab", "ab"),
letters,
LETTERS
)
haystack <- list(
"ab",
c("ac", "ab", "ab", "ac"),
NA,
character(0),
general_names,
c(general_names, "ab", "ab", NA),
letters,
LETTERS
)
tempfun <- function(needles, haystack) {
if(length(na.omit(needles)) == 0 || length(na.omit(haystack)) == 0) {
return(integer(0))
}
return(lapply(na.omit(needles), \(j) which(na.omit(haystack) == j)) |> unlist())
}
for(iNeedles in needles) {
for(iHaystack in haystack) {
expect_equal(
tempfun(iNeedles, iHaystack),
match_all(iNeedles, iHaystack)
) |> errorfun()
enumerate <- enumerate + 1
}
}
tempfun <- function(needles, haystack) {
if(length(na.omit(needles)) == 0 || length(na.omit(haystack)) == 0) {
return(list())
}
out <- lapply(needles, \(j) which(haystack == j))
names(out) <- needles
return(out)
}
checkfun <- function(x, y) {
if(length(x)==0 && length(y) == 0) return(TRUE)
if(collapse::allNA(x) && collapse::allNA(y)) {
return(length(x) == length(y))
}
check <- all(x == y, na.rm = TRUE) && all(is.na(x) == is.na(y))
return(check)
}
for(iNeedles in needles) {
for(iHaystack in haystack) {
expect <- tempfun(iNeedles, iHaystack)
out <- match_all(iNeedles, iHaystack, unlist = FALSE)
if(length(expect) != 0 || length(out) != 0) {
expect_true(
all(mapply(checkfun, expect, out))
) |> errorfun() |> print()
}
enumerate <- enumerate + 1
}
}
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
# codetools checks:
codetools::checkUsagePackage("squarebrackets")
# if(!require(tinytest)){install.packages("tinytest")}
# tinytest::setup_tinytest("./squarebrackets")
# check package in general:
# Note: edit .Rbuildignore to make it ignore things R CMD CHECK should not check
devtools::run_examples("./squarebrackets", fresh = TRUE)
tinytest::run_test_dir("./squarebrackets/inst/tinytest/helper")
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
devtools::build_manual(
"./squarebrackets", "./squarebrackets"
) # if this fails...:
foo <- rcmdcheck::rcmdcheck("./squarebrackets")
foo
foo <- rcmdcheck::rcmdcheck("./squarebrackets", args = c("--no-manual", "--as-cran"))
foo
tinytest::run_test_dir("./squarebrackets/inst/tinytest/helper")
tinytest::test_package(
"squarebrackets", set_env=list(LC_COLLATE="C")
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/tests")
tinytest::test_package(
"squarebrackets", set_env=list(LC_COLLATE="C")
)
setwd("D:/D Desktop/Publications/R package squarebrackets")
tinytest::test_package(
"squarebrackets", set_env=list(LC_COLLATE="C")
)
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets")
tinytest::test_package(
"squarebrackets", set_env=list(LC_COLLATE="C")
)
foo <- rcmdcheck::rcmdcheck("./squarebrackets")
# set-up ====
setwd("D:/D Desktop/Publications/R package squarebrackets")
sessionInfo()
pkgs <- c("devtools", "roxygen2", "usethis", "rcmdcheck", "spelling", "tinytex",
"tinytest",
"Rcpp", "pkgdown", "tinytest")
for(i in pkgs) if(!requireNamespace(i))install.packages(i)
library(tinytest)
# install(file.path("D:/D Desktop/Publications/ImageMagick-7.1.0-62-Q16-HDRI-x64-dll"))
# tinytex::install_tinytex()
# tinytex::tlmgr_install("unfonts-extra")
# tinytex::tlmgr_install("makeindex")
#  create("squarebrackets")
# Rcpp::Rcpp.package.skeleton("squarebrackets")
# set version ====
package_tarname <- "squarebrackets_0.0.0.9.tar.gz"
# document ====
Rcpp::compileAttributes("squarebrackets")
devtools::document("./squarebrackets")
foo <- rcmdcheck::rcmdcheck("./squarebrackets")
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/special")
enumerate <- 0
# general errors ====
x <- list(a = 1:10, b = letters[1:10])
expect_error(
dt_aggregate(x, SDcols = "a", by = "b", f = sum),
pattern = "`x` must be a data.table"
)
expect_error(
dt_setcoe(x, col = "a", v = as.numeric),
pattern = "`x` must be a data.table"
)
expect_error(
dt_setrm(x, col = "a"),
pattern = "`x` must be a data.table"
)
expect_error(
dt_setadd(x, data.table::data.table(e = 1:10)),
pattern = "`x` must be a data.table"
)
expect_error(
dt_setreorder(x),
pattern = "`x` must be a data.table"
)
x <- data.table::data.table(a = 1:10, a = letters[1:10])
expect_error(
dt_aggregate(x, SDcols = "a", by = "b", f= sum),
pattern = "`x` does not have unique variable names for all columns; \n fix this before subsetting"
)
expect_error(
dt_setcoe(x, col = "a", v = as.numeric),
pattern = "`x` does not have unique variable names for all columns; \n fix this before subsetting"
)
expect_error(
dt_setrm(x, col = "a"),
pattern = "`x` does not have unique variable names for all columns; \n fix this before subsetting"
)
expect_error(
dt_setadd(x, data.table::data.table(e = 1:10)),
pattern = "`x` does not have unique variable names for all columns; \n fix this before subsetting"
)
expect_error(
dt_setreorder(x, varorder = 2),
pattern = "`x` does not have unique variable names for all columns; \n fix this before subsetting"
)
x <- data.table::data.table(a = 1:10, b = letters[1:10])
new <- list(a = 1:10, b = letters[1:10])
expect_error(
dt_setadd(x, new),
pattern = "`new` must be a data.frame-like object"
)
new <- data.table::data.table(e = 1:10, e = letters[1:10])
expect_error(
dt_setadd(x, new),
pattern = "`new` does not have unique variable names for all columns; \n fix this before subsetting"
)
new <- data.table::data.table(b = 1:10, c = letters[1:10])
expect_error(
dt_setadd(x, new),
pattern = "column(s) already exist",
fixed = TRUE
)
expect_error(
dt_setadd(x, data.table::data.table()),
pattern = "must give at least one new column"
)
enumerate <- enumerate + 12
# dt_aggregate ====
x <- data.table::data.table(
a = 1:20, b = 21:40,
by1 = as.factor(rep(letters[1:4], 5)), by2 = as.factor(rep(letters[5:8], 5))
)
expect_error(
dt_aggregate(x, SDcols = c("a", "b"), by = c("by1", "by2"), f = sum, order_by = NA),
pattern = "`order_by` must be `TRUE` or `FALSE`"
)
expect_error(
dt_aggregate(x, SDcols = ~ a + b, by = c("by1", "by2"), f = sum),
pattern = "`SDcols` and `by` must be atomic vectors"
)
expect_error(
dt_aggregate(x, SDcols = c("a", "b"), by = ~ by1 + by2, f = sum),
pattern = "`SDcols` and `by` must be atomic vectors"
)
y <- x
expect_equal(
dt_aggregate(x, SDcols = c("a", "b"), by = c("by1", "by2"), f = sum),
y[, lapply(.SD, sum), .SDcols = c("a", "b"), by = c("by1", "by2")]
)
expect_equal(
dt_aggregate(x, SDcols = c("a", "b"), by = c("by1", "by2"), f = sum, order_by = FALSE),
y[, lapply(.SD, sum), .SDcols = c("a", "b"), by = c("by1", "by2")]
)
expect_equal(
dt_aggregate(x, SDcols = c("a", "b"), by = c("by1", "by2"), f = sum, order_by = TRUE),
y[, lapply(.SD, sum), .SDcols = c("a", "b"), keyby = c("by1", "by2")]
)
enumerate <- enumerate + 6
# dt_setcoe ====
x <- data.table::data.table(a = 1:10, b = letters[1:10], c = 11:20, d = letters[11:20])
y <- data.table::copy(x)
cols <- c("a", "c")
dt_setcoe(x, col = cols, v = \(x)x^2)
# dt_setcoe ====
x <- data.table::data.table(a = 1:10, b = letters[1:10], c = 11:20, d = letters[11:20])
y <- data.table::copy(x)
cols <- c("a", "c")
dt_setcoe(x, col = cols, v = \(x)x^2)
rlang::global_entrace()
dt_setcoe(x, col = cols, v = \(x)x^2)
rlang::last_trace()
# dt_setcoe ====
x <- data.table::data.table(a = 1:10, b = letters[1:10], c = 11:20, d = letters[11:20])
cols <- c("a", "c")
v = \(x)x^2
col <- cols
col <- ci_df(
x, col, 2L, inv = FALSE, chkdup = chkdup
)
chkdup = FALSE
col <- ci_df(
x, col, 2L, inv = FALSE, chkdup = chkdup
)
col <- names(x)[col]
col <- c("a", "c")
ci_df(
x, col, 2L, inv = FALSE, chkdup = chkdup
)
x
ci_df
col
slice = col
margin = 2L
dnames <- names(x)
tci_chr(slice, dnames, inv, chkdup, uniquely_named)
inv = FALSE
uniquely_named = TRUE
tci_chr(slice, dnames, inv, chkdup, uniquely_named)
ci_df(
x, col, 2L, inv = FALSE, chkdup = chkdup
)
ci_df(
x, col, 2L, inv = FALSE, chkdup = chkdup, uniquely_named = TRUE
)
match_all(c("a", "c"), letters[1:4])
code <- "
const int *restrict px = INTEGER(x);
SEXP res;
int n = Rf_length(x);
int *buf = (int *) R_alloc(n, sizeof(int));
int count = 0;
for(int i = 0; i < n; ++i) {
if(px[i] != NA_INTEGER) {
buf[count] = px[i];
count++;
}
}
PROTECT(res = Rf_allocVector(INTSXP, count));
if(count) memcpy(INTEGER(res), buf, sizeof(int) * count);
UNPROTECT(1);
return res;
"
C_match_range <- inline::cfunction(body = code, sig = signature(x = "SEXP"), language = "C")
match_all1 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
if(length(v) == 1L) {
out <- list(collapse::whichv(haystack, v))
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m) # basically lapply(1:length(v), \(i) which(m == i))
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
match_all2 <- function(needles, haystack, unlist = TRUE) {
if(length(needles) == 0L || length(haystack) == 0L) {
if(unlist) return(integer(0L))
return(list())
}
if(anyNA(needles)) {
stop("`NA` not allowed in `needles`")
}
if(collapse::allNA(haystack)) {
if(unlist) return(integer(0L))
return(list())
}
if(typeof(needles) != typeof(haystack)) {
stop("type of `needles` does not match type of `haystack`")
}
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
if(length(v) == 1L) {
out <- collapse::whichv(haystack, v)
if(is_simple_match) {
return(out)
}
out <- list(out)
names(out) <- as.character(v)
}
else {
m <- collapse::fmatch(haystack, v)
if(is_simple_match) {
out <- C_match_range(m) |> order()
return(out)
}
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
}
if(length(needles) == length(v)) {
if(unlist) return(unlist(out, use.names = FALSE, recursive = FALSE))
return(out)
}
if(unlist) return(unlist(out[needles], use.names = FALSE, recursive = FALSE))
return(out[needles])
}
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
v <- unique(needles)
m <- collapse::fmatch(haystack, v)
tempfun1 <- function(m, v) {
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
out <- collapse::gsplit(g = m)
names(out) <- as.character(v)
out[collapse::whichNA(names(out))] <- NULL
return(out)
}
tempfun2 <- function(m) {
out <- C_match_range(m) |> order()
return(out)
}
tempfun2 <- function(m) {
out <- C_match_range(m) |> order()
return(out)
}
haystack <- sample(c(letters, LETTERS), 1e6, TRUE)
needles <- sample(c(letters, LETTERS, month.abb, month.name))
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
haystack <- letters[1:4]
needles <- c("a", "c")
foo <- bench::mark(
m1 =  match_all1(needles, haystack),
m2 = match_all2(needles, haystack),
min_iterations = 500
)
v <- collapse::funique(needles)
is_simple_match <- unlist && length(v) == length(needles)
unlist = TRUE
is_simple_match <- unlist && length(v) == length(needles)
m <- collapse::fmatch(haystack, v)
C_match_range(m) |> order()
C_match_range(m)
m
order(m)
