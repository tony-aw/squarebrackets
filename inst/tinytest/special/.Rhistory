files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./special")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./special")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/special")
# set-up ====
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
# error checks ====
margin <- 1
x <- matrix(1:20, ncol = 4)
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:27, dim = c(3,3,3))
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, ~ 1),
pattern = "`FUN` must be a function"
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, \(x)x[1]),
pattern = "improper function given"
)
expect_error(
setapply(x, margin, \(x)as.character(x)),
pattern = "improper function given"
)
enumerate <- enumerate + 5
margin <- 2
x <- matrix(1:20, ncol = 4)
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:27, dim = c(3,3,3))
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, ~ 1),
pattern = "`FUN` must be a function"
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, \(x)x[1]),
pattern = "improper function given"
)
expect_error(
setapply(x, margin, \(x)as.character(x)),
pattern = "improper function given"
)
enumerate <- enumerate + 5
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, 3, rev),
pattern = "`MARGIN` must be 1 or 2"
)
enumerate <- enumerate + 1
# main checks ====
x.data <- list(
sample(c(TRUE, FALSE, NA), 90, TRUE),
sample(c(1:88, NA, NA)),
rnorm(90),
sample(c(NA, NaN, Inf, -Inf, 0), 90, TRUE),
sample(c(letters, LETTERS, NA, NA), 90, TRUE),
sample(c(as.complex(1:89), NA)),
as.raw(0:89),
rep(NA, 90)
)
# main functionality check
for(iD in 1:length(x.data)) {
x <- mutable_atomic(x.data[[iD]], dim = c(9,10))
x2 <- x
for(i in 1:nrow(x)) x2[i,] <- rev(x2[i,])
setapply(x, 1, rev)
invisible(x) # waking up R
expect_equal(
x, as.mutable_atomic(x2)
) |> errorfun()
enumerate <- enumerate + 1
}
enumerate <- 0 # to count number of tests in loops
source(file.path(getwd(), "source", "functions4testing.R"))
margin <- 1
x <- matrix(1:20, ncol = 4)
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:27, dim = c(3,3,3))
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, ~ 1),
pattern = "`FUN` must be a function"
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, \(x)x[1]),
pattern = "improper function given"
)
expect_error(
setapply(x, margin, \(x)as.character(x)),
pattern = "improper function given"
)
enumerate <- enumerate + 5
margin <- 2
x <- matrix(1:20, ncol = 4)
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:27, dim = c(3,3,3))
expect_error(
setapply(x, margin, rev),
pattern = '`x` must be a mutable_atomic matrix'
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, ~ 1),
pattern = "`FUN` must be a function"
)
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, margin, \(x)x[1]),
pattern = "improper function given"
)
expect_error(
setapply(x, margin, \(x)as.character(x)),
pattern = "improper function given"
)
enumerate <- enumerate + 5
x <- mutable_atomic(1:20, dim = c(5,4))
expect_error(
setapply(x, 3, rev),
pattern = "`MARGIN` must be 1 or 2"
)
setapply(x, 3, rev)
rev
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
setwd("D:/D Desktop/Publications/R package squarebrackets/squarebrackets/inst/tinytest/count")
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./special")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
print(enumerate_total)
# end ====
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./special")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
print(enumerate_total)
# end ====
print(enumerate_total)
