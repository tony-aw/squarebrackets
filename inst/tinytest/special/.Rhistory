emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
sqrt(3)/2
geom_hexagon
cubedat <- data.frame(
x = c(0.1339746, sqrt(3)/2),
y = c(1.5, 1.0)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, sqrt(3)/1),
y = c(1.5, 1.0)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
data.frame(x = 1 + c(rep(-sqrt(3)/2, 2), 0, rep(sqrt(3)/2,
2), 0), y = 1 + c(0.5, -0.5, -1, -0.5, 0.5, 1))
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 1.0)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 0)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 0.5)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 0.75)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
cubedat <- data.frame(
x = c(0.1339746, 1.0),
y = c(1.5, 1.0)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y)) +
emoGG::geom_emoji(emoji="1f527", size=0.25) +
geom_pkgname("[squarebrackets]", 1, 1, color = "#FFFFFF",
family = "Aller_Rg", fontface = "plain", size = 8)
ggp
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
sqrt(3)
sqrt(3)/2
1+sqrt(3)/2
1-sqrt(3)/2
sqrt(3)/2
sqrt(3)/2 + 1
cubedat <- data.frame(
x = c(1-sqrt(3)/2, 1.0, 1.0, sqrt(3)/2 + 1),
y = c(1.5, 1.0, 1.0, 1.5)
)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_point(aes(x=1, y = 2)) +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- data.frame(
x = c(1-sqrt(3)/2, 1.0, 1.0, 1.0, 1.0, sqrt(3)/2 + 1),
y = c(1.5, 1.0, 1.0, 0, 0, 1.0, 1.5)
)
c(1-sqrt(3)/2, 1.0, 1.0, 1.0, 1.0, sqrt(3)/2 + 1)
x = c(1-sqrt(3)/2, 1.0, 1.0, 1.0, 1.0, sqrt(3)/2 + 1)
y = c(1.5, 1.0, 1.0, 0, 0, 1.0, 1.5)
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
cubedat
colnames(cubedat) <- c("x", "y")
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.5),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
cubedat <- rbind(
c(1-sqrt(3)/2, 1.5),
c(1.0, 1.0),
c(1.0, 1.0),
c(1.0, 0),
c(1.0, 0),
c(1.0, 1.0),
c(1.0, 1.0),
c(1+sqrt(3)/2, 1.5),
c(sqrt(3)/2 + 1, 1.5)
) |> as.data.frame()
colnames(cubedat) <- c("x", "y")
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y))
ggp
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y), color = "#87B13F", size = 1.2)
ggp <- ggplot(data.frame(x=1,y=1),aes(x=x,y=y)) +
geom_hexagon(size = 1.2, fill = "#1881C2", color = "#87B13F") +
coord_equal() +
theme_void() +
geom_line(data =cubedat, aes(x= x, y = y), color = "#87B13F", linewidth = 1.2)
ggp
?names
x <- data.table::data.table(a = letters)
library(squarebrackets)
sb_set(x, row = 1, rp = "XXX")
sb_set(x, row = 1, rp = list("XXX"))
x
letters
x$b <- letters
address(x%b)
address(x$b)
address(letters)
address(x$a)
x <- data.frame(a = letters)
address(x$a)
library(tinycodet)
import_as(~ dt., "data.table")
dt.$as.data.table(x)
x <- dt.$as.data.table(x)
address(x$a)
x <- mutable_atomic(as.integer(1:20), dim = c(5, 4))
x
sb_set(x, 1, NA)
sb_set(x, 1, 1, rp = NA)
x
sb_set(x, 1, 1, rp = NaN)
x
x <- mutable_atomic(as.double(1:20), dim = c(5,4))
x
sb_set(x, 1, 1, rp = NaN)
x
sb_set(x, i=1, rp = NaN)
x
sb_set(x, i=1, rp = NaN)
x
sb_set(x, i = length(x), rp = NaN)
x
getOption("squarebrackets_protected")
getOption("squarebrackets.protected")
getOption("squarebrackets.protected") %in% squarebrackets:::.protected_addresses()
?.Platform
x
View(x)
View(dt.)
class(dt.)
?import_as
?import_inops
?import_data
?import_LL
library(data.table)
x <- data.table(a = letters, b = 1:26)
as.list(x)
x2 <- as.list(x)
x2
dim(x2) <- c(nrow(x), ncol(x))
nrow(x)
ncol\x)
ncol(x)
dim(x2) <- dim(x)
x2 <- list(as.list(x))
x2
dim(x2) <- dim(x)
unlist(x)
x2 <- c(x)
x2
do.call(c, x)
do.call(list, x)
do.call(c, as.list(x))
as.list(x)
c(x$a, x$b)
c(x["b"], x["a"])
unlist(x)
unlist(x, recursive = FALSE)
unlist(as.list(x))
unlist(list(x))
unlist(list(x), recursive = FALSE)
reduce(x)
Reduce(x)
?Reduce(x)
x2 <- list(x)
x2
unlist(x2, recursive = F)
unlist(x, recursive = F)
do.call(list, x)
do.call(list, lapply(x, as.list))
lapply(x, as.list)
lapply(x, as.list) |> unlist()
do.call(c, lapply(x, as.list))
x2 <- do.call(c, lapply(x, as.list))
x2
dim(x2) <- dim(x)
# coe = as.double() vs coe = TRUE ====
x <- rep(1:1000, 5000) |> matrix(ncol = 5000) |> data.table::as.data.table()
rp <- rnorm(100 * 1000) |> matrix(ncol = 1000) |> data.table::as.data.table()
types <- collapse::vtypes(rp)
foo <- bench::mark(
coeFUN = sb_mod(x, row = 1:100, col = 1:1000, rp = rp, coe = as.numeric),
coeTRUE = sb_mod(x, row = 1:100, col = 1:1000, rp = rp, coe = TRUE),
coeloop = for(i in 1:ncol(rp)){as(x[[i]], types[i])},
min_iterations = 250,
check = FALSE
)
library(squarebrackets)
# coe = as.double() vs coe = TRUE ====
x <- rep(1:1000, 5000) |> matrix(ncol = 5000) |> data.table::as.data.table()
rp <- rnorm(100 * 1000) |> matrix(ncol = 1000) |> data.table::as.data.table()
types <- collapse::vtypes(rp)
foo <- bench::mark(
coeFUN = sb_mod(x, row = 1:100, col = 1:1000, rp = rp, coe = as.numeric),
coeTRUE = sb_mod(x, row = 1:100, col = 1:1000, rp = rp, coe = TRUE),
coeloop = for(i in 1:ncol(rp)){as(x[[i]], types[i])},
min_iterations = 250,
check = FALSE
)
foo
ggplot2::autoplot(foo)
dplyr::across
?`[`
methods("[")
` [.POSIXlt `
`[.POSIXlt`
?`[.POSIXlt`
x <- as.POSIXlt(1:10)
x
is.recursive(x)
y <- as.POSIXct(1:10)
y
is.recursive(y)
`[.POSIXct`
?.POSIXct()
.POSIXct()
.POSIXct
`[.difftime`
x <- list(1:10)
x <- as.list(1:10)
names(x)
names(x) <- letters[1:10]
x
x[1]
dim(x)
dim(x) <- c(5,2)
x
x[,1]
x[1]
x[1,1]
names(x)
names(x) <- letters[1:10]
x
x[1]
x[1,1]
# count number of tests
library(squarebrackets)
library(tinytest)
# set working directory to source file location ====
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./generic2")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd("./special")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
print(iFile)
capture.output(source(normalizePath(iFile)), file = nullfile())
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
print(enumerate_total)
# Overview pages:
?squarebrackets::squarebrackets_help
