// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_set_all_atomic
void rcpp_set_all_atomic(SEXP x, const SEXP rp);
RcppExport SEXP _squarebrackets_rcpp_set_all_atomic(SEXP xSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_all_atomic(x, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_rowcol_Logical
void rcpp_set_matrix_rowcol_Logical(LogicalMatrix x, IntegerVector rowind, IntegerVector colind, LogicalVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_rowcol_Logical(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rp(rpSEXP);
    rcpp_set_matrix_rowcol_Logical(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_row_Logical
void rcpp_set_matrix_row_Logical(LogicalMatrix x, IntegerVector rowind, LogicalVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_row_Logical(SEXP xSEXP, SEXP rowindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rp(rpSEXP);
    rcpp_set_matrix_row_Logical(x, rowind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_col_Logical
void rcpp_set_matrix_col_Logical(LogicalMatrix x, IntegerVector colind, LogicalVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_col_Logical(SEXP xSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rp(rpSEXP);
    rcpp_set_matrix_col_Logical(x, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_Logical
void rcpp_set_matrix_Logical(LogicalMatrix x, IntegerVector rowind, IntegerVector colind, LogicalVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_Logical(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type rp(rpSEXP);
    rcpp_set_matrix_Logical(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_rowcol_Integer
void rcpp_set_matrix_rowcol_Integer(IntegerMatrix x, IntegerVector rowind, IntegerVector colind, IntegerVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_rowcol_Integer(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rp(rpSEXP);
    rcpp_set_matrix_rowcol_Integer(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_row_Integer
void rcpp_set_matrix_row_Integer(IntegerMatrix x, IntegerVector rowind, IntegerVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_row_Integer(SEXP xSEXP, SEXP rowindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rp(rpSEXP);
    rcpp_set_matrix_row_Integer(x, rowind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_col_Integer
void rcpp_set_matrix_col_Integer(IntegerMatrix x, IntegerVector colind, IntegerVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_col_Integer(SEXP xSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rp(rpSEXP);
    rcpp_set_matrix_col_Integer(x, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_Integer
void rcpp_set_matrix_Integer(IntegerMatrix x, IntegerVector rowind, IntegerVector colind, IntegerVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_Integer(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rp(rpSEXP);
    rcpp_set_matrix_Integer(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_rowcol_Numeric
void rcpp_set_matrix_rowcol_Numeric(NumericMatrix x, IntegerVector rowind, IntegerVector colind, NumericVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_rowcol_Numeric(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rp(rpSEXP);
    rcpp_set_matrix_rowcol_Numeric(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_row_Numeric
void rcpp_set_matrix_row_Numeric(NumericMatrix x, IntegerVector rowind, NumericVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_row_Numeric(SEXP xSEXP, SEXP rowindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rp(rpSEXP);
    rcpp_set_matrix_row_Numeric(x, rowind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_col_Numeric
void rcpp_set_matrix_col_Numeric(NumericMatrix x, IntegerVector colind, NumericVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_col_Numeric(SEXP xSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rp(rpSEXP);
    rcpp_set_matrix_col_Numeric(x, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_Numeric
void rcpp_set_matrix_Numeric(NumericMatrix x, IntegerVector rowind, IntegerVector colind, NumericVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_Numeric(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rp(rpSEXP);
    rcpp_set_matrix_Numeric(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_rowcol_Character
void rcpp_set_matrix_rowcol_Character(CharacterMatrix x, IntegerVector rowind, IntegerVector colind, CharacterVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_rowcol_Character(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rp(rpSEXP);
    rcpp_set_matrix_rowcol_Character(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_row_Character
void rcpp_set_matrix_row_Character(CharacterMatrix x, IntegerVector rowind, CharacterVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_row_Character(SEXP xSEXP, SEXP rowindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rp(rpSEXP);
    rcpp_set_matrix_row_Character(x, rowind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_col_Character
void rcpp_set_matrix_col_Character(CharacterMatrix x, IntegerVector colind, CharacterVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_col_Character(SEXP xSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rp(rpSEXP);
    rcpp_set_matrix_col_Character(x, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_Character
void rcpp_set_matrix_Character(CharacterMatrix x, IntegerVector rowind, IntegerVector colind, CharacterVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_Character(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rp(rpSEXP);
    rcpp_set_matrix_Character(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_rowcol_Complex
void rcpp_set_matrix_rowcol_Complex(ComplexMatrix x, IntegerVector rowind, IntegerVector colind, ComplexVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_rowcol_Complex(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type rp(rpSEXP);
    rcpp_set_matrix_rowcol_Complex(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_row_Complex
void rcpp_set_matrix_row_Complex(ComplexMatrix x, IntegerVector rowind, ComplexVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_row_Complex(SEXP xSEXP, SEXP rowindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type rp(rpSEXP);
    rcpp_set_matrix_row_Complex(x, rowind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_col_Complex
void rcpp_set_matrix_col_Complex(ComplexMatrix x, IntegerVector colind, ComplexVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_col_Complex(SEXP xSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type rp(rpSEXP);
    rcpp_set_matrix_col_Complex(x, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_Complex
void rcpp_set_matrix_Complex(ComplexMatrix x, IntegerVector rowind, IntegerVector colind, ComplexVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_Complex(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< ComplexVector >::type rp(rpSEXP);
    rcpp_set_matrix_Complex(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_rowcol_Raw
void rcpp_set_matrix_rowcol_Raw(RawMatrix x, IntegerVector rowind, IntegerVector colind, RawVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_rowcol_Raw(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< RawVector >::type rp(rpSEXP);
    rcpp_set_matrix_rowcol_Raw(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_row_Raw
void rcpp_set_matrix_row_Raw(RawMatrix x, IntegerVector rowind, RawVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_row_Raw(SEXP xSEXP, SEXP rowindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< RawVector >::type rp(rpSEXP);
    rcpp_set_matrix_row_Raw(x, rowind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_col_Raw
void rcpp_set_matrix_col_Raw(RawMatrix x, IntegerVector colind, RawVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_col_Raw(SEXP xSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< RawVector >::type rp(rpSEXP);
    rcpp_set_matrix_col_Raw(x, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_matrix_Raw
void rcpp_set_matrix_Raw(RawMatrix x, IntegerVector rowind, IntegerVector colind, RawVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_matrix_Raw(SEXP xSEXP, SEXP rowindSEXP, SEXP colindSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type colind(colindSEXP);
    Rcpp::traits::input_parameter< RawVector >::type rp(rpSEXP);
    rcpp_set_matrix_Raw(x, rowind, colind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_vind_32_atomic
void rcpp_set_vind_32_atomic(SEXP x, const SEXP ind, const SEXP rp);
RcppExport SEXP _squarebrackets_rcpp_set_vind_32_atomic(SEXP xSEXP, SEXP indSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_vind_32_atomic(x, ind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_vind_64_atomic
void rcpp_set_vind_64_atomic(SEXP x, const SEXP ind, const SEXP rp);
RcppExport SEXP _squarebrackets_rcpp_set_vind_64_atomic(SEXP xSEXP, SEXP indSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_vind_64_atomic(x, ind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Logical
void rcpp_setapply_col_Logical(LogicalMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_col_Logical(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Logical(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Logical
void rcpp_setapply_row_Logical(LogicalMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_row_Logical(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Logical(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Integer
void rcpp_setapply_col_Integer(IntegerMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_col_Integer(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Integer(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Integer
void rcpp_setapply_row_Integer(IntegerMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_row_Integer(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Integer(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Numeric
void rcpp_setapply_col_Numeric(NumericMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_col_Numeric(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Numeric(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Numeric
void rcpp_setapply_row_Numeric(NumericMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_row_Numeric(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Numeric(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Character
void rcpp_setapply_col_Character(CharacterMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_col_Character(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Character(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Character
void rcpp_setapply_row_Character(CharacterMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_row_Character(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Character(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Complex
void rcpp_setapply_col_Complex(ComplexMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_col_Complex(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Complex(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Complex
void rcpp_setapply_row_Complex(ComplexMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_row_Complex(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ComplexMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Complex(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_col_Raw
void rcpp_setapply_col_Raw(RawMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_col_Raw(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_col_Raw(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_setapply_row_Raw
void rcpp_setapply_row_Raw(RawMatrix x, Function f);
RcppExport SEXP _squarebrackets_rcpp_setapply_row_Raw(SEXP xSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_setapply_row_Raw(x, f);
    return R_NilValue;
END_RCPP
}
// rcpp_slice_x_atomic
SEXP rcpp_slice_x_atomic(const SEXP x, const R_xlen_t start, const R_xlen_t end, const R_xlen_t by, const R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_slice_x_atomic(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_slice_x_atomic(x, start, end, by, len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_slice_set_atomic
void rcpp_slice_set_atomic(SEXP x, const SEXP rp, const R_xlen_t start, const R_xlen_t end, const R_xlen_t by, const R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_slice_set_atomic(SEXP xSEXP, SEXP rpSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type len(lenSEXP);
    rcpp_slice_set_atomic(x, rp, start, end, by, len);
    return R_NilValue;
END_RCPP
}
// rcpp_slice_xrev_atomic
SEXP rcpp_slice_xrev_atomic(const SEXP x, const R_xlen_t start, const R_xlen_t end, const R_xlen_t by, const R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_slice_xrev_atomic(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_slice_xrev_atomic(x, start, end, by, len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_slice_setrev_atomic
void rcpp_slice_setrev_atomic(SEXP x, const SEXP rp, const R_xlen_t start, const R_xlen_t end, const R_xlen_t by, const R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_slice_setrev_atomic(SEXP xSEXP, SEXP rpSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type len(lenSEXP);
    rcpp_slice_setrev_atomic(x, rp, start, end, by, len);
    return R_NilValue;
END_RCPP
}
// rcpp_slice_wo_atomic
SEXP rcpp_slice_wo_atomic(const SEXP x, const R_xlen_t start, const R_xlen_t end, const R_xlen_t by, const R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_slice_wo_atomic(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_slice_wo_atomic(x, start, end, by, len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_slice_setinv_atomic
void rcpp_slice_setinv_atomic(SEXP x, const SEXP rp, const R_xlen_t start, const R_xlen_t end, const R_xlen_t by, const R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_slice_setinv_atomic(SEXP xSEXP, SEXP rpSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type len(lenSEXP);
    rcpp_slice_setinv_atomic(x, rp, start, end, by, len);
    return R_NilValue;
END_RCPP
}
// rcpp_countv
R_xlen_t rcpp_countv(SEXP y, SEXP v, LogicalVector na, LogicalVector invert, R_xlen_t start, R_xlen_t end, R_xlen_t by, R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_countv(SEXP ySEXP, SEXP vSEXP, SEXP naSEXP, SEXP invertSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type na(naSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type invert(invertSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_countv(y, v, na, invert, start, end, by, len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_whichv_32
IntegerVector rcpp_whichv_32(SEXP y, SEXP v, LogicalVector na, LogicalVector invert, R_xlen_t start, R_xlen_t end, R_xlen_t by, R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_whichv_32(SEXP ySEXP, SEXP vSEXP, SEXP naSEXP, SEXP invertSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type na(naSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type invert(invertSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_whichv_32(y, v, na, invert, start, end, by, len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_slicev_x_atomic
SEXP rcpp_slicev_x_atomic(SEXP x, SEXP y, SEXP v, LogicalVector na, LogicalVector invert, R_xlen_t start, R_xlen_t end, R_xlen_t by, R_xlen_t len);
RcppExport SEXP _squarebrackets_rcpp_slicev_x_atomic(SEXP xSEXP, SEXP ySEXP, SEXP vSEXP, SEXP naSEXP, SEXP invertSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type na(naSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type invert(invertSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_slicev_x_atomic(x, y, v, na, invert, start, end, by, len));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_slicev_set_atomic
void rcpp_slicev_set_atomic(SEXP x, SEXP y, SEXP v, LogicalVector na, LogicalVector invert, R_xlen_t start, R_xlen_t end, R_xlen_t by, R_xlen_t len, SEXP rp);
RcppExport SEXP _squarebrackets_rcpp_slicev_set_atomic(SEXP xSEXP, SEXP ySEXP, SEXP vSEXP, SEXP naSEXP, SEXP invertSEXP, SEXP startSEXP, SEXP endSEXP, SEXP bySEXP, SEXP lenSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type na(naSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type invert(invertSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type by(bySEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type len(lenSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rp(rpSEXP);
    rcpp_slicev_set_atomic(x, y, v, na, invert, start, end, by, len, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_abind_all_conform_dims
bool rcpp_abind_all_conform_dims(IntegerVector conform_dim, IntegerMatrix arg_dim, int n, int along);
RcppExport SEXP _squarebrackets_rcpp_abind_all_conform_dims(SEXP conform_dimSEXP, SEXP arg_dimSEXP, SEXP nSEXP, SEXP alongSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type conform_dim(conform_dimSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type arg_dim(arg_dimSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type along(alongSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_abind_all_conform_dims(conform_dim, arg_dim, n, along));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_abind_get_maxdims
IntegerVector rcpp_abind_get_maxdims(IntegerMatrix arg_dim);
RcppExport SEXP _squarebrackets_rcpp_abind_get_maxdims(SEXP arg_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type arg_dim(arg_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_abind_get_maxdims(arg_dim));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_abind_check_conform_dims
LogicalVector rcpp_abind_check_conform_dims(IntegerVector conform_dim, IntegerMatrix arg_dim, int n, int along);
RcppExport SEXP _squarebrackets_rcpp_abind_check_conform_dims(SEXP conform_dimSEXP, SEXP arg_dimSEXP, SEXP nSEXP, SEXP alongSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type conform_dim(conform_dimSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type arg_dim(arg_dimSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type along(alongSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_abind_check_conform_dims(conform_dim, arg_dim, n, along));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_abind_get_dimnames
List rcpp_abind_get_dimnames(List x, int along);
RcppExport SEXP _squarebrackets_rcpp_abind_get_dimnames(SEXP xSEXP, SEXP alongSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type along(alongSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_abind_get_dimnames(x, along));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_rcbind_get_sizes
IntegerVector rcpp_rcbind_get_sizes(List lst, int imargin);
RcppExport SEXP _squarebrackets_rcpp_rcbind_get_sizes(SEXP lstSEXP, SEXP imarginSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lst(lstSEXP);
    Rcpp::traits::input_parameter< int >::type imargin(imarginSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_rcbind_get_sizes(lst, imargin));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_address
String rcpp_address(SEXP x);
RcppExport SEXP _squarebrackets_rcpp_address(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_address(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_list_bindings
CharacterVector rcpp_list_bindings(String ref_address, Environment env, CharacterVector ls);
RcppExport SEXP _squarebrackets_rcpp_list_bindings(SEXP ref_addressSEXP, SEXP envSEXP, SEXP lsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type ref_address(ref_addressSEXP);
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ls(lsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_list_bindings(ref_address, env, ls));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_all_addresses
CharacterVector rcpp_all_addresses(Environment env, CharacterVector ls);
RcppExport SEXP _squarebrackets_rcpp_all_addresses(SEXP envSEXP, SEXP lsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ls(lsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_all_addresses(env, ls));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_address_in_env
bool rcpp_address_in_env(String ref_address, Environment env, CharacterVector ls);
RcppExport SEXP _squarebrackets_rcpp_address_in_env(SEXP ref_addressSEXP, SEXP envSEXP, SEXP lsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type ref_address(ref_addressSEXP);
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type ls(lsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_address_in_env(ref_address, env, ls));
    return rcpp_result_gen;
END_RCPP
}
// C_prod_int
int C_prod_int(SEXP x, int start, int end);
RcppExport SEXP _squarebrackets_C_prod_int(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(C_prod_int(x, start, end));
    return rcpp_result_gen;
END_RCPP
}
// C_pre_coord2ind
void C_pre_coord2ind(SEXP ind, SEXP coord, int myprod);
RcppExport SEXP _squarebrackets_C_pre_coord2ind(SEXP indSEXP, SEXP coordSEXP, SEXP myprodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ind(indSEXP);
    Rcpp::traits::input_parameter< SEXP >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< int >::type myprod(myprodSEXP);
    C_pre_coord2ind(ind, coord, myprod);
    return R_NilValue;
END_RCPP
}
// rcpp_coord2ind
NumericVector rcpp_coord2ind(NumericVector ind, IntegerMatrix coord, IntegerVector xdim);
RcppExport SEXP _squarebrackets_rcpp_coord2ind(SEXP indSEXP, SEXP coordSEXP, SEXP xdimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ind(indSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type coord(coordSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type xdim(xdimSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_coord2ind(ind, coord, xdim));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dt_needcoe
bool rcpp_dt_needcoe(List x, IntegerVector col, List rp);
RcppExport SEXP _squarebrackets_rcpp_dt_needcoe(SEXP xSEXP, SEXP colSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type col(colSEXP);
    Rcpp::traits::input_parameter< List >::type rp(rpSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dt_needcoe(x, col, rp));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dt_find_name
R_xlen_t rcpp_dt_find_name(SEXP x, SEXP v, int dir);
RcppExport SEXP _squarebrackets_rcpp_dt_find_name(SEXP xSEXP, SEXP vSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dt_find_name(x, v, dir));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_seq_mlen
List rcpp_seq_mlen(IntegerVector x);
RcppExport SEXP _squarebrackets_rcpp_seq_mlen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_seq_mlen(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_recycle_seq_mlen
List rcpp_recycle_seq_mlen(IntegerVector x, IntegerVector y);
RcppExport SEXP _squarebrackets_rcpp_recycle_seq_mlen(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_recycle_seq_mlen(x, y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_serial
SEXP rcpp_serial(SEXP x);
RcppExport SEXP _squarebrackets_rcpp_serial(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_serial(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_is_ma
bool rcpp_is_ma(RObject x);
RcppExport SEXP _squarebrackets_rcpp_is_ma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_is_ma(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_set_array_DTYPEd_atomic
void rcpp_set_array_DTYPEd_atomic(SEXP x, SEXP sub, SEXP dimcumprod, const SEXP rp);
RcppExport SEXP _squarebrackets_rcpp_set_array_DTYPEd_atomic(SEXP xSEXP, SEXP subSEXP, SEXP dimcumprodSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sub(subSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dimcumprod(dimcumprodSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_array_DTYPEd_atomic(x, sub, dimcumprod, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_array_general_atomic
void rcpp_set_array_general_atomic(SEXP x, const SEXP s, const SEXP xdims, const SEXP rp);
RcppExport SEXP _squarebrackets_rcpp_set_array_general_atomic(SEXP xSEXP, SEXP sSEXP, SEXP xdimsSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type s(sSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type xdims(xdimsSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    rcpp_set_array_general_atomic(x, s, xdims, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_set_namepointer
void rcpp_set_namepointer(CharacterVector nms, IntegerVector ind, CharacterVector rp);
RcppExport SEXP _squarebrackets_rcpp_set_namepointer(SEXP nmsSEXP, SEXP indSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type nms(nmsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ind(indSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type rp(rpSEXP);
    rcpp_set_namepointer(nms, ind, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_sub2coord
IntegerMatrix rcpp_sub2coord(const List lst, const double nrow, const int ncol, const NumericVector lens, const NumericVector reps_each, const NumericVector reps_whole);
RcppExport SEXP _squarebrackets_rcpp_sub2coord(SEXP lstSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP lensSEXP, SEXP reps_eachSEXP, SEXP reps_wholeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type lst(lstSEXP);
    Rcpp::traits::input_parameter< const double >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< const int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type lens(lensSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type reps_each(reps_eachSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type reps_whole(reps_wholeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sub2coord(lst, nrow, ncol, lens, reps_each, reps_whole));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sub2ind_d_32
SEXP rcpp_sub2ind_d_32(SEXP sub, SEXP dimcumprod);
RcppExport SEXP _squarebrackets_rcpp_sub2ind_d_32(SEXP subSEXP, SEXP dimcumprodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sub(subSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dimcumprod(dimcumprodSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sub2ind_d_32(sub, dimcumprod));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sub2ind_d_64
SEXP rcpp_sub2ind_d_64(SEXP sub, SEXP dimcumprod);
RcppExport SEXP _squarebrackets_rcpp_sub2ind_d_64(SEXP subSEXP, SEXP dimcumprodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sub(subSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dimcumprod(dimcumprodSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sub2ind_d_64(sub, dimcumprod));
    return rcpp_result_gen;
END_RCPP
}
// C_sub2ind_setrange64
void C_sub2ind_setrange64(SEXP out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const double myprod, const SEXP rp);
RcppExport SEXP _squarebrackets_C_sub2ind_setrange64(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP eachSEXP, SEXP myprodSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type out(outSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type each(eachSEXP);
    Rcpp::traits::input_parameter< const double >::type myprod(myprodSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    C_sub2ind_setrange64(out, start, end, each, myprod, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_sub2ind_general64
NumericVector rcpp_sub2ind_general64(const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const IntegerVector xdim, const NumericVector dimcumprod);
RcppExport SEXP _squarebrackets_rcpp_sub2ind_general64(SEXP lstSEXP, SEXP totalSEXP, SEXP reps_eachSEXP, SEXP reps_wholeSEXP, SEXP xdimSEXP, SEXP dimcumprodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type lst(lstSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type total(totalSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type reps_each(reps_eachSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type reps_whole(reps_wholeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type xdim(xdimSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type dimcumprod(dimcumprodSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sub2ind_general64(lst, total, reps_each, reps_whole, xdim, dimcumprod));
    return rcpp_result_gen;
END_RCPP
}
// C_sub2ind_setrange32
void C_sub2ind_setrange32(SEXP out, const R_xlen_t start, const R_xlen_t end, const R_xlen_t each, const double myprod, const SEXP rp);
RcppExport SEXP _squarebrackets_C_sub2ind_setrange32(SEXP outSEXP, SEXP startSEXP, SEXP endSEXP, SEXP eachSEXP, SEXP myprodSEXP, SEXP rpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type out(outSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type end(endSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type each(eachSEXP);
    Rcpp::traits::input_parameter< const double >::type myprod(myprodSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type rp(rpSEXP);
    C_sub2ind_setrange32(out, start, end, each, myprod, rp);
    return R_NilValue;
END_RCPP
}
// rcpp_sub2ind_general32
IntegerVector rcpp_sub2ind_general32(const List lst, const R_xlen_t total, const NumericVector reps_each, const NumericVector reps_whole, const IntegerVector xdim, const IntegerVector dimcumprod);
RcppExport SEXP _squarebrackets_rcpp_sub2ind_general32(SEXP lstSEXP, SEXP totalSEXP, SEXP reps_eachSEXP, SEXP reps_wholeSEXP, SEXP xdimSEXP, SEXP dimcumprodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type lst(lstSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t >::type total(totalSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type reps_each(reps_eachSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type reps_whole(reps_wholeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type xdim(xdimSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type dimcumprod(dimcumprodSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sub2ind_general32(lst, total, reps_each, reps_whole, xdim, dimcumprod));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP C_any_badindx(SEXP, SEXP);
RcppExport SEXP C_any_badmargin(SEXP, SEXP);
RcppExport SEXP C_any_neg(SEXP);
RcppExport SEXP C_any_nonNULL(SEXP);
RcppExport SEXP C_any_nonpos(SEXP);
RcppExport SEXP C_convert_cplx_32(SEXP, SEXP);
RcppExport SEXP C_convert_cplx_64(SEXP, SEXP);
RcppExport SEXP C_is_altrep(SEXP);
RcppExport SEXP C_match_range(SEXP, SEXP);
RcppExport SEXP C_serial(SEXP);
RcppExport SEXP C_sub2ind_16d_32(SEXP, SEXP);
RcppExport SEXP C_sub2ind_16d_64(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_squarebrackets_rcpp_set_all_atomic", (DL_FUNC) &_squarebrackets_rcpp_set_all_atomic, 2},
    {"_squarebrackets_rcpp_set_matrix_rowcol_Logical", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_rowcol_Logical, 4},
    {"_squarebrackets_rcpp_set_matrix_row_Logical", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_row_Logical, 3},
    {"_squarebrackets_rcpp_set_matrix_col_Logical", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_col_Logical, 3},
    {"_squarebrackets_rcpp_set_matrix_Logical", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_Logical, 4},
    {"_squarebrackets_rcpp_set_matrix_rowcol_Integer", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_rowcol_Integer, 4},
    {"_squarebrackets_rcpp_set_matrix_row_Integer", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_row_Integer, 3},
    {"_squarebrackets_rcpp_set_matrix_col_Integer", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_col_Integer, 3},
    {"_squarebrackets_rcpp_set_matrix_Integer", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_Integer, 4},
    {"_squarebrackets_rcpp_set_matrix_rowcol_Numeric", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_rowcol_Numeric, 4},
    {"_squarebrackets_rcpp_set_matrix_row_Numeric", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_row_Numeric, 3},
    {"_squarebrackets_rcpp_set_matrix_col_Numeric", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_col_Numeric, 3},
    {"_squarebrackets_rcpp_set_matrix_Numeric", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_Numeric, 4},
    {"_squarebrackets_rcpp_set_matrix_rowcol_Character", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_rowcol_Character, 4},
    {"_squarebrackets_rcpp_set_matrix_row_Character", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_row_Character, 3},
    {"_squarebrackets_rcpp_set_matrix_col_Character", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_col_Character, 3},
    {"_squarebrackets_rcpp_set_matrix_Character", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_Character, 4},
    {"_squarebrackets_rcpp_set_matrix_rowcol_Complex", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_rowcol_Complex, 4},
    {"_squarebrackets_rcpp_set_matrix_row_Complex", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_row_Complex, 3},
    {"_squarebrackets_rcpp_set_matrix_col_Complex", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_col_Complex, 3},
    {"_squarebrackets_rcpp_set_matrix_Complex", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_Complex, 4},
    {"_squarebrackets_rcpp_set_matrix_rowcol_Raw", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_rowcol_Raw, 4},
    {"_squarebrackets_rcpp_set_matrix_row_Raw", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_row_Raw, 3},
    {"_squarebrackets_rcpp_set_matrix_col_Raw", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_col_Raw, 3},
    {"_squarebrackets_rcpp_set_matrix_Raw", (DL_FUNC) &_squarebrackets_rcpp_set_matrix_Raw, 4},
    {"_squarebrackets_rcpp_set_vind_32_atomic", (DL_FUNC) &_squarebrackets_rcpp_set_vind_32_atomic, 3},
    {"_squarebrackets_rcpp_set_vind_64_atomic", (DL_FUNC) &_squarebrackets_rcpp_set_vind_64_atomic, 3},
    {"_squarebrackets_rcpp_setapply_col_Logical", (DL_FUNC) &_squarebrackets_rcpp_setapply_col_Logical, 2},
    {"_squarebrackets_rcpp_setapply_row_Logical", (DL_FUNC) &_squarebrackets_rcpp_setapply_row_Logical, 2},
    {"_squarebrackets_rcpp_setapply_col_Integer", (DL_FUNC) &_squarebrackets_rcpp_setapply_col_Integer, 2},
    {"_squarebrackets_rcpp_setapply_row_Integer", (DL_FUNC) &_squarebrackets_rcpp_setapply_row_Integer, 2},
    {"_squarebrackets_rcpp_setapply_col_Numeric", (DL_FUNC) &_squarebrackets_rcpp_setapply_col_Numeric, 2},
    {"_squarebrackets_rcpp_setapply_row_Numeric", (DL_FUNC) &_squarebrackets_rcpp_setapply_row_Numeric, 2},
    {"_squarebrackets_rcpp_setapply_col_Character", (DL_FUNC) &_squarebrackets_rcpp_setapply_col_Character, 2},
    {"_squarebrackets_rcpp_setapply_row_Character", (DL_FUNC) &_squarebrackets_rcpp_setapply_row_Character, 2},
    {"_squarebrackets_rcpp_setapply_col_Complex", (DL_FUNC) &_squarebrackets_rcpp_setapply_col_Complex, 2},
    {"_squarebrackets_rcpp_setapply_row_Complex", (DL_FUNC) &_squarebrackets_rcpp_setapply_row_Complex, 2},
    {"_squarebrackets_rcpp_setapply_col_Raw", (DL_FUNC) &_squarebrackets_rcpp_setapply_col_Raw, 2},
    {"_squarebrackets_rcpp_setapply_row_Raw", (DL_FUNC) &_squarebrackets_rcpp_setapply_row_Raw, 2},
    {"_squarebrackets_rcpp_slice_x_atomic", (DL_FUNC) &_squarebrackets_rcpp_slice_x_atomic, 5},
    {"_squarebrackets_rcpp_slice_set_atomic", (DL_FUNC) &_squarebrackets_rcpp_slice_set_atomic, 6},
    {"_squarebrackets_rcpp_slice_xrev_atomic", (DL_FUNC) &_squarebrackets_rcpp_slice_xrev_atomic, 5},
    {"_squarebrackets_rcpp_slice_setrev_atomic", (DL_FUNC) &_squarebrackets_rcpp_slice_setrev_atomic, 6},
    {"_squarebrackets_rcpp_slice_wo_atomic", (DL_FUNC) &_squarebrackets_rcpp_slice_wo_atomic, 5},
    {"_squarebrackets_rcpp_slice_setinv_atomic", (DL_FUNC) &_squarebrackets_rcpp_slice_setinv_atomic, 6},
    {"_squarebrackets_rcpp_countv", (DL_FUNC) &_squarebrackets_rcpp_countv, 8},
    {"_squarebrackets_rcpp_whichv_32", (DL_FUNC) &_squarebrackets_rcpp_whichv_32, 8},
    {"_squarebrackets_rcpp_slicev_x_atomic", (DL_FUNC) &_squarebrackets_rcpp_slicev_x_atomic, 9},
    {"_squarebrackets_rcpp_slicev_set_atomic", (DL_FUNC) &_squarebrackets_rcpp_slicev_set_atomic, 10},
    {"_squarebrackets_rcpp_abind_all_conform_dims", (DL_FUNC) &_squarebrackets_rcpp_abind_all_conform_dims, 4},
    {"_squarebrackets_rcpp_abind_get_maxdims", (DL_FUNC) &_squarebrackets_rcpp_abind_get_maxdims, 1},
    {"_squarebrackets_rcpp_abind_check_conform_dims", (DL_FUNC) &_squarebrackets_rcpp_abind_check_conform_dims, 4},
    {"_squarebrackets_rcpp_abind_get_dimnames", (DL_FUNC) &_squarebrackets_rcpp_abind_get_dimnames, 2},
    {"_squarebrackets_rcpp_rcbind_get_sizes", (DL_FUNC) &_squarebrackets_rcpp_rcbind_get_sizes, 2},
    {"_squarebrackets_rcpp_address", (DL_FUNC) &_squarebrackets_rcpp_address, 1},
    {"_squarebrackets_rcpp_list_bindings", (DL_FUNC) &_squarebrackets_rcpp_list_bindings, 3},
    {"_squarebrackets_rcpp_all_addresses", (DL_FUNC) &_squarebrackets_rcpp_all_addresses, 2},
    {"_squarebrackets_rcpp_address_in_env", (DL_FUNC) &_squarebrackets_rcpp_address_in_env, 3},
    {"_squarebrackets_C_prod_int", (DL_FUNC) &_squarebrackets_C_prod_int, 3},
    {"_squarebrackets_C_pre_coord2ind", (DL_FUNC) &_squarebrackets_C_pre_coord2ind, 3},
    {"_squarebrackets_rcpp_coord2ind", (DL_FUNC) &_squarebrackets_rcpp_coord2ind, 3},
    {"_squarebrackets_rcpp_dt_needcoe", (DL_FUNC) &_squarebrackets_rcpp_dt_needcoe, 3},
    {"_squarebrackets_rcpp_dt_find_name", (DL_FUNC) &_squarebrackets_rcpp_dt_find_name, 3},
    {"_squarebrackets_rcpp_seq_mlen", (DL_FUNC) &_squarebrackets_rcpp_seq_mlen, 1},
    {"_squarebrackets_rcpp_recycle_seq_mlen", (DL_FUNC) &_squarebrackets_rcpp_recycle_seq_mlen, 2},
    {"_squarebrackets_rcpp_serial", (DL_FUNC) &_squarebrackets_rcpp_serial, 1},
    {"_squarebrackets_rcpp_is_ma", (DL_FUNC) &_squarebrackets_rcpp_is_ma, 1},
    {"_squarebrackets_rcpp_set_array_DTYPEd_atomic", (DL_FUNC) &_squarebrackets_rcpp_set_array_DTYPEd_atomic, 4},
    {"_squarebrackets_rcpp_set_array_general_atomic", (DL_FUNC) &_squarebrackets_rcpp_set_array_general_atomic, 4},
    {"_squarebrackets_rcpp_set_namepointer", (DL_FUNC) &_squarebrackets_rcpp_set_namepointer, 3},
    {"_squarebrackets_rcpp_sub2coord", (DL_FUNC) &_squarebrackets_rcpp_sub2coord, 6},
    {"_squarebrackets_rcpp_sub2ind_d_32", (DL_FUNC) &_squarebrackets_rcpp_sub2ind_d_32, 2},
    {"_squarebrackets_rcpp_sub2ind_d_64", (DL_FUNC) &_squarebrackets_rcpp_sub2ind_d_64, 2},
    {"_squarebrackets_C_sub2ind_setrange64", (DL_FUNC) &_squarebrackets_C_sub2ind_setrange64, 6},
    {"_squarebrackets_rcpp_sub2ind_general64", (DL_FUNC) &_squarebrackets_rcpp_sub2ind_general64, 6},
    {"_squarebrackets_C_sub2ind_setrange32", (DL_FUNC) &_squarebrackets_C_sub2ind_setrange32, 6},
    {"_squarebrackets_rcpp_sub2ind_general32", (DL_FUNC) &_squarebrackets_rcpp_sub2ind_general32, 6},
    {"C_any_badindx",     (DL_FUNC) &C_any_badindx,     2},
    {"C_any_badmargin",   (DL_FUNC) &C_any_badmargin,   2},
    {"C_any_neg",         (DL_FUNC) &C_any_neg,         1},
    {"C_any_nonNULL",     (DL_FUNC) &C_any_nonNULL,     1},
    {"C_any_nonpos",      (DL_FUNC) &C_any_nonpos,      1},
    {"C_convert_cplx_32", (DL_FUNC) &C_convert_cplx_32, 2},
    {"C_convert_cplx_64", (DL_FUNC) &C_convert_cplx_64, 2},
    {"C_is_altrep",       (DL_FUNC) &C_is_altrep,       1},
    {"C_match_range",     (DL_FUNC) &C_match_range,     2},
    {"C_serial",          (DL_FUNC) &C_serial,          1},
    {"C_sub2ind_16d_32",  (DL_FUNC) &C_sub2ind_16d_32,  2},
    {"C_sub2ind_16d_64",  (DL_FUNC) &C_sub2ind_16d_64,  2},
    {NULL, NULL, 0}
};

RcppExport void R_init_squarebrackets(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
