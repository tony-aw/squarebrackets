collapse::gsplit()
collapse::gsplit
v <- sample(letters)
haystack <- sample(letters)
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
m
inherits(m, "GRP")
collapse::GRP
collapse::GRP.default
haystack <- sample(letters, 50, TRUE)
needles <- sample(letters)
needles <- sample(letters[-1])
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
v <- needles
m <- collapse::fmatch(haystack, v)
attr(m, "N.groups") <- length(v)
oldClass(m) <- "qG"
outg <- collapse::GRP.default(m)
outg
m
collapse::gsplit(g = m)
outg <- collapse::GRP.default(m, return.groups = FALSE)
outg
collapse::gsplit(g = m)
collapse::gsplit(g = outg)
m
order(m)
ord <- order(m)
ord[ord]
m[ord]
lapply(v, \(i) m[ord] == i)
lapply(v, \(i) which(m[ord] == i))
lapply(seq_along(v), \(i) which(m[ord] == i))
x <- sample(1:10)
x
ord <- order(x)
x
x <- sample(1:5, 10, TRUE)
ord <- order(x)
x
ord
x[ord]
ord <- order(x)
x
ord
# simple test of concept ====
x <- sample(1:10, 5)
print(x)
# simple test of concept ====
m <- sample(1:10, 5)
print(m)
# simple test of concept ====
m <- sample(1:10, 5)
print(m)
ord <- order(m)
m[ord]
# simple test of concept ====
m <- sample(1:5, 10, TRUE)
print(m)
ord <- order(m)
m[ord]
# simple test of concept ====
ngroups <- 5
m <- sample(1:ngroups, 10, TRUE)
print(m)
ord <- order(m)
lapply(1:ngroups, \(i)which(m == i))
ord
expect_equal(
lapply(1:ngroups, \(i)which(m == i))
ord
expect_equal(
lapply(1:ngroups, \(i)which(m == i)),
ord
)
tinytest::expect_equal(
lapply(1:ngroups, \(i)which(m == i)),
ord
)
tinytest::expect_equal(
lapply(1:ngroups, \(i)which(m == i)) |> unlist(),
ord
)
?squarebrackets::lst_untree
x <- list(
A = list(
A = list(A = "AAA", B = "AAB"),
A = list(A  = "AA2A", B = "AA2B"),
B = list(A = "ABA", B = "ABB"),
C = letters
),
Y = list(
Z = list(Z = "YZZ", Y = "YZY"),
Y = list(Z = "YYZ", Y = "YYY"),
X = "YX"
)
)
rrapply::rrapply(x, how = "melt")
rrapply::rrapply(x, how = "melt")
r <- rrapply::rrapply(x, how = "melt")
View(r)
x <- list(
A = list(
A = list(A = "AAA", B = "AAB"),
A = list(A  = "AA2A", B = "AA2B"),
B = list(A = "ABA", B = "ABB"),
C = letters
),
list(1:10, unam = letters[10:3], 1:10 * 1i),
Y = list(
Z = list(Z = "YZZ", Y = "YZY"),
Y = list(Z = "YYZ", Y = "YYY"),
X = "YX"
)
)
r <- rrapply::rrapply(x, how = "melt")
r
x <- list(
A = list(
A = list(A = "AAA", B = "AAB"),
A = list(A  = "AA2A", B = "AA2B"),
B = list(A = "ABA", B = "ABB"),
C = letters
),
list(1:10, letters[10:3], 1:10 * 1i),
Y = list(
Z = list(Z = "YZZ", Y = "YZY"),
Y = list(Z = "YYZ", Y = "YYY"),
X = "YX"
)
)
r <- rrapply::rrapply(x, how = "melt")
r
x <- list(
A = list(
A = list(A = "AAA", B = "AAB"),
A = list(A  = "AA2A", B = "AA2B"),
B = list(A = "ABA", B = "ABB"),
C = letters
),
list("3" = 1:10, "1" = letters[10:3], "2" = 1:10 * 1i),
Y = list(
Z = list(Z = "YZZ", Y = "YZY"),
Y = list(Z = "YYZ", Y = "YYY"),
X = "YX"
)
)
r <- rrapply::rrapply(x, how = "melt")
r
`[`
pryr::show_c_source(.Primitive("["))
?abind::asub
foo <- ~ 1:2
as.list(foo)
foo <- ~ c(1, 2, 3)
as.list(foo)
foo[[2]]
foo <- ~ c(1, 2, 3 + 1)
foo[[2]]
as.list(foo)
eval(foo[[2]])
?eval
~ 1, 2, 3
~ 1:2:3
foo <- ~ 1:2:3
as.list(foo)
