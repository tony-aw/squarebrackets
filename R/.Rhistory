// [[Rcpp::export(.rcpp_set_matrix_col_RTYPE)]]
void rcpp_set_matrix_col_RTYPE(RTYPEMatrix x, IntegerVector colind, RTYPEVector rp) {
int ni = x.nrow();
int nj = colind.length();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_all"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_all_RTYPE)]]
void rcpp_set_matrix_all_RTYPE(RTYPEMatrix x, RTYPEVector rp) {
R_xlen_t n = x.length();
if(rp.length() == 1) {
for(int i = 0; i < n; ++i){
x[i] = rp[0];
}
}
else {
int counter = 0;
for(int i = 0; i < n; ++i){
x[i] = rp[counter];
counter++;
}
}
}
"
templatecode <- do.call(paste, templatecode)
rcpp_scripts <- character(length(RTYPES))
names(rcpp_scripts) <- RTYPES
for(i in seq_along(RTYPES)) {
rcpp_scripts[[i]] <- stri_replace_all(
templatecode,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode <- list()
templatecode[["set_matrix"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_RTYPE)]]
void rcpp_set_matrix_RTYPE(
RTYPEMatrix x, IntegerVector rowind, IntegerVector colind, RTYPEVector rp
) {
if(rowind.length() == 1 && rowind[0] == -1 && colind.length() == 1 && colind[0] == -1) {
rcpp_set_matrix_all_RTYPE(x, rp);
}
else if(colind.length() == 1 && colind[0] == -1) {
rcpp_set_matrix_row_RTYPE(x, rowind, rp);
}
else if(rowind.length() == 1 && rowind[0] == -1) {
rcpp_set_matrix_col_RTYPE(x, colind, rp);
}
else {
rcpp_set_matrix_rowcol_RTYPE(x, rowind, colind, rp);
}
}
"
templatecode[["set_matrix_rowcol"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_set_matrix_rowcol_RTYPE)]]
void rcpp_set_matrix_rowcol_RTYPE(
RTYPEMatrix x, IntegerVector rowind, IntegerVector colind, RTYPEVector rp
) {
int ni = rowind.length();
int nj = colind.length();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_row"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_set_matrix_row_RTYPE)]]
void rcpp_set_matrix_row_RTYPE(RTYPEMatrix x, IntegerVector rowind, RTYPEVector rp) {
int ni = rowind.length();
int nj = x.ncol();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, j);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, j);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_col"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_set_matrix_col_RTYPE)]]
void rcpp_set_matrix_col_RTYPE(RTYPEMatrix x, IntegerVector colind, RTYPEVector rp) {
int ni = x.nrow();
int nj = colind.length();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_all"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_all_RTYPE)]]
void rcpp_set_matrix_all_RTYPE(RTYPEMatrix x, RTYPEVector rp) {
R_xlen_t n = x.length();
if(rp.length() == 1) {
for(int i = 0; i < n; ++i){
x[i] = rp[0];
}
}
else {
int counter = 0;
for(int i = 0; i < n; ++i){
x[i] = rp[counter];
counter++;
}
}
}
"
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode <- list()
templatecode[["set_matrix"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_RTYPE)]]
void rcpp_set_matrix_RTYPE(
RTYPEMatrix x, IntegerVector rowind, IntegerVector colind, RTYPEVector rp
) {
if(rowind.length() == 1 && rowind[0] == -1 && colind.length() == 1 && colind[0] == -1) {
rcpp_set_matrix_all_RTYPE(x, rp);
}
else if(colind.length() == 1 && colind[0] == -1) {
rcpp_set_matrix_row_RTYPE(x, rowind, rp);
}
else if(rowind.length() == 1 && rowind[0] == -1) {
rcpp_set_matrix_col_RTYPE(x, colind, rp);
}
else {
rcpp_set_matrix_rowcol_RTYPE(x, rowind, colind, rp);
}
}
"
templatecode[["set_matrix_rowcol"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_set_matrix_rowcol_RTYPE)]]
void rcpp_set_matrix_rowcol_RTYPE(
RTYPEMatrix x, IntegerVector rowind, IntegerVector colind, RTYPEVector rp
) {
int ni = rowind.length();
int nj = colind.length();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_row"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_set_matrix_row_RTYPE)]]
void rcpp_set_matrix_row_RTYPE(RTYPEMatrix x, IntegerVector rowind, RTYPEVector rp) {
int ni = rowind.length();
int nj = x.ncol();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, j);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, j);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_col"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_set_matrix_col_RTYPE)]]
void rcpp_set_matrix_col_RTYPE(RTYPEMatrix x, IntegerVector colind, RTYPEVector rp) {
int ni = x.nrow();
int nj = colind.length();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_all"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_set_matrix_all_RTYPE)]]
void rcpp_set_matrix_all_RTYPE(RTYPEMatrix x, RTYPEVector rp) {
R_xlen_t n = x.length();
if(rp.length() == 1) {
for(int i = 0; i < n; ++i){
x[i] = rp[0];
}
}
else {
int counter = 0;
for(int i = 0; i < n; ++i){
x[i] = rp[counter];
counter++;
}
}
}
"
templatecode <- do.call(paste, templatecode)
rcpp_scripts <- character(length(RTYPES))
names(rcpp_scripts) <- RTYPES
for(i in seq_along(RTYPES)) {
rcpp_scripts[[i]] <- stri_replace_all(
templatecode,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
RTYPES <- c("Logical", "Integer", "Numeric", "Character", "Complex", "Raw")
templatecode <- list()
templatecode[["set_matrix_rowcol"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_rowcol_RTYPE)]]
void rcpp_set_matrix_rowcol_RTYPE(
RTYPEMatrix x, IntegerVector rowind, IntegerVector colind, RTYPEVector rp
) {
int ni = rowind.length();
int nj = colind.length();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_row"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_row_RTYPE)]]
void rcpp_set_matrix_row_RTYPE(RTYPEMatrix x, IntegerVector rowind, RTYPEVector rp) {
int ni = rowind.length();
int nj = x.ncol();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, j);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, j);
for(int i = 0; i < ni; ++i) {
col[rowind[i]] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_col"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_col_RTYPE)]]
void rcpp_set_matrix_col_RTYPE(RTYPEMatrix x, IntegerVector colind, RTYPEVector rp) {
int ni = x.nrow();
int nj = colind.length();
if(rp.length() == 1) {
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[0];
}
}
}
else {
int counter = 0;
for(int j = 0; j < nj; ++j){
RTYPEMatrix::Column col = x(_, colind[j]);
for(int i = 0; i < ni; ++i) {
col[i] = rp[counter];
counter++;
}
}
}
}
"
templatecode[["set_matrix_all"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_all_RTYPE)]]
void rcpp_set_matrix_all_RTYPE(RTYPEMatrix x, RTYPEVector rp) {
R_xlen_t n = x.length();
if(rp.length() == 1) {
for(int i = 0; i < n; ++i){
x[i] = rp[0];
}
}
else {
int counter = 0;
for(int i = 0; i < n; ++i){
x[i] = rp[counter];
counter++;
}
}
}
"
templatecode[["set_matrix"]] <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_set_matrix_RTYPE)]]
void rcpp_set_matrix_RTYPE(
RTYPEMatrix x, IntegerVector rowind, IntegerVector colind, RTYPEVector rp
) {
if(rowind.length() == 1 && rowind[0] == -1 && colind.length() == 1 && colind[0] == -1) {
rcpp_set_matrix_all_RTYPE(x, rp);
}
else if(colind.length() == 1 && colind[0] == -1) {
rcpp_set_matrix_row_RTYPE(x, rowind, rp);
}
else if(rowind.length() == 1 && rowind[0] == -1) {
rcpp_set_matrix_col_RTYPE(x, colind, rp);
}
else {
rcpp_set_matrix_rowcol_RTYPE(x, rowind, colind, rp);
}
}
"
templatecode <- do.call(paste, templatecode)
rcpp_scripts <- character(length(RTYPES))
names(rcpp_scripts) <- RTYPES
for(i in seq_along(RTYPES)) {
rcpp_scripts[[i]] <- stri_replace_all(
templatecode,
fixed = c("RTYPE"),
replacement = c(RTYPES[i]),
case_insensitive = FALSE,
vectorize_all = FALSE
)
}
headers <- "
#include <Rcpp.h>
using namespace Rcpp;
"
rcpp_code <- paste(c(headers, rcpp_scripts), collapse = "\n\n\n")
cat(rcpp_code)
Rcpp::sourceCpp(
code = rcpp_code # no errors, good
)
?rbind.data.frame
data.table::rbindlist
?abind::abind
x <- 1:10
names(x)
names(x) <- letters[1:10]
array(x)
?array
vapply
lst <- lapply(1:50, \(x)as.data.frame(matrix(sample(1:5000), ncol = 50)))
foo <- bench::mark(
base = for(i in 1:50) {lst[[i]] <- seq_len(1000)},
collapse = for(i in 1:50) {collapse::setv(lst, i, list(seq_len(1000)), vind1 = TRUE, xlist = TRUE)},
check = FALSE,
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
lst <- lapply(1:100, \(x)as.data.frame(matrix(sample(1:5000), ncol = 50)))
foo <- bench::mark(
base = for(i in 1:100) {lst[[i]] <- seq_len(1000)},
collapse = for(i in 1:100) {collapse::setv(lst, i, list(seq_len(1000)), vind1 = TRUE, xlist = TRUE)},
check = FALSE,
min_iterations = 500
)
foo
ggplot2::autoplot(foo)
