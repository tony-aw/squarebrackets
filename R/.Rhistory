x <- data.table::data.table(
a = sample(c(TRUE, FALSE, NA), 26, TRUE),
b = 1:26,
c = c(rnorm(25), NaN),
d = letters,
e = factor(letters),
f = as.complex(1:26)
)
dt_set_aslist <- function(x, row, col, filter, vars, method = 1, rp) {
if(method == 1) {
for(i in collapse::seq_col(x)) {
temp <- x[[ col[i] ]]
temp[row] <- rp[[i]]
data.table::set(x, j = col[i], value = temp)
}
}
if(method == 2) {
temp <- collapse::ss(x, j = col, check = FALSE)
temp[row, col] <- rp
data.table::set(x, j = col[i], value = temp)
}
}
dt_set_aslist(x, 1:2, 2:3, method = 2, rp = list(c("a", "b"), c(-10, -20)))
rlang::global_entrace()
dt_set_aslist(x, 1:2, 2:3, method = 2, rp = list(c("a", "b"), c(-10, -20)))
rlang::last_trace()
dt_set_aslist <- function(x, row, col, filter, vars, method = 1, rp) {
if(method == 1) {
for(i in collapse::seq_col(x)) {
temp <- x[[ col[i] ]]
temp[row] <- rp[[i]]
data.table::set(x, j = col[i], value = temp)
}
}
if(method == 2) {
temp <- collapse::ss(x, j = col, check = FALSE)
temp[row, col] <- rp
data.table::set(x, j = col, value = temp)
}
}
x <- data.table::data.table(
a = sample(c(TRUE, FALSE, NA), 26, TRUE),
b = 1:26,
c = c(rnorm(25), NaN),
d = letters,
e = factor(letters),
f = as.complex(1:26)
)
dt_set_aslist(x, 1:2, 2:3, method = 2, rp = list(c("a", "b"), c(-10, -20)))
col = 2:3
temp <- collapse::ss(x, j = col, check = FALSE)
rp = list(c("a", "b"), c(-10, -20))
temp <- collapse::ss(x, j = col, check = FALSE)
temp[row, col] <- rp
row = 1:2
temp <- collapse::ss(x, j = col, check = FALSE)
temp[row, col] <- rp
rp
temp[row, col]
temp <- collapse::qDF(collapse::ss(x, j = col, check = FALSE))
temp[row, col] <- rp
data.table::set(x, j = col, value = temp)
col
temp <- collapse::qDF(collapse::ss(x, j = col, check = FALSE))
temp[row, col] <- rp
col
row
rp
temp <- collapse::qDF(collapse::ss(x, j = col, check = FALSE))
temp[row, col] <- collapse::qDF(rp)
View(temp)
temp <- collapse::qDF(collapse::ss(x, j = col, check = FALSE))
temp[row,] <- collapse::qDF(rp)
data.table::set(x, j = col, value = temp)
dt_set_aslist <- function(x, row, col, filter, vars, method = 1, rp) {
if(method == 1) {
for(i in collapse::seq_col(x)) {
temp <- x[[ col[i] ]]
temp[row] <- rp[[i]]
data.table::set(x, j = col[i], value = temp)
}
}
if(method == 2) {
temp <- collapse::qDF(collapse::ss(x, j = col, check = FALSE))
temp[row,] <- collapse::qDF(rp)
data.table::set(x, j = col, value = temp)
}
}
x <- data.table::data.table(
a = sample(c(TRUE, FALSE, NA), 26, TRUE),
b = 1:26,
c = c(rnorm(25), NaN),
d = letters,
e = factor(letters),
f = as.complex(1:26)
)
dt_set_aslist(x, 1:2, 2:3, method = 2, rp = list(c("a", "b"), c(-10, -20)))
x
dt_set_aslist(x, 1:2, 2:3, method = 1, rp = list(c("a", "b"), c(-10, -20)))
rlang::last_trace()
dt_set_aslist <- function(x, row, col, filter, vars, method = 1, rp) {
if(method == 1) {
for(i in seq_along(col)) {
temp <- x[[ col[i] ]]
temp[row] <- rp[[i]]
data.table::set(x, j = col[i], value = temp)
}
}
if(method == 2) {
temp <- collapse::qDF(collapse::ss(x, j = col, check = FALSE))
temp[row,] <- collapse::qDF(rp)
data.table::set(x, j = col, value = temp)
}
}
x <- data.table::data.table(
a = sample(c(TRUE, FALSE, NA), 26, TRUE),
b = 1:26,
c = c(rnorm(25), NaN),
d = letters,
e = factor(letters),
f = as.complex(1:26)
)
dt_set_aslist(x, 1:2, 2:3, method = 1, rp = list(c("a", "b"), c(-10, -20)))
x
?fastmap::is.key_missing()
fastmap::is.key_missing
?fastmap::fastmap
?collections::`collections-package`
x <- 1:10
x[] <- as.logical(x)
x
x[] <- as.logical(x)
z
x
x[] <- sample(c(TRUE, FALSE, NA), length(x), TRUE)
x
x[] <- as.logical(x)
x
typeof(x)
?structure
x <- matrix(1:10, ncol = 2)
colnames(x) <- c("a", "b")
x
as.logical(x)
names(x) <- letters[1:10]
x
as.logical(x)
?attributes
attr(x, "test") <- "test"
x
x[] <- as.logical(x)
x
tinycodet::as_bool
x
x[] <- collapse::unattrib(x)
x
x[] <- collapse::unattrib(x)
collapse::unattrib(x)
install.packages("listArray")
listArray::listArray(1:10)
x <- listArray::listArray(1:10)
View(x)
is.array(x)
View(x)
?`[`
x <- as.list(1:20)
dim(x) <- c(5, 4)
x
x[,1]
x[,1, drop = FALSE]
library(squarebrackets)
?squarebrackets::aaa3_squarebrackets_indx_args
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec(NumericVector inits, int w, int n, Function f) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = as<double>(f(x[idx]));
}
return x;
}
"
)
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_minus(NumericVector inits, int w, int n, bool rev) {
NumericVector x(n);
Range idx(0, w - 1);
x[idx] = inits;
if(!rev) {
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = x[i-1] - x[i-2];
}
}
if(rev) {
for (int i = w; i < n; i++){
Range idx(i - w, i - 1);
x[i] = x[i-2] - x[i-1];
}
}
return x;
}
"
)
library(squarebrackets)
seq_rec(f = \(x)x[2] - x[1])
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_minus(NumericVector inits, int n, bool rev) {
NumericVector x(n);
Range idx(0, 1);
x[idx] = inits;
if(!rev) {
for (int i = 2; i < n; i++){
x[i] = x[i-1] - x[i-2];
}
}
if(rev) {
for (int i = 2; i < n; i++){
x[i] = x[i-2] - x[i-1];
}
}
return x;
}
"
)
seq_rec(f = \(x)x[2] - x[1])
rcpp_seq_rec_minus(c(0,1), 10L, FALSE)
rcpp_seq_rec_minus(c(0,1), 10L, TRUE)
seq_rec(f = \(x)x[1] - x[2])
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_pow(NumericVector inits, int n, bool rev) {
NumericVector x(n);
Range idx(0, 1);
x[idx] = inits;
if(!rev) {
for (int i = 2; i < n; i++){
x[i] = pow(x[i-1], x[i-2]);
}
}
if(rev) {
for (int i = 2; i < n; i++){
x[i] = pow(x[i-2], x[i-1]);
}
}
return x;
}
"
)
rcpp_seq_rec_pow(c(0,1), 10L)
rcpp_seq_rec_pow(c(0,1), 10L, FALSE)
rcpp_seq_rec_pow(c(0,1), 10L, FALSE)
squarebrackets::seq_rec(f = \(x)x[2]^x[1])
squarebrackets::seq_rec(f = \(x)x[1]^x[2])
rcpp_seq_rec_pow(c(0,1), 10L, TRUE)
rcpp_seq_rec_pow(c(1,2), 10L, TRUE)
squarebrackets::seq_rec(c(1,2), f = \(x)x[1]^x[2])
rcpp_seq_rec_pow(c(1.5,2.5), 10L, TRUE)
rcpp_seq_rec_pow(c(1.5,2.5), 10L, FALSE)
rcpp_seq_rec_pow(c(1.1,1.3), 10L, FALSE)
squarebrackets::seq_rec(c(1.1,1.3), f = \(x)x[1]^x[2])
squarebrackets::seq_rec(c(1.1,1.3), f = \(x)x[2]^x[1])
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_log(NumericVector inits, int n, bool rev) {
NumericVector x(n);
Range idx(0, 1);
x[idx] = inits;
if(!rev) {
for (int i = 2; i < n; i++){
x[i] = log(x[i-2]) / log(x[i-1]); // = log_a(b)
}
}
if(rev) {
for (int i = 2; i < n; i++){
x[i] = log(x[i-1]) / log(x[i-2]); // = log_b(a)
}
}
return x;
}
"
)
?log
squarebrackets::seq_rec(c(1.1,1.3), f = \(x)log(x[2], base = log(x[1])))
squarebrackets::seq_rec(c(1,2), f = \(x)log(x[2], base = log(x[1])))
squarebrackets::seq_rec(c(2,1), f = \(x)log(x[2], base = log(x[1])))
squarebrackets::seq_rec(c(20,10), f = \(x)log(x[2], base = log(x[1])))
squarebrackets::seq_rec(c(200,100), f = \(x)log(x[2], base = log(x[1])))
squarebrackets::seq_rec(c(200,10), f = \(x)log(x[2], base = log(x[1])))
Rcpp::cppFunction(
"
NumericVector rcpp_seq_rec_log(NumericVector inits, int n, bool rev) {
NumericVector x(n);
Range idx(0, 1);
x[idx] = inits;
if(!rev) {
for (int i = 2; i < n; i++){
x[i] = log(x[i-2]) / log(x[i-1]); // = log_a(b)
}
}
if(rev) {
for (int i = 2; i < n; i++){
x[i] = log(x[i-1]) / log(x[i-2]); // = log_b(a)
}
}
return x;
}
"
)
rcpp_seq_rec_log(c(200,10), 10L, FALSE)
squarebrackets::seq_rec(c(200,10), f = \(x)log(x[2], base = log(x[1])))
squarebrackets::seq_rec(c(200,10), f = \(x)log(x[1], base = log(x[2])))
?ls
?lsf.str
?lsf.str(envir = baseenv())
lsf.str(envir = baseenv())
example(data.table)
library(data.table)
library(data.table)
example(data.table)
?example
help("[[", "data.table")
seq(1.5, 27.5)
?collapse::fsubset
library(squarebrackets)
?idx_by
?idx_ord_m
?collapse::fsubset
collapse::`fselect<-`
collapse::`get_vars_ind<-`
collapse:::`get_vars_ind<-`
match("a", c(letters, letters))
Rcpp::cppFunction(
"
IntegerVector rcpp_coord2ind(
IntegerVector ind, IntegerMatrix coord, IntegerVector xdim
) {
R_xlen_t nc = coord.ncol();
R_xlen_t nr = coord.nrow();
IntegerVector temp1;
IntegerVector temp2;
int temp3;
for(R_xlen_t i = 1; i < nc; ++i) {
temp1 = xdim[Range(0, i)];
temp2 = coord(_, i);
int temp3 = prod(temp1 * (temp2 - 1));
for(R_xlen_t j = 0l j < nr; ++i) {
ind[j] = ind[j] + temp3;
}
}
return ind;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_coord2ind(
IntegerVector ind, IntegerMatrix coord, IntegerVector xdim
) {
R_xlen_t nc = coord.ncol();
R_xlen_t nr = coord.nrow();
IntegerVector temp1;
IntegerVector temp2;
int temp3;
for(R_xlen_t i = 1; i < nc; ++i) {
temp1 = xdim[Range(0, i)];
temp2 = coord(_, i);
int temp3 = prod(temp1 * (temp2 - 1));
for(R_xlen_t j = 0; j < nr; ++i) {
ind[j] = ind[j] + temp3;
}
}
return ind;
}
"
)
?collapse::subset
?collapse::fsubset
x <- 1:1e6
foo <- bench::mark(
base = x[1:10],
collapse = collapse::fsubset(x, 1:10),
)
fo
foo
ggplot2::autoplot(foo)
x <- 1:1e7
foo <- bench::mark(
base = x[1:1000],
collapse = collapse::fsubset(x, 1:1000),
)
foo
ggplot2::autoplot(foo)
x <- matrix(1:1e6, nrow = 1000, ncol = 1000)
x <- matrix(1:1e6, nrow = 1000, ncol = 1000)
foo <- bench::mark(
base = x[1:100, 1:100, drop = FALSE],
collapse = collapse::fsubset(x, 1:100, 1:100),
)
foo
ggplot2::autoplot(foo)
library(squarebrackets)
x <- matrix(1:10, ncol = 2)
x <- 1:10
idx(x, integer(0))
x <- letters
idx(x, integer(0))
x[idx(x, integer(0))]
idx(x, NA)
idx(x, NA_integer_)
idx(x, NA_character_)
names(x) <- letters
idx(x, NA_character_)
idx(x, NA_character_)
Rcpp::cppFunction(
'
IntegerVector rcpp_set_mutable_atomic(IntegerVector x) {
IntegerVector y = copy(x);
CharacterVector newclass = CharacterVector::create("mutable_atomic", x.attr("class"));
y.attr("class") = newclass;
return y;
}
'
)
Rcpp::cppFunction(
'
IntegerVector rcpp_set_mutable_atomic(IntegerVector x) {
IntegerVector y = clone(x);
CharacterVector newclass = CharacterVector::create("mutable_atomic", x.attr("class"));
y.attr("class") = newclass;
return y;
}
'
)
x <- matrix(1:20, ncol = 2)
rcpp_set_mutable_atomic(x)
Rcpp::cppFunction(
'
IntegerVector rcpp_set_mutable_atomic(IntegerVector x) {
IntegerVector y = clone(x);
CharacterVector oldclass = x.attr("class");
CharacterVector newclass(oldclass.length() + 1);
newclass[Rcpp::Range(1, oldclass.length() + 1)] = oldclass;
newclass[0] = "mutable_atomic";
y.attr("class") = newclass;
return y;
}
'
)
x <- matrix(1:20, ncol = 2)
rcpp_set_mutable_atomic(x)
class(x)
Rcpp::cppFunction(
'
IntegerVector rcpp_set_mutable_atomic(IntegerVector x) {
IntegerVector y = clone(x);
CharacterVector oldclass = x.attr("class");
CharacterVector newclass(oldclass.length() + 1);
newclass[Rcpp::Range(1, oldclass.length() + 1)] = oldclass;
String mutable_atomic = "mutable_atomic";
newclass[0] = mutable_atomic;
y.attr("class") = newclass;
return y;
}
'
)
x <- matrix(1:20, ncol = 2)
rcpp_set_mutable_atomic(x)
?collections::dict()
d <- dict(list(apple = 5, orange = 10))
d <- collections::dict(list(apple = 5, orange = 10))
View(d)
d[["ht_xptr"]]
d$set("banana", 3)
d
d$as_list()
d$set("banana", data.frame(1:10, letters[1:10]))
View(d)
lockEnvironment(d, bindings = TRUE)
d
d$as_list()
d$set("banana", data.frame(1:10, letters[1:10]))
d$set("banana", 1)
d$as_list()
environmentIsLocked(d)
d$set("tony", 1)
?collections
?collections::deque()
?collections::stack
install.packages("R6DS")
?R6DS::RDLL
dll <- RDLL$new(0, 1, 2, 3, 4)
dll <- RDLL$new()
library(R6DS)
dll <- RDLL$new()
dll <- RDLL$new(0, 1, 2, collapse=list(3, 4))
dll
View(dll)
dll$append <- NULL
View(d)
d$ht_xptr
d$ht_xptr |> View
d$ht_xptr |> View()
d$ht_xptr
d$ht_xptr |> str()
d
d$as_list()
