collapse::funique()
?collapse::funique
(1 - 1i):2
1 - 1i:2
?seq.int
range(1:10)
range(10:1)
Rcpp::cppFunction(
"
NumericVector rcpp_subset(
const NumericVector x, const IntegerVector ind
) {
int n = ind.length();
NumericVector out(n);
for(int i = 0; i < n; ++i) {
out[i] = x[ind[i]];
}
return out;
}
"
)
x <- rnorm(1e5)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
rcpp = rcpp_subset(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
NumericVector rcpp_subset(
const NumericVector x, const IntegerVector ind
) {
int n = Rf_length(ind);
NumericVector out(n);
for(int i = 0; i < n; ++i) {
out[i] = x[ind[i]];
}
return out;
}
"
)
x <- rnorm(1e5)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
rcpp = rcpp_subset(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
Rcpp::cppFunction(
"
NumericVector rcpp_subset(
const IntegerVector x, const IntegerVector ind
) {
int n = Rf_length(ind);
IntegerVector out(n);
for(int i = 0; i < n; ++i) {
out[i] = x[ind[i]];
}
return out;
}
"
)
Rcpp::cppFunction(
"
IntegerVector rcpp_subset(
const IntegerVector x, const IntegerVector ind
) {
int n = Rf_length(ind);
IntegerVector out(n);
for(int i = 0; i < n; ++i) {
out[i] = x[ind[i]];
}
return out;
}
"
)
x <- rnorm(1e5)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
rcpp = rcpp_subset(x, ind2),
base = x[ind],
min_iterations = 500
)
x <- sample(1:1e6)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
rcpp = rcpp_subset(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
body <-  "
double *pout;
SEXP out = PROTECT(allocVector(REALSXP, ni * nj * nk * nl * nm * nn));
pout = REAL(out);
int n = Rf_length(ind)
int *pi;
pi = INTEGER(ind);
int *px;
px = INTEGER(x);
for(int i = 0; i < n; ++i) {
pout[i] = px[pi[i]];
}
return(out);
"
inline::cfunction(
body = body, signature(x = "SEXP", ind = 'SEXP')
)
inline::cfunction(
body = body, signature = signature(x = "SEXP", ind = 'SEXP')
)
?inline::cfunction
inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
body <-  "
int n = Rf_length(ind)
int *pi;
pi = INTEGER(ind);
int *px;
px = INTEGER(x);
double *pout;
SEXP out = PROTECT(allocVector(REALSXP, n));
pout = REAL(out);
for(int i = 0; i < n; ++i) {
pout[i] = px[pi[i]];
}
return(out);
"
inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
body <-  "
int n = Rf_length(ind);
int *pi;
pi = INTEGER(ind);
int *px;
px = INTEGER(x);
double *pout;
SEXP out = PROTECT(allocVector(REALSXP, n));
pout = REAL(out);
for(int i = 0; i < n; ++i) {
pout[i] = px[pi[i]];
}
return(out);
"
inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
myss <- inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
x <- sample(1:1e6)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
rcpp = myss(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
x <- rnorm(1e6)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
myC = myss(x, ind2),
base = x[ind],
min_iterations = 500
)
body <-  "
int n = Rf_length(ind);
int *pi;
pi = INTEGER(ind);
int *px;
px = REAL(x);
double *pout;
SEXP out = PROTECT(allocVector(REALSXP, n));
pout = REAL(out);
for(int i = 0; i < n; ++i) {
pout[i] = px[pi[i]];
}
return(out);
"
myss <- inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
body <-  "
int n = Rf_length(ind);
int *pi;
pi = INTEGER(ind);
double *px;
px = REAL(x);
double *pout;
SEXP out = PROTECT(allocVector(REALSXP, n));
pout = REAL(out);
for(int i = 0; i < n; ++i) {
pout[i] = px[pi[i]];
}
return(out);
"
myss <- inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
x <- rnorm(1e6)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
myC = myss(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
myss <- inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
x <- rnorm(1e6)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
myC = myss(x, ind2),
base = x[ind],
min_iterations = 500
)
body <-  "
int n = Rf_length(ind);
int *pi;
pi = INTEGER(ind);
double *px;
px = REAL(x);
double *pout;
SEXP out = PROTECT(allocVector(REALSXP, n));
pout = REAL(out);
for(int i = 0; i < n; ++i) {
pout[i] = px[pi[i]];
}
return(out);
"
myss <- inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
x <- rnorm(1e7)
ind <- 10:5e4
ind2 <- ind - 1L
foo <- bench::mark(
myC = myss(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
?hasattr
?collapse::`AA2-efficient-programming`
foo <- bench::mark(
myC = if(is.null(attributes(x)) && is.atomic(x)) myss(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
simplesubset <- inline::cfunction(
body = body, sig = signature(x = "SEXP", ind = 'SEXP')
)
foo <- bench::mark(
myC = if(is.null(attributes(x)) && is.atomic(x)) simplesubset(x, ind2),
base = x[ind],
min_iterations = 500
)
summary(foo)
ggplot2::autoplot(foo)
pryr::show_c_source("[")
pryr::show_c_source(`[`)
`[`
pryr::show_c_source(.Primitive("["))
?`[[`
x <- array(1:27, dim = c(3,3,3))
dimnames(x) <- rep(list("a", "b", "c"), 3)
rep(list("a", "b", "c"), 3)
rep(list(c("a", "b", "c")), 3)
rep(lapply(1:3, \(x)sample(letters, 3)), 3)
lapply(1:3, \(x)sample(letters, 3))
dimnames(x) <- lapply(1:3, \(x)sample(letters, 3))
dimnames(x) <- lapply(1:3, \(x)sample(letters[1:9], 3))
x
ind <- sample(letters[1:9])
ind
dim(ind) <- c(3,3)
ind
x[ind]
as.data.frame(dimnames(x))
dimnames(x)
as.data.frame(dimnames(x)) |> as.matrix()
as.data.frame(dimnames(x)) |> as.matrix() |> unname()
ind <- as.data.frame(dimnames(x)) |> as.matrix() |> unname()
x[ind]
x
